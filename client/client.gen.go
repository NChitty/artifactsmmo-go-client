// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	HTTPBasicScopes = "HTTPBasic.Scopes"
	JWTBearerScopes = "JWTBearer.Scopes"
)

// Defines values for AddCharacterSchemaSkin.
const (
	AddCharacterSchemaSkinMen1   AddCharacterSchemaSkin = "men1"
	AddCharacterSchemaSkinMen2   AddCharacterSchemaSkin = "men2"
	AddCharacterSchemaSkinMen3   AddCharacterSchemaSkin = "men3"
	AddCharacterSchemaSkinWomen1 AddCharacterSchemaSkin = "women1"
	AddCharacterSchemaSkinWomen2 AddCharacterSchemaSkin = "women2"
	AddCharacterSchemaSkinWomen3 AddCharacterSchemaSkin = "women3"
)

// Defines values for CharacterSchemaSkin.
const (
	CharacterSchemaSkinMen1   CharacterSchemaSkin = "men1"
	CharacterSchemaSkinMen2   CharacterSchemaSkin = "men2"
	CharacterSchemaSkinMen3   CharacterSchemaSkin = "men3"
	CharacterSchemaSkinWomen1 CharacterSchemaSkin = "women1"
	CharacterSchemaSkinWomen2 CharacterSchemaSkin = "women2"
	CharacterSchemaSkinWomen3 CharacterSchemaSkin = "women3"
)

// Defines values for CooldownSchemaReason.
const (
	BuyGe        CooldownSchemaReason = "buy_ge"
	Crafting     CooldownSchemaReason = "crafting"
	DeleteItem   CooldownSchemaReason = "delete_item"
	DepositBank  CooldownSchemaReason = "deposit_bank"
	Equip        CooldownSchemaReason = "equip"
	Fight        CooldownSchemaReason = "fight"
	Gathering    CooldownSchemaReason = "gathering"
	Movement     CooldownSchemaReason = "movement"
	Recycling    CooldownSchemaReason = "recycling"
	SellGe       CooldownSchemaReason = "sell_ge"
	Task         CooldownSchemaReason = "task"
	Unequip      CooldownSchemaReason = "unequip"
	WithdrawBank CooldownSchemaReason = "withdraw_bank"
)

// Defines values for CraftSchemaSkill0.
const (
	CraftSchemaSkill0Cooking         CraftSchemaSkill0 = "cooking"
	CraftSchemaSkill0Gearcrafting    CraftSchemaSkill0 = "gearcrafting"
	CraftSchemaSkill0Jewelrycrafting CraftSchemaSkill0 = "jewelrycrafting"
	CraftSchemaSkill0Mining          CraftSchemaSkill0 = "mining"
	CraftSchemaSkill0Weaponcrafting  CraftSchemaSkill0 = "weaponcrafting"
	CraftSchemaSkill0Woodcutting     CraftSchemaSkill0 = "woodcutting"
)

// Defines values for EquipRequestSchemaSlot.
const (
	EquipRequestSchemaSlotAmulet      EquipRequestSchemaSlot = "amulet"
	EquipRequestSchemaSlotArtifact1   EquipRequestSchemaSlot = "artifact1"
	EquipRequestSchemaSlotArtifact2   EquipRequestSchemaSlot = "artifact2"
	EquipRequestSchemaSlotArtifact3   EquipRequestSchemaSlot = "artifact3"
	EquipRequestSchemaSlotBodyArmor   EquipRequestSchemaSlot = "body_armor"
	EquipRequestSchemaSlotBoots       EquipRequestSchemaSlot = "boots"
	EquipRequestSchemaSlotConsumable1 EquipRequestSchemaSlot = "consumable1"
	EquipRequestSchemaSlotConsumable2 EquipRequestSchemaSlot = "consumable2"
	EquipRequestSchemaSlotHelmet      EquipRequestSchemaSlot = "helmet"
	EquipRequestSchemaSlotLegArmor    EquipRequestSchemaSlot = "leg_armor"
	EquipRequestSchemaSlotRing1       EquipRequestSchemaSlot = "ring1"
	EquipRequestSchemaSlotRing2       EquipRequestSchemaSlot = "ring2"
	EquipRequestSchemaSlotShield      EquipRequestSchemaSlot = "shield"
	EquipRequestSchemaSlotWeapon      EquipRequestSchemaSlot = "weapon"
)

// Defines values for EquipSchemaSlot.
const (
	EquipSchemaSlotAmulet      EquipSchemaSlot = "amulet"
	EquipSchemaSlotArtifact1   EquipSchemaSlot = "artifact1"
	EquipSchemaSlotArtifact2   EquipSchemaSlot = "artifact2"
	EquipSchemaSlotArtifact3   EquipSchemaSlot = "artifact3"
	EquipSchemaSlotBodyArmor   EquipSchemaSlot = "body_armor"
	EquipSchemaSlotBoots       EquipSchemaSlot = "boots"
	EquipSchemaSlotConsumable1 EquipSchemaSlot = "consumable1"
	EquipSchemaSlotConsumable2 EquipSchemaSlot = "consumable2"
	EquipSchemaSlotHelmet      EquipSchemaSlot = "helmet"
	EquipSchemaSlotLegArmor    EquipSchemaSlot = "leg_armor"
	EquipSchemaSlotRing1       EquipSchemaSlot = "ring1"
	EquipSchemaSlotRing2       EquipSchemaSlot = "ring2"
	EquipSchemaSlotShield      EquipSchemaSlot = "shield"
	EquipSchemaSlotWeapon      EquipSchemaSlot = "weapon"
)

// Defines values for FightSchemaResult.
const (
	Lose FightSchemaResult = "lose"
	Win  FightSchemaResult = "win"
)

// Defines values for ResourceSchemaSkill.
const (
	ResourceSchemaSkillFishing     ResourceSchemaSkill = "fishing"
	ResourceSchemaSkillMining      ResourceSchemaSkill = "mining"
	ResourceSchemaSkillWoodcutting ResourceSchemaSkill = "woodcutting"
)

// Defines values for TaskSchemaType.
const (
	Crafts    TaskSchemaType = "crafts"
	Monsters  TaskSchemaType = "monsters"
	Resources TaskSchemaType = "resources"
)

// Defines values for UnequipSchemaSlot.
const (
	UnequipSchemaSlotAmulet      UnequipSchemaSlot = "amulet"
	UnequipSchemaSlotArtifact1   UnequipSchemaSlot = "artifact1"
	UnequipSchemaSlotArtifact2   UnequipSchemaSlot = "artifact2"
	UnequipSchemaSlotArtifact3   UnequipSchemaSlot = "artifact3"
	UnequipSchemaSlotBodyArmor   UnequipSchemaSlot = "body_armor"
	UnequipSchemaSlotBoots       UnequipSchemaSlot = "boots"
	UnequipSchemaSlotConsumable1 UnequipSchemaSlot = "consumable1"
	UnequipSchemaSlotConsumable2 UnequipSchemaSlot = "consumable2"
	UnequipSchemaSlotHelmet      UnequipSchemaSlot = "helmet"
	UnequipSchemaSlotLegArmor    UnequipSchemaSlot = "leg_armor"
	UnequipSchemaSlotRing1       UnequipSchemaSlot = "ring1"
	UnequipSchemaSlotRing2       UnequipSchemaSlot = "ring2"
	UnequipSchemaSlotShield      UnequipSchemaSlot = "shield"
	UnequipSchemaSlotWeapon      UnequipSchemaSlot = "weapon"
)

// Defines values for GetAllCharactersParamsSort.
const (
	GetAllCharactersParamsSortCooking         GetAllCharactersParamsSort = "cooking"
	GetAllCharactersParamsSortFishing         GetAllCharactersParamsSort = "fishing"
	GetAllCharactersParamsSortGearcrafting    GetAllCharactersParamsSort = "gearcrafting"
	GetAllCharactersParamsSortJewelrycrafting GetAllCharactersParamsSort = "jewelrycrafting"
	GetAllCharactersParamsSortMining          GetAllCharactersParamsSort = "mining"
	GetAllCharactersParamsSortWeaponcrafting  GetAllCharactersParamsSort = "weaponcrafting"
	GetAllCharactersParamsSortWoodcutting     GetAllCharactersParamsSort = "woodcutting"
)

// Defines values for GetAllItemsParamsType.
const (
	GetAllItemsParamsTypeAmulet     GetAllItemsParamsType = "amulet"
	GetAllItemsParamsTypeBodyArmor  GetAllItemsParamsType = "body_armor"
	GetAllItemsParamsTypeBoots      GetAllItemsParamsType = "boots"
	GetAllItemsParamsTypeConsumable GetAllItemsParamsType = "consumable"
	GetAllItemsParamsTypeHelmet     GetAllItemsParamsType = "helmet"
	GetAllItemsParamsTypeLegArmor   GetAllItemsParamsType = "leg_armor"
	GetAllItemsParamsTypeResource   GetAllItemsParamsType = "resource"
	GetAllItemsParamsTypeRing       GetAllItemsParamsType = "ring"
	GetAllItemsParamsTypeShield     GetAllItemsParamsType = "shield"
	GetAllItemsParamsTypeWeapon     GetAllItemsParamsType = "weapon"
)

// Defines values for GetAllItemsParamsCraftSkill.
const (
	GetAllItemsParamsCraftSkillCooking         GetAllItemsParamsCraftSkill = "cooking"
	GetAllItemsParamsCraftSkillGearcrafting    GetAllItemsParamsCraftSkill = "gearcrafting"
	GetAllItemsParamsCraftSkillJewelrycrafting GetAllItemsParamsCraftSkill = "jewelrycrafting"
	GetAllItemsParamsCraftSkillMining          GetAllItemsParamsCraftSkill = "mining"
	GetAllItemsParamsCraftSkillWeaponcrafting  GetAllItemsParamsCraftSkill = "weaponcrafting"
	GetAllItemsParamsCraftSkillWoodcutting     GetAllItemsParamsCraftSkill = "woodcutting"
)

// Defines values for GetAllMapsParamsContentType.
const (
	Bank          GetAllMapsParamsContentType = "bank"
	GrandExchange GetAllMapsParamsContentType = "grand_exchange"
	Monster       GetAllMapsParamsContentType = "monster"
	Resource      GetAllMapsParamsContentType = "resource"
	TasksMaster   GetAllMapsParamsContentType = "tasks_master"
	Workshop      GetAllMapsParamsContentType = "workshop"
)

// Defines values for GetAllResourcesParamsSkill.
const (
	Fishing     GetAllResourcesParamsSkill = "fishing"
	Mining      GetAllResourcesParamsSkill = "mining"
	Woodcutting GetAllResourcesParamsSkill = "woodcutting"
)

// ActionItemBankResponseSchema defines model for ActionItemBankResponseSchema.
type ActionItemBankResponseSchema struct {
	Data BankItemSchema `json:"data"`
}

// AddAccountSchema defines model for AddAccountSchema.
type AddAccountSchema struct {
	// Email Your email.
	Email openapi_types.Email `json:"email"`

	// Password Your password.
	Password string `json:"password"`

	// Username Your desired username.
	Username string `json:"username"`
}

// AddCharacterSchema defines model for AddCharacterSchema.
type AddCharacterSchema struct {
	// Name Your desired character name. It's unique and all players can see it.
	Name string `json:"name"`

	// Skin Your desired skin.
	Skin AddCharacterSchemaSkin `json:"skin"`
}

// AddCharacterSchemaSkin Your desired skin.
type AddCharacterSchemaSkin string

// AnnouncementSchema defines model for AnnouncementSchema.
type AnnouncementSchema struct {
	// CreatedAt Datetime of the announcement.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Message Announcement text.
	Message string `json:"message"`
}

// BankItemSchema defines model for BankItemSchema.
type BankItemSchema struct {
	// Bank Items in your banks.
	Bank []SimpleItemSchema `json:"bank"`

	// Character Player details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`

	// Item Item details.
	Item ItemSchema `json:"item"`
}

// BlockedHitsSchema defines model for BlockedHitsSchema.
type BlockedHitsSchema struct {
	// Air The amount of air hits blocked.
	Air int `json:"air"`

	// Earth The amount of earth hits blocked.
	Earth int `json:"earth"`

	// Fire The amount of fire hits blocked.
	Fire int `json:"fire"`

	// Total The amount of total hits blocked.
	Total int `json:"total"`

	// Water The amount of water hits blocked.
	Water int `json:"water"`
}

// ChangePassword defines model for ChangePassword.
type ChangePassword struct {
	// Password Your password.
	Password string `json:"password"`
}

// CharacterFightDataSchema defines model for CharacterFightDataSchema.
type CharacterFightDataSchema struct {
	// Character Player details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`

	// Fight Fight details.
	Fight FightSchema `json:"fight"`
}

// CharacterFightResponseSchema defines model for CharacterFightResponseSchema.
type CharacterFightResponseSchema struct {
	Data CharacterFightDataSchema `json:"data"`
}

// CharacterMovementDataSchema defines model for CharacterMovementDataSchema.
type CharacterMovementDataSchema struct {
	// Character Character details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details
	Cooldown CooldownSchema `json:"cooldown"`

	// Destination Destination details.
	Destination DestinationResponseSchema `json:"destination"`
}

// CharacterMovementResponseSchema defines model for CharacterMovementResponseSchema.
type CharacterMovementResponseSchema struct {
	Data CharacterMovementDataSchema `json:"data"`
}

// CharacterResponseSchema defines model for CharacterResponseSchema.
type CharacterResponseSchema struct {
	Data CharacterSchema `json:"data"`
}

// CharacterSchema defines model for CharacterSchema.
type CharacterSchema struct {
	// AmuletSlot Amulet slot.
	AmuletSlot string `json:"amulet_slot"`

	// Artifact1Slot Artifact 1 slot.
	Artifact1Slot string `json:"artifact1_slot"`

	// Artifact2Slot Artifact 2 slot.
	Artifact2Slot string `json:"artifact2_slot"`

	// Artifact3Slot Artifact 3 slot.
	Artifact3Slot string `json:"artifact3_slot"`

	// AttackAir Air attack.
	AttackAir int `json:"attack_air"`

	// AttackEarth Earth attack.
	AttackEarth int `json:"attack_earth"`

	// AttackFire Fire attack.
	AttackFire int `json:"attack_fire"`

	// AttackWater Water attack.
	AttackWater int `json:"attack_water"`

	// BodyArmorSlot Body armor slot.
	BodyArmorSlot string `json:"body_armor_slot"`

	// BootsSlot Boots slot.
	BootsSlot string `json:"boots_slot"`

	// Consumable1Slot Consumable 1 slot.
	Consumable1Slot string `json:"consumable1_slot"`

	// Consumable1SlotQuantity Consumable 1 quantity.
	Consumable1SlotQuantity int `json:"consumable1_slot_quantity"`

	// Consumable2Slot Consumable 2 slot.
	Consumable2Slot string `json:"consumable2_slot"`

	// Consumable2SlotQuantity Consumable 2 quantity.
	Consumable2SlotQuantity int `json:"consumable2_slot_quantity"`

	// CookingLevel The current xp level of the Cooking skill.
	CookingLevel int `json:"cooking_level"`

	// CookingMaxXp Cooking XP required to level up the skill.
	CookingMaxXp int `json:"cooking_max_xp"`

	// CookingXp Cooking XP.
	CookingXp int `json:"cooking_xp"`

	// Cooldown Cooldown in seconds.
	Cooldown int `json:"cooldown"`

	// CooldownExpiration Datetime Cooldown expiration.
	CooldownExpiration *CharacterSchema_CooldownExpiration `json:"cooldown_expiration,omitempty"`

	// CriticalStrike *Not available, on the roadmap. Character Critical   Strike. Critical strikes increase the attack's damage.
	CriticalStrike int `json:"critical_strike"`

	// DmgAir % Air damage.
	DmgAir int `json:"dmg_air"`

	// DmgEarth % Earth damage.
	DmgEarth int `json:"dmg_earth"`

	// DmgFire % Fire damage.
	DmgFire int `json:"dmg_fire"`

	// DmgWater % Water damage.
	DmgWater int `json:"dmg_water"`

	// FishingLevel Fishing level.
	FishingLevel int `json:"fishing_level"`

	// FishingMaxXp Fishing XP required to level up the skill.
	FishingMaxXp int `json:"fishing_max_xp"`

	// FishingXp The current xp level of the Fishing skill.
	FishingXp int `json:"fishing_xp"`

	// GearcraftingLevel Gearcrafting level.
	GearcraftingLevel int `json:"gearcrafting_level"`

	// GearcraftingMaxXp Gearcrafting XP required to level up the skill.
	GearcraftingMaxXp int `json:"gearcrafting_max_xp"`

	// GearcraftingXp The current xp level of the Gearcrafting skill.
	GearcraftingXp int `json:"gearcrafting_xp"`

	// Gold The numbers of golds on this character.
	Gold int `json:"gold"`

	// Haste *Character Haste. Increase speed attack (reduce fight cooldown)
	Haste int `json:"haste"`

	// HelmetSlot Helmet slot.
	HelmetSlot string `json:"helmet_slot"`

	// Hp Character HP.
	Hp int `json:"hp"`

	// Inventory List of inventory slots.
	Inventory *[]InventorySlot `json:"inventory,omitempty"`

	// InventoryMaxItems Inventory max items.
	InventoryMaxItems int `json:"inventory_max_items"`

	// InventorySlot1 Deprecated** Inventory slot 1.
	InventorySlot1 string `json:"inventory_slot1"`

	// InventorySlot10 Deprecated** Inventory slot 10.
	InventorySlot10 string `json:"inventory_slot10"`

	// InventorySlot10Quantity Deprecated** Inventory 10 quantity.
	InventorySlot10Quantity int `json:"inventory_slot10_quantity"`

	// InventorySlot11 Deprecated** Inventory slot 11.
	InventorySlot11 string `json:"inventory_slot11"`

	// InventorySlot11Quantity Deprecated** Inventory 11 quantity.
	InventorySlot11Quantity int `json:"inventory_slot11_quantity"`

	// InventorySlot12 Deprecated** nventory slot 12.
	InventorySlot12 string `json:"inventory_slot12"`

	// InventorySlot12Quantity Deprecated** Inventory 12 quantity.
	InventorySlot12Quantity int `json:"inventory_slot12_quantity"`

	// InventorySlot13 Deprecated** Inventory slot 13.
	InventorySlot13 string `json:"inventory_slot13"`

	// InventorySlot13Quantity Deprecated** Inventory 13 quantity.
	InventorySlot13Quantity int `json:"inventory_slot13_quantity"`

	// InventorySlot14 Deprecated** Inventory slot 14.
	InventorySlot14 string `json:"inventory_slot14"`

	// InventorySlot14Quantity Deprecated** Inventory 14 quantity.
	InventorySlot14Quantity int `json:"inventory_slot14_quantity"`

	// InventorySlot15 Deprecated** Inventory slot 15.
	InventorySlot15 string `json:"inventory_slot15"`

	// InventorySlot15Quantity Deprecated** Inventory 15 quantity.
	InventorySlot15Quantity int `json:"inventory_slot15_quantity"`

	// InventorySlot16 Deprecated** Inventory slot 16.
	InventorySlot16 string `json:"inventory_slot16"`

	// InventorySlot16Quantity Deprecated** Inventory 16 quantity.
	InventorySlot16Quantity int `json:"inventory_slot16_quantity"`

	// InventorySlot17 Deprecated** Inventory slot 17.
	InventorySlot17 string `json:"inventory_slot17"`

	// InventorySlot17Quantity Deprecated** Inventory 17 quantity.
	InventorySlot17Quantity int `json:"inventory_slot17_quantity"`

	// InventorySlot18 Deprecated** Inventory slot 18.
	InventorySlot18 string `json:"inventory_slot18"`

	// InventorySlot18Quantity Deprecated** Inventory 18 quantity.
	InventorySlot18Quantity int `json:"inventory_slot18_quantity"`

	// InventorySlot19 Deprecated** Inventory slot 19.
	InventorySlot19 string `json:"inventory_slot19"`

	// InventorySlot19Quantity Deprecated** Inventory 19 quantity.
	InventorySlot19Quantity int `json:"inventory_slot19_quantity"`

	// InventorySlot1Quantity Deprecated** Inventory 1 quantity.
	InventorySlot1Quantity int `json:"inventory_slot1_quantity"`

	// InventorySlot2 Deprecated** Inventory slot 2.
	InventorySlot2 string `json:"inventory_slot2"`

	// InventorySlot20 Deprecated** Inventory slot 20.
	InventorySlot20 string `json:"inventory_slot20"`

	// InventorySlot20Quantity Deprecated** Inventory 20 quantity.
	InventorySlot20Quantity int `json:"inventory_slot20_quantity"`

	// InventorySlot2Quantity Deprecated** Inventory 2 quantity.
	InventorySlot2Quantity int `json:"inventory_slot2_quantity"`

	// InventorySlot3 Deprecated** Inventory slot 3.
	InventorySlot3 string `json:"inventory_slot3"`

	// InventorySlot3Quantity Deprecated** Inventory 3 quantity.
	InventorySlot3Quantity int `json:"inventory_slot3_quantity"`

	// InventorySlot4 Deprecated** Inventory slot 4.
	InventorySlot4 string `json:"inventory_slot4"`

	// InventorySlot4Quantity Deprecated** Inventory 4 quantity.
	InventorySlot4Quantity int `json:"inventory_slot4_quantity"`

	// InventorySlot5 Deprecated** Inventory slot 5.
	InventorySlot5 string `json:"inventory_slot5"`

	// InventorySlot5Quantity Deprecated** Inventory 5 quantity.
	InventorySlot5Quantity int `json:"inventory_slot5_quantity"`

	// InventorySlot6 Deprecated** Inventory slot 6.
	InventorySlot6 string `json:"inventory_slot6"`

	// InventorySlot6Quantity Deprecated** Inventory 6 quantity.
	InventorySlot6Quantity int `json:"inventory_slot6_quantity"`

	// InventorySlot7 Deprecated** Inventory slot 7.
	InventorySlot7 string `json:"inventory_slot7"`

	// InventorySlot7Quantity Deprecated** Inventory 7 quantity.
	InventorySlot7Quantity int `json:"inventory_slot7_quantity"`

	// InventorySlot8 Deprecated** Inventory slot 8.
	InventorySlot8 string `json:"inventory_slot8"`

	// InventorySlot8Quantity Deprecated** Inventory 8 quantity.
	InventorySlot8Quantity int `json:"inventory_slot8_quantity"`

	// InventorySlot9 Deprecated** Inventory slot 9.
	InventorySlot9 string `json:"inventory_slot9"`

	// InventorySlot9Quantity Deprecated** Inventory 9 quantity.
	InventorySlot9Quantity int `json:"inventory_slot9_quantity"`

	// JewelrycraftingLevel Jewelrycrafting level.
	JewelrycraftingLevel int `json:"jewelrycrafting_level"`

	// JewelrycraftingMaxXp Jewelrycrafting XP required to level up the skill.
	JewelrycraftingMaxXp int `json:"jewelrycrafting_max_xp"`

	// JewelrycraftingXp The current xp level of the Jewelrycrafting skill.
	JewelrycraftingXp int `json:"jewelrycrafting_xp"`

	// LegArmorSlot Leg armor slot.
	LegArmorSlot string `json:"leg_armor_slot"`

	// Level Combat level.
	Level int `json:"level"`

	// MaxXp XP required to level up the character.
	MaxXp int `json:"max_xp"`

	// MiningLevel Mining level.
	MiningLevel int `json:"mining_level"`

	// MiningMaxXp Mining XP required to level up the skill.
	MiningMaxXp int `json:"mining_max_xp"`

	// MiningXp The current xp level of the Mining skill.
	MiningXp int `json:"mining_xp"`

	// Name Name of the character.
	Name string `json:"name"`

	// ResAir % Air resistance.
	ResAir int `json:"res_air"`

	// ResEarth % Earth resistance.
	ResEarth int `json:"res_earth"`

	// ResFire % Fire resistance.
	ResFire int `json:"res_fire"`

	// ResWater % Water resistance.
	ResWater int `json:"res_water"`

	// Ring1Slot Ring 1 slot.
	Ring1Slot string `json:"ring1_slot"`

	// Ring2Slot Ring 2 slot.
	Ring2Slot string `json:"ring2_slot"`

	// ShieldSlot Shield slot.
	ShieldSlot string `json:"shield_slot"`

	// Skin Character skin code.
	Skin CharacterSchemaSkin `json:"skin"`

	// Speed *Not available, on the roadmap. Character movement speed.
	Speed int `json:"speed"`

	// Stamina *Not available, on the roadmap. Regenerates life at the start of each turn.
	Stamina int `json:"stamina"`

	// Task Task in progress.
	Task string `json:"task"`

	// TaskProgress Task progression.
	TaskProgress int `json:"task_progress"`

	// TaskTotal Task total objective.
	TaskTotal int `json:"task_total"`

	// TaskType Task type.
	TaskType string `json:"task_type"`

	// TotalXp Total XP of your character.
	TotalXp int `json:"total_xp"`

	// WeaponSlot Weapon slot.
	WeaponSlot string `json:"weapon_slot"`

	// WeaponcraftingLevel Weaponcrafting level.
	WeaponcraftingLevel int `json:"weaponcrafting_level"`

	// WeaponcraftingMaxXp Weaponcrafting XP required to level up the skill.
	WeaponcraftingMaxXp int `json:"weaponcrafting_max_xp"`

	// WeaponcraftingXp The current xp level of the Weaponcrafting skill.
	WeaponcraftingXp int `json:"weaponcrafting_xp"`

	// WoodcuttingLevel Woodcutting level.
	WoodcuttingLevel int `json:"woodcutting_level"`

	// WoodcuttingMaxXp Woodcutting XP required to level up the skill.
	WoodcuttingMaxXp int `json:"woodcutting_max_xp"`

	// WoodcuttingXp The current xp level of the Woodcutting skill.
	WoodcuttingXp int `json:"woodcutting_xp"`

	// X Character x coordinate.
	X int `json:"x"`

	// Xp The current xp level of the combat level.
	Xp int `json:"xp"`

	// Y Character y coordinate.
	Y int `json:"y"`
}

// CharacterSchemaCooldownExpiration0 defines model for .
type CharacterSchemaCooldownExpiration0 = time.Time

// CharacterSchemaCooldownExpiration1 defines model for .
type CharacterSchemaCooldownExpiration1 = interface{}

// CharacterSchema_CooldownExpiration Datetime Cooldown expiration.
type CharacterSchema_CooldownExpiration struct {
	union json.RawMessage
}

// CharacterSchemaSkin Character skin code.
type CharacterSchemaSkin string

// CooldownSchema defines model for CooldownSchema.
type CooldownSchema struct {
	// Expiration The expiration of the cooldown.
	Expiration time.Time `json:"expiration"`

	// Reason The reason of the cooldown.
	Reason CooldownSchemaReason `json:"reason"`

	// RemainingSeconds Deprecated** The remaining seconds of the cooldown.
	RemainingSeconds int `json:"remainingSeconds"`

	// TotalSeconds Deprecated** The total seconds of the cooldown.
	TotalSeconds int `json:"totalSeconds"`
}

// CooldownSchemaReason The reason of the cooldown.
type CooldownSchemaReason string

// CraftSchema defines model for CraftSchema.
type CraftSchema struct {
	// Items List of items required to craft the item.
	Items *[]SimpleItemSchema `json:"items,omitempty"`

	// Level The skill level required to craft the item.
	Level *CraftSchema_Level `json:"level,omitempty"`

	// Quantity Quantity of items crafted.
	Quantity *CraftSchema_Quantity `json:"quantity,omitempty"`

	// Skill Skill required to craft the item.
	Skill *CraftSchema_Skill `json:"skill,omitempty"`
}

// CraftSchemaLevel0 defines model for .
type CraftSchemaLevel0 = int

// CraftSchemaLevel1 defines model for .
type CraftSchemaLevel1 = interface{}

// CraftSchema_Level The skill level required to craft the item.
type CraftSchema_Level struct {
	union json.RawMessage
}

// CraftSchemaQuantity0 defines model for .
type CraftSchemaQuantity0 = int

// CraftSchemaQuantity1 defines model for .
type CraftSchemaQuantity1 = interface{}

// CraftSchema_Quantity Quantity of items crafted.
type CraftSchema_Quantity struct {
	union json.RawMessage
}

// CraftSchemaSkill0 defines model for CraftSchema.Skill.0.
type CraftSchemaSkill0 string

// CraftSchemaSkill1 defines model for .
type CraftSchemaSkill1 = interface{}

// CraftSchema_Skill Skill required to craft the item.
type CraftSchema_Skill struct {
	union json.RawMessage
}

// CraftingSchema defines model for CraftingSchema.
type CraftingSchema struct {
	// Code Craft code.
	Code string `json:"code"`

	// Quantity Quantity of items to craft.
	Quantity *int `json:"quantity,omitempty"`
}

// DataPageCharacterSchema defines model for DataPage_CharacterSchema_.
type DataPageCharacterSchema struct {
	Data  []CharacterSchema              `json:"data"`
	Page  DataPageCharacterSchema_Page   `json:"page"`
	Pages *DataPageCharacterSchema_Pages `json:"pages,omitempty"`
	Size  DataPageCharacterSchema_Size   `json:"size"`
	Total DataPageCharacterSchema_Total  `json:"total"`
}

// DataPageCharacterSchemaPage0 defines model for .
type DataPageCharacterSchemaPage0 = int

// DataPageCharacterSchemaPage1 defines model for .
type DataPageCharacterSchemaPage1 = interface{}

// DataPageCharacterSchema_Page defines model for DataPageCharacterSchema.Page.
type DataPageCharacterSchema_Page struct {
	union json.RawMessage
}

// DataPageCharacterSchemaPages0 defines model for .
type DataPageCharacterSchemaPages0 = int

// DataPageCharacterSchemaPages1 defines model for .
type DataPageCharacterSchemaPages1 = interface{}

// DataPageCharacterSchema_Pages defines model for DataPageCharacterSchema.Pages.
type DataPageCharacterSchema_Pages struct {
	union json.RawMessage
}

// DataPageCharacterSchemaSize0 defines model for .
type DataPageCharacterSchemaSize0 = int

// DataPageCharacterSchemaSize1 defines model for .
type DataPageCharacterSchemaSize1 = interface{}

// DataPageCharacterSchema_Size defines model for DataPageCharacterSchema.Size.
type DataPageCharacterSchema_Size struct {
	union json.RawMessage
}

// DataPageCharacterSchemaTotal0 defines model for .
type DataPageCharacterSchemaTotal0 = int

// DataPageCharacterSchemaTotal1 defines model for .
type DataPageCharacterSchemaTotal1 = interface{}

// DataPageCharacterSchema_Total defines model for DataPageCharacterSchema.Total.
type DataPageCharacterSchema_Total struct {
	union json.RawMessage
}

// DataPageEventSchema defines model for DataPage_EventSchema_.
type DataPageEventSchema struct {
	Data  []EventSchema              `json:"data"`
	Page  DataPageEventSchema_Page   `json:"page"`
	Pages *DataPageEventSchema_Pages `json:"pages,omitempty"`
	Size  DataPageEventSchema_Size   `json:"size"`
	Total DataPageEventSchema_Total  `json:"total"`
}

// DataPageEventSchemaPage0 defines model for .
type DataPageEventSchemaPage0 = int

// DataPageEventSchemaPage1 defines model for .
type DataPageEventSchemaPage1 = interface{}

// DataPageEventSchema_Page defines model for DataPageEventSchema.Page.
type DataPageEventSchema_Page struct {
	union json.RawMessage
}

// DataPageEventSchemaPages0 defines model for .
type DataPageEventSchemaPages0 = int

// DataPageEventSchemaPages1 defines model for .
type DataPageEventSchemaPages1 = interface{}

// DataPageEventSchema_Pages defines model for DataPageEventSchema.Pages.
type DataPageEventSchema_Pages struct {
	union json.RawMessage
}

// DataPageEventSchemaSize0 defines model for .
type DataPageEventSchemaSize0 = int

// DataPageEventSchemaSize1 defines model for .
type DataPageEventSchemaSize1 = interface{}

// DataPageEventSchema_Size defines model for DataPageEventSchema.Size.
type DataPageEventSchema_Size struct {
	union json.RawMessage
}

// DataPageEventSchemaTotal0 defines model for .
type DataPageEventSchemaTotal0 = int

// DataPageEventSchemaTotal1 defines model for .
type DataPageEventSchemaTotal1 = interface{}

// DataPageEventSchema_Total defines model for DataPageEventSchema.Total.
type DataPageEventSchema_Total struct {
	union json.RawMessage
}

// DataPageGEItemSchema defines model for DataPage_GEItemSchema_.
type DataPageGEItemSchema struct {
	Data  []GEItemSchema              `json:"data"`
	Page  DataPageGEItemSchema_Page   `json:"page"`
	Pages *DataPageGEItemSchema_Pages `json:"pages,omitempty"`
	Size  DataPageGEItemSchema_Size   `json:"size"`
	Total DataPageGEItemSchema_Total  `json:"total"`
}

// DataPageGEItemSchemaPage0 defines model for .
type DataPageGEItemSchemaPage0 = int

// DataPageGEItemSchemaPage1 defines model for .
type DataPageGEItemSchemaPage1 = interface{}

// DataPageGEItemSchema_Page defines model for DataPageGEItemSchema.Page.
type DataPageGEItemSchema_Page struct {
	union json.RawMessage
}

// DataPageGEItemSchemaPages0 defines model for .
type DataPageGEItemSchemaPages0 = int

// DataPageGEItemSchemaPages1 defines model for .
type DataPageGEItemSchemaPages1 = interface{}

// DataPageGEItemSchema_Pages defines model for DataPageGEItemSchema.Pages.
type DataPageGEItemSchema_Pages struct {
	union json.RawMessage
}

// DataPageGEItemSchemaSize0 defines model for .
type DataPageGEItemSchemaSize0 = int

// DataPageGEItemSchemaSize1 defines model for .
type DataPageGEItemSchemaSize1 = interface{}

// DataPageGEItemSchema_Size defines model for DataPageGEItemSchema.Size.
type DataPageGEItemSchema_Size struct {
	union json.RawMessage
}

// DataPageGEItemSchemaTotal0 defines model for .
type DataPageGEItemSchemaTotal0 = int

// DataPageGEItemSchemaTotal1 defines model for .
type DataPageGEItemSchemaTotal1 = interface{}

// DataPageGEItemSchema_Total defines model for DataPageGEItemSchema.Total.
type DataPageGEItemSchema_Total struct {
	union json.RawMessage
}

// DataPageItemSchema defines model for DataPage_ItemSchema_.
type DataPageItemSchema struct {
	Data  []ItemSchema              `json:"data"`
	Page  DataPageItemSchema_Page   `json:"page"`
	Pages *DataPageItemSchema_Pages `json:"pages,omitempty"`
	Size  DataPageItemSchema_Size   `json:"size"`
	Total DataPageItemSchema_Total  `json:"total"`
}

// DataPageItemSchemaPage0 defines model for .
type DataPageItemSchemaPage0 = int

// DataPageItemSchemaPage1 defines model for .
type DataPageItemSchemaPage1 = interface{}

// DataPageItemSchema_Page defines model for DataPageItemSchema.Page.
type DataPageItemSchema_Page struct {
	union json.RawMessage
}

// DataPageItemSchemaPages0 defines model for .
type DataPageItemSchemaPages0 = int

// DataPageItemSchemaPages1 defines model for .
type DataPageItemSchemaPages1 = interface{}

// DataPageItemSchema_Pages defines model for DataPageItemSchema.Pages.
type DataPageItemSchema_Pages struct {
	union json.RawMessage
}

// DataPageItemSchemaSize0 defines model for .
type DataPageItemSchemaSize0 = int

// DataPageItemSchemaSize1 defines model for .
type DataPageItemSchemaSize1 = interface{}

// DataPageItemSchema_Size defines model for DataPageItemSchema.Size.
type DataPageItemSchema_Size struct {
	union json.RawMessage
}

// DataPageItemSchemaTotal0 defines model for .
type DataPageItemSchemaTotal0 = int

// DataPageItemSchemaTotal1 defines model for .
type DataPageItemSchemaTotal1 = interface{}

// DataPageItemSchema_Total defines model for DataPageItemSchema.Total.
type DataPageItemSchema_Total struct {
	union json.RawMessage
}

// DataPageLogSchema defines model for DataPage_LogSchema_.
type DataPageLogSchema struct {
	Data  []LogSchema              `json:"data"`
	Page  DataPageLogSchema_Page   `json:"page"`
	Pages *DataPageLogSchema_Pages `json:"pages,omitempty"`
	Size  DataPageLogSchema_Size   `json:"size"`
	Total DataPageLogSchema_Total  `json:"total"`
}

// DataPageLogSchemaPage0 defines model for .
type DataPageLogSchemaPage0 = int

// DataPageLogSchemaPage1 defines model for .
type DataPageLogSchemaPage1 = interface{}

// DataPageLogSchema_Page defines model for DataPageLogSchema.Page.
type DataPageLogSchema_Page struct {
	union json.RawMessage
}

// DataPageLogSchemaPages0 defines model for .
type DataPageLogSchemaPages0 = int

// DataPageLogSchemaPages1 defines model for .
type DataPageLogSchemaPages1 = interface{}

// DataPageLogSchema_Pages defines model for DataPageLogSchema.Pages.
type DataPageLogSchema_Pages struct {
	union json.RawMessage
}

// DataPageLogSchemaSize0 defines model for .
type DataPageLogSchemaSize0 = int

// DataPageLogSchemaSize1 defines model for .
type DataPageLogSchemaSize1 = interface{}

// DataPageLogSchema_Size defines model for DataPageLogSchema.Size.
type DataPageLogSchema_Size struct {
	union json.RawMessage
}

// DataPageLogSchemaTotal0 defines model for .
type DataPageLogSchemaTotal0 = int

// DataPageLogSchemaTotal1 defines model for .
type DataPageLogSchemaTotal1 = interface{}

// DataPageLogSchema_Total defines model for DataPageLogSchema.Total.
type DataPageLogSchema_Total struct {
	union json.RawMessage
}

// DataPageMapSchema defines model for DataPage_MapSchema_.
type DataPageMapSchema struct {
	Data  []MapSchema              `json:"data"`
	Page  DataPageMapSchema_Page   `json:"page"`
	Pages *DataPageMapSchema_Pages `json:"pages,omitempty"`
	Size  DataPageMapSchema_Size   `json:"size"`
	Total DataPageMapSchema_Total  `json:"total"`
}

// DataPageMapSchemaPage0 defines model for .
type DataPageMapSchemaPage0 = int

// DataPageMapSchemaPage1 defines model for .
type DataPageMapSchemaPage1 = interface{}

// DataPageMapSchema_Page defines model for DataPageMapSchema.Page.
type DataPageMapSchema_Page struct {
	union json.RawMessage
}

// DataPageMapSchemaPages0 defines model for .
type DataPageMapSchemaPages0 = int

// DataPageMapSchemaPages1 defines model for .
type DataPageMapSchemaPages1 = interface{}

// DataPageMapSchema_Pages defines model for DataPageMapSchema.Pages.
type DataPageMapSchema_Pages struct {
	union json.RawMessage
}

// DataPageMapSchemaSize0 defines model for .
type DataPageMapSchemaSize0 = int

// DataPageMapSchemaSize1 defines model for .
type DataPageMapSchemaSize1 = interface{}

// DataPageMapSchema_Size defines model for DataPageMapSchema.Size.
type DataPageMapSchema_Size struct {
	union json.RawMessage
}

// DataPageMapSchemaTotal0 defines model for .
type DataPageMapSchemaTotal0 = int

// DataPageMapSchemaTotal1 defines model for .
type DataPageMapSchemaTotal1 = interface{}

// DataPageMapSchema_Total defines model for DataPageMapSchema.Total.
type DataPageMapSchema_Total struct {
	union json.RawMessage
}

// DataPageMonsterSchema defines model for DataPage_MonsterSchema_.
type DataPageMonsterSchema struct {
	Data  []MonsterSchema              `json:"data"`
	Page  DataPageMonsterSchema_Page   `json:"page"`
	Pages *DataPageMonsterSchema_Pages `json:"pages,omitempty"`
	Size  DataPageMonsterSchema_Size   `json:"size"`
	Total DataPageMonsterSchema_Total  `json:"total"`
}

// DataPageMonsterSchemaPage0 defines model for .
type DataPageMonsterSchemaPage0 = int

// DataPageMonsterSchemaPage1 defines model for .
type DataPageMonsterSchemaPage1 = interface{}

// DataPageMonsterSchema_Page defines model for DataPageMonsterSchema.Page.
type DataPageMonsterSchema_Page struct {
	union json.RawMessage
}

// DataPageMonsterSchemaPages0 defines model for .
type DataPageMonsterSchemaPages0 = int

// DataPageMonsterSchemaPages1 defines model for .
type DataPageMonsterSchemaPages1 = interface{}

// DataPageMonsterSchema_Pages defines model for DataPageMonsterSchema.Pages.
type DataPageMonsterSchema_Pages struct {
	union json.RawMessage
}

// DataPageMonsterSchemaSize0 defines model for .
type DataPageMonsterSchemaSize0 = int

// DataPageMonsterSchemaSize1 defines model for .
type DataPageMonsterSchemaSize1 = interface{}

// DataPageMonsterSchema_Size defines model for DataPageMonsterSchema.Size.
type DataPageMonsterSchema_Size struct {
	union json.RawMessage
}

// DataPageMonsterSchemaTotal0 defines model for .
type DataPageMonsterSchemaTotal0 = int

// DataPageMonsterSchemaTotal1 defines model for .
type DataPageMonsterSchemaTotal1 = interface{}

// DataPageMonsterSchema_Total defines model for DataPageMonsterSchema.Total.
type DataPageMonsterSchema_Total struct {
	union json.RawMessage
}

// DataPageResourceSchema defines model for DataPage_ResourceSchema_.
type DataPageResourceSchema struct {
	Data  []ResourceSchema              `json:"data"`
	Page  DataPageResourceSchema_Page   `json:"page"`
	Pages *DataPageResourceSchema_Pages `json:"pages,omitempty"`
	Size  DataPageResourceSchema_Size   `json:"size"`
	Total DataPageResourceSchema_Total  `json:"total"`
}

// DataPageResourceSchemaPage0 defines model for .
type DataPageResourceSchemaPage0 = int

// DataPageResourceSchemaPage1 defines model for .
type DataPageResourceSchemaPage1 = interface{}

// DataPageResourceSchema_Page defines model for DataPageResourceSchema.Page.
type DataPageResourceSchema_Page struct {
	union json.RawMessage
}

// DataPageResourceSchemaPages0 defines model for .
type DataPageResourceSchemaPages0 = int

// DataPageResourceSchemaPages1 defines model for .
type DataPageResourceSchemaPages1 = interface{}

// DataPageResourceSchema_Pages defines model for DataPageResourceSchema.Pages.
type DataPageResourceSchema_Pages struct {
	union json.RawMessage
}

// DataPageResourceSchemaSize0 defines model for .
type DataPageResourceSchemaSize0 = int

// DataPageResourceSchemaSize1 defines model for .
type DataPageResourceSchemaSize1 = interface{}

// DataPageResourceSchema_Size defines model for DataPageResourceSchema.Size.
type DataPageResourceSchema_Size struct {
	union json.RawMessage
}

// DataPageResourceSchemaTotal0 defines model for .
type DataPageResourceSchemaTotal0 = int

// DataPageResourceSchemaTotal1 defines model for .
type DataPageResourceSchemaTotal1 = interface{}

// DataPageResourceSchema_Total defines model for DataPageResourceSchema.Total.
type DataPageResourceSchema_Total struct {
	union json.RawMessage
}

// DataPageSimpleItemSchema defines model for DataPage_SimpleItemSchema_.
type DataPageSimpleItemSchema struct {
	Data  []SimpleItemSchema              `json:"data"`
	Page  DataPageSimpleItemSchema_Page   `json:"page"`
	Pages *DataPageSimpleItemSchema_Pages `json:"pages,omitempty"`
	Size  DataPageSimpleItemSchema_Size   `json:"size"`
	Total DataPageSimpleItemSchema_Total  `json:"total"`
}

// DataPageSimpleItemSchemaPage0 defines model for .
type DataPageSimpleItemSchemaPage0 = int

// DataPageSimpleItemSchemaPage1 defines model for .
type DataPageSimpleItemSchemaPage1 = interface{}

// DataPageSimpleItemSchema_Page defines model for DataPageSimpleItemSchema.Page.
type DataPageSimpleItemSchema_Page struct {
	union json.RawMessage
}

// DataPageSimpleItemSchemaPages0 defines model for .
type DataPageSimpleItemSchemaPages0 = int

// DataPageSimpleItemSchemaPages1 defines model for .
type DataPageSimpleItemSchemaPages1 = interface{}

// DataPageSimpleItemSchema_Pages defines model for DataPageSimpleItemSchema.Pages.
type DataPageSimpleItemSchema_Pages struct {
	union json.RawMessage
}

// DataPageSimpleItemSchemaSize0 defines model for .
type DataPageSimpleItemSchemaSize0 = int

// DataPageSimpleItemSchemaSize1 defines model for .
type DataPageSimpleItemSchemaSize1 = interface{}

// DataPageSimpleItemSchema_Size defines model for DataPageSimpleItemSchema.Size.
type DataPageSimpleItemSchema_Size struct {
	union json.RawMessage
}

// DataPageSimpleItemSchemaTotal0 defines model for .
type DataPageSimpleItemSchemaTotal0 = int

// DataPageSimpleItemSchemaTotal1 defines model for .
type DataPageSimpleItemSchemaTotal1 = interface{}

// DataPageSimpleItemSchema_Total defines model for DataPageSimpleItemSchema.Total.
type DataPageSimpleItemSchema_Total struct {
	union json.RawMessage
}

// DeleteItemResponseSchema defines model for DeleteItemResponseSchema.
type DeleteItemResponseSchema struct {
	Data DeleteItemSchema `json:"data"`
}

// DeleteItemSchema defines model for DeleteItemSchema.
type DeleteItemSchema struct {
	// Character Player details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`

	// Item Item details.
	Item SimpleItemSchema `json:"item"`
}

// DepositWithdrawGoldSchema defines model for DepositWithdrawGoldSchema.
type DepositWithdrawGoldSchema struct {
	// Quantity Quantity of gold.
	Quantity int `json:"quantity"`
}

// DestinationResponseSchema defines model for DestinationResponseSchema.
type DestinationResponseSchema struct {
	// Content Content of the destination.
	Content interface{} `json:"content"`

	// Name The name of the destination.
	Name string `json:"name"`

	// X The x coordinate of the destination.
	X int `json:"x"`

	// Y The y coordinate of the destination.
	Y int `json:"y"`
}

// DestinationSchema defines model for DestinationSchema.
type DestinationSchema struct {
	// X The x coordinate of the destination.
	X int `json:"x"`

	// Y The y coordinate of the destination.
	Y int `json:"y"`
}

// DropRateSchema defines model for DropRateSchema.
type DropRateSchema struct {
	// Code Item code.
	Code string `json:"code"`

	// MaxQuantity Maximum quantity.
	MaxQuantity int `json:"max_quantity"`

	// MinQuantity Minimum quantity.
	MinQuantity int `json:"min_quantity"`

	// Rate Chance rate.
	Rate int `json:"rate"`
}

// DropSchema defines model for DropSchema.
type DropSchema struct {
	// Code The code of the item.
	Code string `json:"code"`

	// Quantity The quantity of the item.
	Quantity int `json:"quantity"`
}

// EquipRequestSchema defines model for EquipRequestSchema.
type EquipRequestSchema struct {
	// Character Player details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`

	// Item Item details.
	Item ItemSchema `json:"item"`

	// Slot Item slot.
	Slot EquipRequestSchemaSlot `json:"slot"`
}

// EquipRequestSchemaSlot Item slot.
type EquipRequestSchemaSlot string

// EquipSchema defines model for EquipSchema.
type EquipSchema struct {
	// Code Item code.
	Code string `json:"code"`

	// Slot Item slot.
	Slot EquipSchemaSlot `json:"slot"`
}

// EquipSchemaSlot Item slot.
type EquipSchemaSlot string

// EquipmentResponseSchema defines model for EquipmentResponseSchema.
type EquipmentResponseSchema struct {
	Data EquipRequestSchema `json:"data"`
}

// EventSchema defines model for EventSchema.
type EventSchema struct {
	// CreatedAt Start datetime.
	CreatedAt time.Time `json:"created_at"`

	// Duration Duration in minutes.
	Duration int `json:"duration"`

	// Expiration Expiration datetime.
	Expiration time.Time `json:"expiration"`

	// Map Map of the event.
	Map MapSchema `json:"map"`

	// Name Name of the event.
	Name string `json:"name"`

	// PreviousSkin Previous map skin.
	PreviousSkin string `json:"previous_skin"`
}

// FightSchema defines model for FightSchema.
type FightSchema struct {
	// Drops The items dropped by the fight.
	Drops []DropSchema `json:"drops"`

	// Gold The amount of gold gained by the fight.
	Gold int `json:"gold"`

	// Logs The fight logs.
	Logs []string `json:"logs"`

	// MonsterBlockedHits The amount of blocked hits by the monster.
	MonsterBlockedHits BlockedHitsSchema `json:"monster_blocked_hits"`

	// PlayerBlockedHits The amount of blocked hits by the player.
	PlayerBlockedHits BlockedHitsSchema `json:"player_blocked_hits"`

	// Result The result of the fight.
	Result FightSchemaResult `json:"result"`

	// Turns Numbers of the turns of the combat.
	Turns int `json:"turns"`

	// Xp The amount of xp gained by the fight.
	Xp int `json:"xp"`
}

// FightSchemaResult The result of the fight.
type FightSchemaResult string

// GEItemResponseSchema defines model for GEItemResponseSchema.
type GEItemResponseSchema struct {
	Data GEItemSchema `json:"data"`
}

// GEItemSchema defines model for GEItemSchema.
type GEItemSchema struct {
	// BuyPrice The item's buying price.
	BuyPrice *int `json:"buy_price,omitempty"`

	// Code Item code.
	Code string `json:"code"`

	// SellPrice The item's selling price.
	SellPrice *int `json:"sell_price,omitempty"`

	// Stock Item stock.
	Stock int `json:"stock"`
}

// GETransactionItemSchema defines model for GETransactionItemSchema.
type GETransactionItemSchema struct {
	// Code Item code.
	Code string `json:"code"`

	// Price Item price. Item price validation protects you if the price has changed since you last checked the buy/sale price of an item.
	Price int `json:"price"`

	// Quantity Item quantity.
	Quantity int `json:"quantity"`
}

// GETransactionListSchema defines model for GETransactionListSchema.
type GETransactionListSchema struct {
	// Character Character details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`

	// Transaction Transaction details.
	Transaction GETransactionSchema `json:"transaction"`
}

// GETransactionResponseSchema defines model for GETransactionResponseSchema.
type GETransactionResponseSchema struct {
	Data GETransactionListSchema `json:"data"`
}

// GETransactionSchema defines model for GETransactionSchema.
type GETransactionSchema struct {
	// Code Item code.
	Code string `json:"code"`

	// Price Item price.
	Price int `json:"price"`

	// Quantity Item quantity.
	Quantity int `json:"quantity"`

	// TotalPrice Total price of the transaction.
	TotalPrice int `json:"total_price"`
}

// GoldBankResponseSchema defines model for GoldBankResponseSchema.
type GoldBankResponseSchema struct {
	Data GoldSchema `json:"data"`
}

// GoldResponseSchema defines model for GoldResponseSchema.
type GoldResponseSchema struct {
	Data GoldTransactionSchema `json:"data"`
}

// GoldSchema defines model for GoldSchema.
type GoldSchema struct {
	// Quantity Quantity of gold.
	Quantity int `json:"quantity"`
}

// GoldTransactionSchema defines model for GoldTransactionSchema.
type GoldTransactionSchema struct {
	// Bank Bank details.
	Bank GoldSchema `json:"bank"`

	// Character Player details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`
}

// InventorySlot defines model for InventorySlot.
type InventorySlot struct {
	// Code Item code.
	Code string `json:"code"`

	// Quantity Quantity in the slot.
	Quantity int `json:"quantity"`

	// Slot Inventory slot identifier.
	Slot int `json:"slot"`
}

// ItemEffectSchema defines model for ItemEffectSchema.
type ItemEffectSchema struct {
	// Name Effect name.
	Name string `json:"name"`

	// Value Effect value.
	Value int `json:"value"`
}

// ItemResponseSchema defines model for ItemResponseSchema.
type ItemResponseSchema struct {
	Data SingleItemSchema `json:"data"`
}

// ItemSchema defines model for ItemSchema.
type ItemSchema struct {
	// Code Item code. This is the item's unique identifier (ID).
	Code string `json:"code"`

	// Craft Craft information. If applicable.
	Craft *ItemSchema_Craft `json:"craft,omitempty"`

	// Description Item description.
	Description string `json:"description"`

	// Effects List of object effects. For equipment, it will include item stats.
	Effects *[]ItemEffectSchema `json:"effects,omitempty"`

	// Level Item level.
	Level int `json:"level"`

	// Name Item name.
	Name string `json:"name"`

	// Subtype Item subtype.
	Subtype string `json:"subtype"`

	// Type Item type.
	Type string `json:"type"`
}

// ItemSchemaCraft1 defines model for .
type ItemSchemaCraft1 = interface{}

// ItemSchema_Craft Craft information. If applicable.
type ItemSchema_Craft struct {
	union json.RawMessage
}

// LogSchema defines model for LogSchema.
type LogSchema struct {
	// Account Account character.
	Account string `json:"account"`

	// Character Character name.
	Character string `json:"character"`

	// Content Content of action.
	Content interface{} `json:"content"`

	// Cooldown Cooldown in seconds.
	Cooldown int `json:"cooldown"`

	// CooldownExpiration Datetime of cooldown expiration.
	CooldownExpiration time.Time `json:"cooldown_expiration"`

	// CreatedAt Datetime of creation.
	CreatedAt time.Time `json:"created_at"`

	// Description Description of action.
	Description string `json:"description"`

	// Type Type of action.
	Type string `json:"type"`
}

// MapContentSchema defines model for MapContentSchema.
type MapContentSchema struct {
	// Code Code of the content.
	Code string `json:"code"`

	// Type Type of the content.
	Type string `json:"type"`
}

// MapResponseSchema defines model for MapResponseSchema.
type MapResponseSchema struct {
	Data MapSchema `json:"data"`
}

// MapSchema defines model for MapSchema.
type MapSchema struct {
	// Content Content of the map.
	Content MapSchema_Content `json:"content"`

	// Name Name of the map.
	Name string `json:"name"`

	// Skin Skin of the map.
	Skin string `json:"skin"`

	// X Position X of the map.
	X int `json:"x"`

	// Y Position Y of the map.
	Y int `json:"y"`
}

// MapSchemaContent1 defines model for .
type MapSchemaContent1 = interface{}

// MapSchema_Content Content of the map.
type MapSchema_Content struct {
	union json.RawMessage
}

// MonsterResponseSchema defines model for MonsterResponseSchema.
type MonsterResponseSchema struct {
	Data MonsterSchema `json:"data"`
}

// MonsterSchema defines model for MonsterSchema.
type MonsterSchema struct {
	// AttackAir Monster air attack.
	AttackAir int `json:"attack_air"`

	// AttackEarth Monster earth attack.
	AttackEarth int `json:"attack_earth"`

	// AttackFire Monster fire attack.
	AttackFire int `json:"attack_fire"`

	// AttackWater Monster water attack.
	AttackWater int `json:"attack_water"`

	// Code The code of the monster. This is the monster's unique identifier (ID).
	Code string `json:"code"`

	// Drops Monster drops. This is a list of items that the monster drops after killing the monster.
	Drops []DropRateSchema `json:"drops"`

	// Hp Monster hit points.
	Hp int `json:"hp"`

	// Level Monster level.
	Level int `json:"level"`

	// MaxGold Monster maximum gold drop.
	MaxGold int `json:"max_gold"`

	// MinGold Monster minimum gold drop.
	MinGold int `json:"min_gold"`

	// Name Name of the monster.
	Name string `json:"name"`

	// ResAir Monster % air resistance.
	ResAir int `json:"res_air"`

	// ResEarth Monster % earth resistance.
	ResEarth int `json:"res_earth"`

	// ResFire Monster % fire resistance.
	ResFire int `json:"res_fire"`

	// ResWater Monster % water resistance.
	ResWater int `json:"res_water"`
}

// MyCharactersListSchema defines model for MyCharactersListSchema.
type MyCharactersListSchema struct {
	// Data List of your characters.
	Data []CharacterSchema `json:"data"`
}

// RecyclingDataSchema defines model for RecyclingDataSchema.
type RecyclingDataSchema struct {
	// Character Player details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`

	// Details Craft details.
	Details RecyclingItemsSchema `json:"details"`
}

// RecyclingItemsSchema defines model for RecyclingItemsSchema.
type RecyclingItemsSchema struct {
	// Items Objects received.
	Items []DropSchema `json:"items"`
}

// RecyclingResponseSchema defines model for RecyclingResponseSchema.
type RecyclingResponseSchema struct {
	Data RecyclingDataSchema `json:"data"`
}

// RecyclingSchema defines model for RecyclingSchema.
type RecyclingSchema struct {
	// Code Item code.
	Code string `json:"code"`

	// Quantity Quantity of items to recycle.
	Quantity *int `json:"quantity,omitempty"`
}

// ResourceResponseSchema defines model for ResourceResponseSchema.
type ResourceResponseSchema struct {
	Data ResourceSchema `json:"data"`
}

// ResourceSchema defines model for ResourceSchema.
type ResourceSchema struct {
	// Code The code of the resource. This is the resource's unique identifier (ID).
	Code string `json:"code"`

	// Drops The drops of this resource.
	Drops []DropRateSchema `json:"drops"`

	// Level The skill level required to gather this resource.
	Level int `json:"level"`

	// Name The name of the resource
	Name string `json:"name"`

	// Skill The skill required to gather this resource.
	Skill ResourceSchemaSkill `json:"skill"`
}

// ResourceSchemaSkill The skill required to gather this resource.
type ResourceSchemaSkill string

// ResponseSchema defines model for ResponseSchema.
type ResponseSchema struct {
	Message string `json:"message"`
}

// SimpleItemSchema defines model for SimpleItemSchema.
type SimpleItemSchema struct {
	// Code Item code.
	Code string `json:"code"`

	// Quantity Item quantity.
	Quantity int `json:"quantity"`
}

// SingleItemSchema defines model for SingleItemSchema.
type SingleItemSchema struct {
	// Ge Grand Exchange information. If applicable.
	Ge *SingleItemSchema_Ge `json:"ge,omitempty"`

	// Item Item information.
	Item ItemSchema `json:"item"`
}

// SingleItemSchemaGe1 defines model for .
type SingleItemSchemaGe1 = interface{}

// SingleItemSchema_Ge Grand Exchange information. If applicable.
type SingleItemSchema_Ge struct {
	union json.RawMessage
}

// SkillDataSchema defines model for SkillDataSchema.
type SkillDataSchema struct {
	// Character Player details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`

	// Details Craft details.
	Details SkillInfoSchema `json:"details"`
}

// SkillInfoSchema defines model for SkillInfoSchema.
type SkillInfoSchema struct {
	// Items Objects received.
	Items []DropSchema `json:"items"`

	// Xp The amount of xp gained.
	Xp int `json:"xp"`
}

// SkillResponseSchema defines model for SkillResponseSchema.
type SkillResponseSchema struct {
	Data SkillDataSchema `json:"data"`
}

// StatusResponseSchema defines model for StatusResponseSchema.
type StatusResponseSchema struct {
	Data StatusSchema `json:"data"`
}

// StatusSchema defines model for StatusSchema.
type StatusSchema struct {
	Announcements    *[]AnnouncementSchema `json:"announcements,omitempty"`
	CharactersOnline *int                  `json:"characters_online,omitempty"`

	// LastWipe Last server wipe.
	LastWipe string `json:"last_wipe"`

	// NextWipe Next server wipe.
	NextWipe string `json:"next_wipe"`

	// Status Server status
	Status string `json:"status"`

	// Version Game version.
	Version string `json:"version"`
}

// TaskDataSchema defines model for TaskDataSchema.
type TaskDataSchema struct {
	// Character Player details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`

	// Task Task details.
	Task TaskSchema `json:"task"`
}

// TaskResponseSchema defines model for TaskResponseSchema.
type TaskResponseSchema struct {
	Data TaskDataSchema `json:"data"`
}

// TaskRewardDataSchema defines model for TaskRewardDataSchema.
type TaskRewardDataSchema struct {
	// Character Player details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`

	// Reward Reward details.
	Reward TaskRewardSchema `json:"reward"`
}

// TaskRewardResponseSchema defines model for TaskRewardResponseSchema.
type TaskRewardResponseSchema struct {
	Data TaskRewardDataSchema `json:"data"`
}

// TaskRewardSchema defines model for TaskRewardSchema.
type TaskRewardSchema struct {
	// Code Item code.
	Code string `json:"code"`

	// Quantity Item quantity.
	Quantity int `json:"quantity"`
}

// TaskSchema defines model for TaskSchema.
type TaskSchema struct {
	// Code Task objective.
	Code string `json:"code"`

	// Total The total required to complete the task.
	Total int `json:"total"`

	// Type The type of task.
	Type TaskSchemaType `json:"type"`
}

// TaskSchemaType The type of task.
type TaskSchemaType string

// TokenResponseSchema defines model for TokenResponseSchema.
type TokenResponseSchema struct {
	Token string `json:"token"`
}

// UnequipSchema defines model for UnequipSchema.
type UnequipSchema struct {
	// Slot Item slot.
	Slot UnequipSchemaSlot `json:"slot"`
}

// UnequipSchemaSlot Item slot.
type UnequipSchemaSlot string

// GetAllCharactersParams defines parameters for GetAllCharacters.
type GetAllCharactersParams struct {
	// Sort Default sort by total XP.
	Sort *GetAllCharactersParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetAllCharactersParamsSort defines parameters for GetAllCharacters.
type GetAllCharactersParamsSort string

// GetAllEventsParams defines parameters for GetAllEvents.
type GetAllEventsParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetAllGrandExchangeItemsParams defines parameters for GetAllGrandExchangeItems.
type GetAllGrandExchangeItemsParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetAllItemsParams defines parameters for GetAllItems.
type GetAllItemsParams struct {
	// MinLevel Minimum level items.
	MinLevel *int `form:"min_level,omitempty" json:"min_level,omitempty"`

	// MaxLevel Maximum level items.
	MaxLevel *int `form:"max_level,omitempty" json:"max_level,omitempty"`

	// Name Name of the item.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Type Type of items.
	Type *GetAllItemsParamsType `form:"type,omitempty" json:"type,omitempty"`

	// CraftSkill Skill to craft items.
	CraftSkill *GetAllItemsParamsCraftSkill `form:"craft_skill,omitempty" json:"craft_skill,omitempty"`

	// CraftMaterial Item code of items used as material for crafting.
	CraftMaterial *string `form:"craft_material,omitempty" json:"craft_material,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetAllItemsParamsType defines parameters for GetAllItems.
type GetAllItemsParamsType string

// GetAllItemsParamsCraftSkill defines parameters for GetAllItems.
type GetAllItemsParamsCraftSkill string

// GetAllMapsParams defines parameters for GetAllMaps.
type GetAllMapsParams struct {
	// ContentType Type of content on the map.
	ContentType *GetAllMapsParamsContentType `form:"content_type,omitempty" json:"content_type,omitempty"`

	// ContentCode Content code on the map.
	ContentCode *string `form:"content_code,omitempty" json:"content_code,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetAllMapsParamsContentType defines parameters for GetAllMaps.
type GetAllMapsParamsContentType string

// GetAllMonstersParams defines parameters for GetAllMonsters.
type GetAllMonstersParams struct {
	// MinLevel Monster minimum level.
	MinLevel *int `form:"min_level,omitempty" json:"min_level,omitempty"`

	// MaxLevel Monster maximum level.
	MaxLevel *int `form:"max_level,omitempty" json:"max_level,omitempty"`

	// Drop Item code of the drop.
	Drop *string `form:"drop,omitempty" json:"drop,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetAccountBankItemsParams defines parameters for GetAccountBankItems.
type GetAccountBankItemsParams struct {
	// ItemCode Item to search in your bank.
	ItemCode *string `form:"item_code,omitempty" json:"item_code,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetAccountCharactersLogsParams defines parameters for GetAccountCharactersLogs.
type GetAccountCharactersLogsParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetCharacterLogsParams defines parameters for GetCharacterLogs.
type GetCharacterLogsParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetAllResourcesParams defines parameters for GetAllResources.
type GetAllResourcesParams struct {
	// MinLevel Skill minimum level.
	MinLevel *int `form:"min_level,omitempty" json:"min_level,omitempty"`

	// MaxLevel Skill maximum level.
	MaxLevel *int `form:"max_level,omitempty" json:"max_level,omitempty"`

	// Skill The code of the skill.
	Skill *GetAllResourcesParamsSkill `form:"skill,omitempty" json:"skill,omitempty"`

	// Drop Item code of the drop.
	Drop *string `form:"drop,omitempty" json:"drop,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetAllResourcesParamsSkill defines parameters for GetAllResources.
type GetAllResourcesParamsSkill string

// CreateAccountJSONRequestBody defines body for CreateAccount for application/json ContentType.
type CreateAccountJSONRequestBody = AddAccountSchema

// AccountCreateCharacterJSONRequestBody defines body for AccountCreateCharacter for application/json ContentType.
type AccountCreateCharacterJSONRequestBody = AddCharacterSchema

// AccountChangePasswordJSONRequestBody defines body for AccountChangePassword for application/json ContentType.
type AccountChangePasswordJSONRequestBody = ChangePassword

// CharacterBankDepositItemActionJSONRequestBody defines body for CharacterBankDepositItemAction for application/json ContentType.
type CharacterBankDepositItemActionJSONRequestBody = SimpleItemSchema

// CharacterBankDepositGoldActionJSONRequestBody defines body for CharacterBankDepositGoldAction for application/json ContentType.
type CharacterBankDepositGoldActionJSONRequestBody = DepositWithdrawGoldSchema

// CharacterBankWithdrawItemActionJSONRequestBody defines body for CharacterBankWithdrawItemAction for application/json ContentType.
type CharacterBankWithdrawItemActionJSONRequestBody = SimpleItemSchema

// CharacterBankWithdrawGoldActionJSONRequestBody defines body for CharacterBankWithdrawGoldAction for application/json ContentType.
type CharacterBankWithdrawGoldActionJSONRequestBody = DepositWithdrawGoldSchema

// CharacterCraftingActionJSONRequestBody defines body for CharacterCraftingAction for application/json ContentType.
type CharacterCraftingActionJSONRequestBody = CraftingSchema

// CharacterDeleteItemActionJSONRequestBody defines body for CharacterDeleteItemAction for application/json ContentType.
type CharacterDeleteItemActionJSONRequestBody = SimpleItemSchema

// CharacterEquipActionJSONRequestBody defines body for CharacterEquipAction for application/json ContentType.
type CharacterEquipActionJSONRequestBody = EquipSchema

// CharacterGlobalExchangeBuyActionJSONRequestBody defines body for CharacterGlobalExchangeBuyAction for application/json ContentType.
type CharacterGlobalExchangeBuyActionJSONRequestBody = GETransactionItemSchema

// CharacterGlobalExchangeSellActionJSONRequestBody defines body for CharacterGlobalExchangeSellAction for application/json ContentType.
type CharacterGlobalExchangeSellActionJSONRequestBody = GETransactionItemSchema

// CharacterMoveActionJSONRequestBody defines body for CharacterMoveAction for application/json ContentType.
type CharacterMoveActionJSONRequestBody = DestinationSchema

// CharacterRecyclingActionJSONRequestBody defines body for CharacterRecyclingAction for application/json ContentType.
type CharacterRecyclingActionJSONRequestBody = RecyclingSchema

// CharacterUnequipActionJSONRequestBody defines body for CharacterUnequipAction for application/json ContentType.
type CharacterUnequipActionJSONRequestBody = UnequipSchema

// AsCharacterSchemaCooldownExpiration0 returns the union data inside the CharacterSchema_CooldownExpiration as a CharacterSchemaCooldownExpiration0
func (t CharacterSchema_CooldownExpiration) AsCharacterSchemaCooldownExpiration0() (CharacterSchemaCooldownExpiration0, error) {
	var body CharacterSchemaCooldownExpiration0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCharacterSchemaCooldownExpiration0 overwrites any union data inside the CharacterSchema_CooldownExpiration as the provided CharacterSchemaCooldownExpiration0
func (t *CharacterSchema_CooldownExpiration) FromCharacterSchemaCooldownExpiration0(v CharacterSchemaCooldownExpiration0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCharacterSchemaCooldownExpiration0 performs a merge with any union data inside the CharacterSchema_CooldownExpiration, using the provided CharacterSchemaCooldownExpiration0
func (t *CharacterSchema_CooldownExpiration) MergeCharacterSchemaCooldownExpiration0(v CharacterSchemaCooldownExpiration0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCharacterSchemaCooldownExpiration1 returns the union data inside the CharacterSchema_CooldownExpiration as a CharacterSchemaCooldownExpiration1
func (t CharacterSchema_CooldownExpiration) AsCharacterSchemaCooldownExpiration1() (CharacterSchemaCooldownExpiration1, error) {
	var body CharacterSchemaCooldownExpiration1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCharacterSchemaCooldownExpiration1 overwrites any union data inside the CharacterSchema_CooldownExpiration as the provided CharacterSchemaCooldownExpiration1
func (t *CharacterSchema_CooldownExpiration) FromCharacterSchemaCooldownExpiration1(v CharacterSchemaCooldownExpiration1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCharacterSchemaCooldownExpiration1 performs a merge with any union data inside the CharacterSchema_CooldownExpiration, using the provided CharacterSchemaCooldownExpiration1
func (t *CharacterSchema_CooldownExpiration) MergeCharacterSchemaCooldownExpiration1(v CharacterSchemaCooldownExpiration1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CharacterSchema_CooldownExpiration) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CharacterSchema_CooldownExpiration) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCraftSchemaLevel0 returns the union data inside the CraftSchema_Level as a CraftSchemaLevel0
func (t CraftSchema_Level) AsCraftSchemaLevel0() (CraftSchemaLevel0, error) {
	var body CraftSchemaLevel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCraftSchemaLevel0 overwrites any union data inside the CraftSchema_Level as the provided CraftSchemaLevel0
func (t *CraftSchema_Level) FromCraftSchemaLevel0(v CraftSchemaLevel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCraftSchemaLevel0 performs a merge with any union data inside the CraftSchema_Level, using the provided CraftSchemaLevel0
func (t *CraftSchema_Level) MergeCraftSchemaLevel0(v CraftSchemaLevel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCraftSchemaLevel1 returns the union data inside the CraftSchema_Level as a CraftSchemaLevel1
func (t CraftSchema_Level) AsCraftSchemaLevel1() (CraftSchemaLevel1, error) {
	var body CraftSchemaLevel1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCraftSchemaLevel1 overwrites any union data inside the CraftSchema_Level as the provided CraftSchemaLevel1
func (t *CraftSchema_Level) FromCraftSchemaLevel1(v CraftSchemaLevel1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCraftSchemaLevel1 performs a merge with any union data inside the CraftSchema_Level, using the provided CraftSchemaLevel1
func (t *CraftSchema_Level) MergeCraftSchemaLevel1(v CraftSchemaLevel1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CraftSchema_Level) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CraftSchema_Level) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCraftSchemaQuantity0 returns the union data inside the CraftSchema_Quantity as a CraftSchemaQuantity0
func (t CraftSchema_Quantity) AsCraftSchemaQuantity0() (CraftSchemaQuantity0, error) {
	var body CraftSchemaQuantity0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCraftSchemaQuantity0 overwrites any union data inside the CraftSchema_Quantity as the provided CraftSchemaQuantity0
func (t *CraftSchema_Quantity) FromCraftSchemaQuantity0(v CraftSchemaQuantity0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCraftSchemaQuantity0 performs a merge with any union data inside the CraftSchema_Quantity, using the provided CraftSchemaQuantity0
func (t *CraftSchema_Quantity) MergeCraftSchemaQuantity0(v CraftSchemaQuantity0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCraftSchemaQuantity1 returns the union data inside the CraftSchema_Quantity as a CraftSchemaQuantity1
func (t CraftSchema_Quantity) AsCraftSchemaQuantity1() (CraftSchemaQuantity1, error) {
	var body CraftSchemaQuantity1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCraftSchemaQuantity1 overwrites any union data inside the CraftSchema_Quantity as the provided CraftSchemaQuantity1
func (t *CraftSchema_Quantity) FromCraftSchemaQuantity1(v CraftSchemaQuantity1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCraftSchemaQuantity1 performs a merge with any union data inside the CraftSchema_Quantity, using the provided CraftSchemaQuantity1
func (t *CraftSchema_Quantity) MergeCraftSchemaQuantity1(v CraftSchemaQuantity1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CraftSchema_Quantity) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CraftSchema_Quantity) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCraftSchemaSkill0 returns the union data inside the CraftSchema_Skill as a CraftSchemaSkill0
func (t CraftSchema_Skill) AsCraftSchemaSkill0() (CraftSchemaSkill0, error) {
	var body CraftSchemaSkill0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCraftSchemaSkill0 overwrites any union data inside the CraftSchema_Skill as the provided CraftSchemaSkill0
func (t *CraftSchema_Skill) FromCraftSchemaSkill0(v CraftSchemaSkill0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCraftSchemaSkill0 performs a merge with any union data inside the CraftSchema_Skill, using the provided CraftSchemaSkill0
func (t *CraftSchema_Skill) MergeCraftSchemaSkill0(v CraftSchemaSkill0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCraftSchemaSkill1 returns the union data inside the CraftSchema_Skill as a CraftSchemaSkill1
func (t CraftSchema_Skill) AsCraftSchemaSkill1() (CraftSchemaSkill1, error) {
	var body CraftSchemaSkill1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCraftSchemaSkill1 overwrites any union data inside the CraftSchema_Skill as the provided CraftSchemaSkill1
func (t *CraftSchema_Skill) FromCraftSchemaSkill1(v CraftSchemaSkill1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCraftSchemaSkill1 performs a merge with any union data inside the CraftSchema_Skill, using the provided CraftSchemaSkill1
func (t *CraftSchema_Skill) MergeCraftSchemaSkill1(v CraftSchemaSkill1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CraftSchema_Skill) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CraftSchema_Skill) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageCharacterSchemaPage0 returns the union data inside the DataPageCharacterSchema_Page as a DataPageCharacterSchemaPage0
func (t DataPageCharacterSchema_Page) AsDataPageCharacterSchemaPage0() (DataPageCharacterSchemaPage0, error) {
	var body DataPageCharacterSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageCharacterSchemaPage0 overwrites any union data inside the DataPageCharacterSchema_Page as the provided DataPageCharacterSchemaPage0
func (t *DataPageCharacterSchema_Page) FromDataPageCharacterSchemaPage0(v DataPageCharacterSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageCharacterSchemaPage0 performs a merge with any union data inside the DataPageCharacterSchema_Page, using the provided DataPageCharacterSchemaPage0
func (t *DataPageCharacterSchema_Page) MergeDataPageCharacterSchemaPage0(v DataPageCharacterSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageCharacterSchemaPage1 returns the union data inside the DataPageCharacterSchema_Page as a DataPageCharacterSchemaPage1
func (t DataPageCharacterSchema_Page) AsDataPageCharacterSchemaPage1() (DataPageCharacterSchemaPage1, error) {
	var body DataPageCharacterSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageCharacterSchemaPage1 overwrites any union data inside the DataPageCharacterSchema_Page as the provided DataPageCharacterSchemaPage1
func (t *DataPageCharacterSchema_Page) FromDataPageCharacterSchemaPage1(v DataPageCharacterSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageCharacterSchemaPage1 performs a merge with any union data inside the DataPageCharacterSchema_Page, using the provided DataPageCharacterSchemaPage1
func (t *DataPageCharacterSchema_Page) MergeDataPageCharacterSchemaPage1(v DataPageCharacterSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageCharacterSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageCharacterSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageCharacterSchemaPages0 returns the union data inside the DataPageCharacterSchema_Pages as a DataPageCharacterSchemaPages0
func (t DataPageCharacterSchema_Pages) AsDataPageCharacterSchemaPages0() (DataPageCharacterSchemaPages0, error) {
	var body DataPageCharacterSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageCharacterSchemaPages0 overwrites any union data inside the DataPageCharacterSchema_Pages as the provided DataPageCharacterSchemaPages0
func (t *DataPageCharacterSchema_Pages) FromDataPageCharacterSchemaPages0(v DataPageCharacterSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageCharacterSchemaPages0 performs a merge with any union data inside the DataPageCharacterSchema_Pages, using the provided DataPageCharacterSchemaPages0
func (t *DataPageCharacterSchema_Pages) MergeDataPageCharacterSchemaPages0(v DataPageCharacterSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageCharacterSchemaPages1 returns the union data inside the DataPageCharacterSchema_Pages as a DataPageCharacterSchemaPages1
func (t DataPageCharacterSchema_Pages) AsDataPageCharacterSchemaPages1() (DataPageCharacterSchemaPages1, error) {
	var body DataPageCharacterSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageCharacterSchemaPages1 overwrites any union data inside the DataPageCharacterSchema_Pages as the provided DataPageCharacterSchemaPages1
func (t *DataPageCharacterSchema_Pages) FromDataPageCharacterSchemaPages1(v DataPageCharacterSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageCharacterSchemaPages1 performs a merge with any union data inside the DataPageCharacterSchema_Pages, using the provided DataPageCharacterSchemaPages1
func (t *DataPageCharacterSchema_Pages) MergeDataPageCharacterSchemaPages1(v DataPageCharacterSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageCharacterSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageCharacterSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageCharacterSchemaSize0 returns the union data inside the DataPageCharacterSchema_Size as a DataPageCharacterSchemaSize0
func (t DataPageCharacterSchema_Size) AsDataPageCharacterSchemaSize0() (DataPageCharacterSchemaSize0, error) {
	var body DataPageCharacterSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageCharacterSchemaSize0 overwrites any union data inside the DataPageCharacterSchema_Size as the provided DataPageCharacterSchemaSize0
func (t *DataPageCharacterSchema_Size) FromDataPageCharacterSchemaSize0(v DataPageCharacterSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageCharacterSchemaSize0 performs a merge with any union data inside the DataPageCharacterSchema_Size, using the provided DataPageCharacterSchemaSize0
func (t *DataPageCharacterSchema_Size) MergeDataPageCharacterSchemaSize0(v DataPageCharacterSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageCharacterSchemaSize1 returns the union data inside the DataPageCharacterSchema_Size as a DataPageCharacterSchemaSize1
func (t DataPageCharacterSchema_Size) AsDataPageCharacterSchemaSize1() (DataPageCharacterSchemaSize1, error) {
	var body DataPageCharacterSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageCharacterSchemaSize1 overwrites any union data inside the DataPageCharacterSchema_Size as the provided DataPageCharacterSchemaSize1
func (t *DataPageCharacterSchema_Size) FromDataPageCharacterSchemaSize1(v DataPageCharacterSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageCharacterSchemaSize1 performs a merge with any union data inside the DataPageCharacterSchema_Size, using the provided DataPageCharacterSchemaSize1
func (t *DataPageCharacterSchema_Size) MergeDataPageCharacterSchemaSize1(v DataPageCharacterSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageCharacterSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageCharacterSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageCharacterSchemaTotal0 returns the union data inside the DataPageCharacterSchema_Total as a DataPageCharacterSchemaTotal0
func (t DataPageCharacterSchema_Total) AsDataPageCharacterSchemaTotal0() (DataPageCharacterSchemaTotal0, error) {
	var body DataPageCharacterSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageCharacterSchemaTotal0 overwrites any union data inside the DataPageCharacterSchema_Total as the provided DataPageCharacterSchemaTotal0
func (t *DataPageCharacterSchema_Total) FromDataPageCharacterSchemaTotal0(v DataPageCharacterSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageCharacterSchemaTotal0 performs a merge with any union data inside the DataPageCharacterSchema_Total, using the provided DataPageCharacterSchemaTotal0
func (t *DataPageCharacterSchema_Total) MergeDataPageCharacterSchemaTotal0(v DataPageCharacterSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageCharacterSchemaTotal1 returns the union data inside the DataPageCharacterSchema_Total as a DataPageCharacterSchemaTotal1
func (t DataPageCharacterSchema_Total) AsDataPageCharacterSchemaTotal1() (DataPageCharacterSchemaTotal1, error) {
	var body DataPageCharacterSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageCharacterSchemaTotal1 overwrites any union data inside the DataPageCharacterSchema_Total as the provided DataPageCharacterSchemaTotal1
func (t *DataPageCharacterSchema_Total) FromDataPageCharacterSchemaTotal1(v DataPageCharacterSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageCharacterSchemaTotal1 performs a merge with any union data inside the DataPageCharacterSchema_Total, using the provided DataPageCharacterSchemaTotal1
func (t *DataPageCharacterSchema_Total) MergeDataPageCharacterSchemaTotal1(v DataPageCharacterSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageCharacterSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageCharacterSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageEventSchemaPage0 returns the union data inside the DataPageEventSchema_Page as a DataPageEventSchemaPage0
func (t DataPageEventSchema_Page) AsDataPageEventSchemaPage0() (DataPageEventSchemaPage0, error) {
	var body DataPageEventSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageEventSchemaPage0 overwrites any union data inside the DataPageEventSchema_Page as the provided DataPageEventSchemaPage0
func (t *DataPageEventSchema_Page) FromDataPageEventSchemaPage0(v DataPageEventSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageEventSchemaPage0 performs a merge with any union data inside the DataPageEventSchema_Page, using the provided DataPageEventSchemaPage0
func (t *DataPageEventSchema_Page) MergeDataPageEventSchemaPage0(v DataPageEventSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageEventSchemaPage1 returns the union data inside the DataPageEventSchema_Page as a DataPageEventSchemaPage1
func (t DataPageEventSchema_Page) AsDataPageEventSchemaPage1() (DataPageEventSchemaPage1, error) {
	var body DataPageEventSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageEventSchemaPage1 overwrites any union data inside the DataPageEventSchema_Page as the provided DataPageEventSchemaPage1
func (t *DataPageEventSchema_Page) FromDataPageEventSchemaPage1(v DataPageEventSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageEventSchemaPage1 performs a merge with any union data inside the DataPageEventSchema_Page, using the provided DataPageEventSchemaPage1
func (t *DataPageEventSchema_Page) MergeDataPageEventSchemaPage1(v DataPageEventSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageEventSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageEventSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageEventSchemaPages0 returns the union data inside the DataPageEventSchema_Pages as a DataPageEventSchemaPages0
func (t DataPageEventSchema_Pages) AsDataPageEventSchemaPages0() (DataPageEventSchemaPages0, error) {
	var body DataPageEventSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageEventSchemaPages0 overwrites any union data inside the DataPageEventSchema_Pages as the provided DataPageEventSchemaPages0
func (t *DataPageEventSchema_Pages) FromDataPageEventSchemaPages0(v DataPageEventSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageEventSchemaPages0 performs a merge with any union data inside the DataPageEventSchema_Pages, using the provided DataPageEventSchemaPages0
func (t *DataPageEventSchema_Pages) MergeDataPageEventSchemaPages0(v DataPageEventSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageEventSchemaPages1 returns the union data inside the DataPageEventSchema_Pages as a DataPageEventSchemaPages1
func (t DataPageEventSchema_Pages) AsDataPageEventSchemaPages1() (DataPageEventSchemaPages1, error) {
	var body DataPageEventSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageEventSchemaPages1 overwrites any union data inside the DataPageEventSchema_Pages as the provided DataPageEventSchemaPages1
func (t *DataPageEventSchema_Pages) FromDataPageEventSchemaPages1(v DataPageEventSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageEventSchemaPages1 performs a merge with any union data inside the DataPageEventSchema_Pages, using the provided DataPageEventSchemaPages1
func (t *DataPageEventSchema_Pages) MergeDataPageEventSchemaPages1(v DataPageEventSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageEventSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageEventSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageEventSchemaSize0 returns the union data inside the DataPageEventSchema_Size as a DataPageEventSchemaSize0
func (t DataPageEventSchema_Size) AsDataPageEventSchemaSize0() (DataPageEventSchemaSize0, error) {
	var body DataPageEventSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageEventSchemaSize0 overwrites any union data inside the DataPageEventSchema_Size as the provided DataPageEventSchemaSize0
func (t *DataPageEventSchema_Size) FromDataPageEventSchemaSize0(v DataPageEventSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageEventSchemaSize0 performs a merge with any union data inside the DataPageEventSchema_Size, using the provided DataPageEventSchemaSize0
func (t *DataPageEventSchema_Size) MergeDataPageEventSchemaSize0(v DataPageEventSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageEventSchemaSize1 returns the union data inside the DataPageEventSchema_Size as a DataPageEventSchemaSize1
func (t DataPageEventSchema_Size) AsDataPageEventSchemaSize1() (DataPageEventSchemaSize1, error) {
	var body DataPageEventSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageEventSchemaSize1 overwrites any union data inside the DataPageEventSchema_Size as the provided DataPageEventSchemaSize1
func (t *DataPageEventSchema_Size) FromDataPageEventSchemaSize1(v DataPageEventSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageEventSchemaSize1 performs a merge with any union data inside the DataPageEventSchema_Size, using the provided DataPageEventSchemaSize1
func (t *DataPageEventSchema_Size) MergeDataPageEventSchemaSize1(v DataPageEventSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageEventSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageEventSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageEventSchemaTotal0 returns the union data inside the DataPageEventSchema_Total as a DataPageEventSchemaTotal0
func (t DataPageEventSchema_Total) AsDataPageEventSchemaTotal0() (DataPageEventSchemaTotal0, error) {
	var body DataPageEventSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageEventSchemaTotal0 overwrites any union data inside the DataPageEventSchema_Total as the provided DataPageEventSchemaTotal0
func (t *DataPageEventSchema_Total) FromDataPageEventSchemaTotal0(v DataPageEventSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageEventSchemaTotal0 performs a merge with any union data inside the DataPageEventSchema_Total, using the provided DataPageEventSchemaTotal0
func (t *DataPageEventSchema_Total) MergeDataPageEventSchemaTotal0(v DataPageEventSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageEventSchemaTotal1 returns the union data inside the DataPageEventSchema_Total as a DataPageEventSchemaTotal1
func (t DataPageEventSchema_Total) AsDataPageEventSchemaTotal1() (DataPageEventSchemaTotal1, error) {
	var body DataPageEventSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageEventSchemaTotal1 overwrites any union data inside the DataPageEventSchema_Total as the provided DataPageEventSchemaTotal1
func (t *DataPageEventSchema_Total) FromDataPageEventSchemaTotal1(v DataPageEventSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageEventSchemaTotal1 performs a merge with any union data inside the DataPageEventSchema_Total, using the provided DataPageEventSchemaTotal1
func (t *DataPageEventSchema_Total) MergeDataPageEventSchemaTotal1(v DataPageEventSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageEventSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageEventSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageGEItemSchemaPage0 returns the union data inside the DataPageGEItemSchema_Page as a DataPageGEItemSchemaPage0
func (t DataPageGEItemSchema_Page) AsDataPageGEItemSchemaPage0() (DataPageGEItemSchemaPage0, error) {
	var body DataPageGEItemSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageGEItemSchemaPage0 overwrites any union data inside the DataPageGEItemSchema_Page as the provided DataPageGEItemSchemaPage0
func (t *DataPageGEItemSchema_Page) FromDataPageGEItemSchemaPage0(v DataPageGEItemSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageGEItemSchemaPage0 performs a merge with any union data inside the DataPageGEItemSchema_Page, using the provided DataPageGEItemSchemaPage0
func (t *DataPageGEItemSchema_Page) MergeDataPageGEItemSchemaPage0(v DataPageGEItemSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageGEItemSchemaPage1 returns the union data inside the DataPageGEItemSchema_Page as a DataPageGEItemSchemaPage1
func (t DataPageGEItemSchema_Page) AsDataPageGEItemSchemaPage1() (DataPageGEItemSchemaPage1, error) {
	var body DataPageGEItemSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageGEItemSchemaPage1 overwrites any union data inside the DataPageGEItemSchema_Page as the provided DataPageGEItemSchemaPage1
func (t *DataPageGEItemSchema_Page) FromDataPageGEItemSchemaPage1(v DataPageGEItemSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageGEItemSchemaPage1 performs a merge with any union data inside the DataPageGEItemSchema_Page, using the provided DataPageGEItemSchemaPage1
func (t *DataPageGEItemSchema_Page) MergeDataPageGEItemSchemaPage1(v DataPageGEItemSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageGEItemSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageGEItemSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageGEItemSchemaPages0 returns the union data inside the DataPageGEItemSchema_Pages as a DataPageGEItemSchemaPages0
func (t DataPageGEItemSchema_Pages) AsDataPageGEItemSchemaPages0() (DataPageGEItemSchemaPages0, error) {
	var body DataPageGEItemSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageGEItemSchemaPages0 overwrites any union data inside the DataPageGEItemSchema_Pages as the provided DataPageGEItemSchemaPages0
func (t *DataPageGEItemSchema_Pages) FromDataPageGEItemSchemaPages0(v DataPageGEItemSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageGEItemSchemaPages0 performs a merge with any union data inside the DataPageGEItemSchema_Pages, using the provided DataPageGEItemSchemaPages0
func (t *DataPageGEItemSchema_Pages) MergeDataPageGEItemSchemaPages0(v DataPageGEItemSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageGEItemSchemaPages1 returns the union data inside the DataPageGEItemSchema_Pages as a DataPageGEItemSchemaPages1
func (t DataPageGEItemSchema_Pages) AsDataPageGEItemSchemaPages1() (DataPageGEItemSchemaPages1, error) {
	var body DataPageGEItemSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageGEItemSchemaPages1 overwrites any union data inside the DataPageGEItemSchema_Pages as the provided DataPageGEItemSchemaPages1
func (t *DataPageGEItemSchema_Pages) FromDataPageGEItemSchemaPages1(v DataPageGEItemSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageGEItemSchemaPages1 performs a merge with any union data inside the DataPageGEItemSchema_Pages, using the provided DataPageGEItemSchemaPages1
func (t *DataPageGEItemSchema_Pages) MergeDataPageGEItemSchemaPages1(v DataPageGEItemSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageGEItemSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageGEItemSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageGEItemSchemaSize0 returns the union data inside the DataPageGEItemSchema_Size as a DataPageGEItemSchemaSize0
func (t DataPageGEItemSchema_Size) AsDataPageGEItemSchemaSize0() (DataPageGEItemSchemaSize0, error) {
	var body DataPageGEItemSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageGEItemSchemaSize0 overwrites any union data inside the DataPageGEItemSchema_Size as the provided DataPageGEItemSchemaSize0
func (t *DataPageGEItemSchema_Size) FromDataPageGEItemSchemaSize0(v DataPageGEItemSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageGEItemSchemaSize0 performs a merge with any union data inside the DataPageGEItemSchema_Size, using the provided DataPageGEItemSchemaSize0
func (t *DataPageGEItemSchema_Size) MergeDataPageGEItemSchemaSize0(v DataPageGEItemSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageGEItemSchemaSize1 returns the union data inside the DataPageGEItemSchema_Size as a DataPageGEItemSchemaSize1
func (t DataPageGEItemSchema_Size) AsDataPageGEItemSchemaSize1() (DataPageGEItemSchemaSize1, error) {
	var body DataPageGEItemSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageGEItemSchemaSize1 overwrites any union data inside the DataPageGEItemSchema_Size as the provided DataPageGEItemSchemaSize1
func (t *DataPageGEItemSchema_Size) FromDataPageGEItemSchemaSize1(v DataPageGEItemSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageGEItemSchemaSize1 performs a merge with any union data inside the DataPageGEItemSchema_Size, using the provided DataPageGEItemSchemaSize1
func (t *DataPageGEItemSchema_Size) MergeDataPageGEItemSchemaSize1(v DataPageGEItemSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageGEItemSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageGEItemSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageGEItemSchemaTotal0 returns the union data inside the DataPageGEItemSchema_Total as a DataPageGEItemSchemaTotal0
func (t DataPageGEItemSchema_Total) AsDataPageGEItemSchemaTotal0() (DataPageGEItemSchemaTotal0, error) {
	var body DataPageGEItemSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageGEItemSchemaTotal0 overwrites any union data inside the DataPageGEItemSchema_Total as the provided DataPageGEItemSchemaTotal0
func (t *DataPageGEItemSchema_Total) FromDataPageGEItemSchemaTotal0(v DataPageGEItemSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageGEItemSchemaTotal0 performs a merge with any union data inside the DataPageGEItemSchema_Total, using the provided DataPageGEItemSchemaTotal0
func (t *DataPageGEItemSchema_Total) MergeDataPageGEItemSchemaTotal0(v DataPageGEItemSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageGEItemSchemaTotal1 returns the union data inside the DataPageGEItemSchema_Total as a DataPageGEItemSchemaTotal1
func (t DataPageGEItemSchema_Total) AsDataPageGEItemSchemaTotal1() (DataPageGEItemSchemaTotal1, error) {
	var body DataPageGEItemSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageGEItemSchemaTotal1 overwrites any union data inside the DataPageGEItemSchema_Total as the provided DataPageGEItemSchemaTotal1
func (t *DataPageGEItemSchema_Total) FromDataPageGEItemSchemaTotal1(v DataPageGEItemSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageGEItemSchemaTotal1 performs a merge with any union data inside the DataPageGEItemSchema_Total, using the provided DataPageGEItemSchemaTotal1
func (t *DataPageGEItemSchema_Total) MergeDataPageGEItemSchemaTotal1(v DataPageGEItemSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageGEItemSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageGEItemSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageItemSchemaPage0 returns the union data inside the DataPageItemSchema_Page as a DataPageItemSchemaPage0
func (t DataPageItemSchema_Page) AsDataPageItemSchemaPage0() (DataPageItemSchemaPage0, error) {
	var body DataPageItemSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageItemSchemaPage0 overwrites any union data inside the DataPageItemSchema_Page as the provided DataPageItemSchemaPage0
func (t *DataPageItemSchema_Page) FromDataPageItemSchemaPage0(v DataPageItemSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageItemSchemaPage0 performs a merge with any union data inside the DataPageItemSchema_Page, using the provided DataPageItemSchemaPage0
func (t *DataPageItemSchema_Page) MergeDataPageItemSchemaPage0(v DataPageItemSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageItemSchemaPage1 returns the union data inside the DataPageItemSchema_Page as a DataPageItemSchemaPage1
func (t DataPageItemSchema_Page) AsDataPageItemSchemaPage1() (DataPageItemSchemaPage1, error) {
	var body DataPageItemSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageItemSchemaPage1 overwrites any union data inside the DataPageItemSchema_Page as the provided DataPageItemSchemaPage1
func (t *DataPageItemSchema_Page) FromDataPageItemSchemaPage1(v DataPageItemSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageItemSchemaPage1 performs a merge with any union data inside the DataPageItemSchema_Page, using the provided DataPageItemSchemaPage1
func (t *DataPageItemSchema_Page) MergeDataPageItemSchemaPage1(v DataPageItemSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageItemSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageItemSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageItemSchemaPages0 returns the union data inside the DataPageItemSchema_Pages as a DataPageItemSchemaPages0
func (t DataPageItemSchema_Pages) AsDataPageItemSchemaPages0() (DataPageItemSchemaPages0, error) {
	var body DataPageItemSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageItemSchemaPages0 overwrites any union data inside the DataPageItemSchema_Pages as the provided DataPageItemSchemaPages0
func (t *DataPageItemSchema_Pages) FromDataPageItemSchemaPages0(v DataPageItemSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageItemSchemaPages0 performs a merge with any union data inside the DataPageItemSchema_Pages, using the provided DataPageItemSchemaPages0
func (t *DataPageItemSchema_Pages) MergeDataPageItemSchemaPages0(v DataPageItemSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageItemSchemaPages1 returns the union data inside the DataPageItemSchema_Pages as a DataPageItemSchemaPages1
func (t DataPageItemSchema_Pages) AsDataPageItemSchemaPages1() (DataPageItemSchemaPages1, error) {
	var body DataPageItemSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageItemSchemaPages1 overwrites any union data inside the DataPageItemSchema_Pages as the provided DataPageItemSchemaPages1
func (t *DataPageItemSchema_Pages) FromDataPageItemSchemaPages1(v DataPageItemSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageItemSchemaPages1 performs a merge with any union data inside the DataPageItemSchema_Pages, using the provided DataPageItemSchemaPages1
func (t *DataPageItemSchema_Pages) MergeDataPageItemSchemaPages1(v DataPageItemSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageItemSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageItemSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageItemSchemaSize0 returns the union data inside the DataPageItemSchema_Size as a DataPageItemSchemaSize0
func (t DataPageItemSchema_Size) AsDataPageItemSchemaSize0() (DataPageItemSchemaSize0, error) {
	var body DataPageItemSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageItemSchemaSize0 overwrites any union data inside the DataPageItemSchema_Size as the provided DataPageItemSchemaSize0
func (t *DataPageItemSchema_Size) FromDataPageItemSchemaSize0(v DataPageItemSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageItemSchemaSize0 performs a merge with any union data inside the DataPageItemSchema_Size, using the provided DataPageItemSchemaSize0
func (t *DataPageItemSchema_Size) MergeDataPageItemSchemaSize0(v DataPageItemSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageItemSchemaSize1 returns the union data inside the DataPageItemSchema_Size as a DataPageItemSchemaSize1
func (t DataPageItemSchema_Size) AsDataPageItemSchemaSize1() (DataPageItemSchemaSize1, error) {
	var body DataPageItemSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageItemSchemaSize1 overwrites any union data inside the DataPageItemSchema_Size as the provided DataPageItemSchemaSize1
func (t *DataPageItemSchema_Size) FromDataPageItemSchemaSize1(v DataPageItemSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageItemSchemaSize1 performs a merge with any union data inside the DataPageItemSchema_Size, using the provided DataPageItemSchemaSize1
func (t *DataPageItemSchema_Size) MergeDataPageItemSchemaSize1(v DataPageItemSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageItemSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageItemSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageItemSchemaTotal0 returns the union data inside the DataPageItemSchema_Total as a DataPageItemSchemaTotal0
func (t DataPageItemSchema_Total) AsDataPageItemSchemaTotal0() (DataPageItemSchemaTotal0, error) {
	var body DataPageItemSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageItemSchemaTotal0 overwrites any union data inside the DataPageItemSchema_Total as the provided DataPageItemSchemaTotal0
func (t *DataPageItemSchema_Total) FromDataPageItemSchemaTotal0(v DataPageItemSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageItemSchemaTotal0 performs a merge with any union data inside the DataPageItemSchema_Total, using the provided DataPageItemSchemaTotal0
func (t *DataPageItemSchema_Total) MergeDataPageItemSchemaTotal0(v DataPageItemSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageItemSchemaTotal1 returns the union data inside the DataPageItemSchema_Total as a DataPageItemSchemaTotal1
func (t DataPageItemSchema_Total) AsDataPageItemSchemaTotal1() (DataPageItemSchemaTotal1, error) {
	var body DataPageItemSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageItemSchemaTotal1 overwrites any union data inside the DataPageItemSchema_Total as the provided DataPageItemSchemaTotal1
func (t *DataPageItemSchema_Total) FromDataPageItemSchemaTotal1(v DataPageItemSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageItemSchemaTotal1 performs a merge with any union data inside the DataPageItemSchema_Total, using the provided DataPageItemSchemaTotal1
func (t *DataPageItemSchema_Total) MergeDataPageItemSchemaTotal1(v DataPageItemSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageItemSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageItemSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageLogSchemaPage0 returns the union data inside the DataPageLogSchema_Page as a DataPageLogSchemaPage0
func (t DataPageLogSchema_Page) AsDataPageLogSchemaPage0() (DataPageLogSchemaPage0, error) {
	var body DataPageLogSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageLogSchemaPage0 overwrites any union data inside the DataPageLogSchema_Page as the provided DataPageLogSchemaPage0
func (t *DataPageLogSchema_Page) FromDataPageLogSchemaPage0(v DataPageLogSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageLogSchemaPage0 performs a merge with any union data inside the DataPageLogSchema_Page, using the provided DataPageLogSchemaPage0
func (t *DataPageLogSchema_Page) MergeDataPageLogSchemaPage0(v DataPageLogSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageLogSchemaPage1 returns the union data inside the DataPageLogSchema_Page as a DataPageLogSchemaPage1
func (t DataPageLogSchema_Page) AsDataPageLogSchemaPage1() (DataPageLogSchemaPage1, error) {
	var body DataPageLogSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageLogSchemaPage1 overwrites any union data inside the DataPageLogSchema_Page as the provided DataPageLogSchemaPage1
func (t *DataPageLogSchema_Page) FromDataPageLogSchemaPage1(v DataPageLogSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageLogSchemaPage1 performs a merge with any union data inside the DataPageLogSchema_Page, using the provided DataPageLogSchemaPage1
func (t *DataPageLogSchema_Page) MergeDataPageLogSchemaPage1(v DataPageLogSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageLogSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageLogSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageLogSchemaPages0 returns the union data inside the DataPageLogSchema_Pages as a DataPageLogSchemaPages0
func (t DataPageLogSchema_Pages) AsDataPageLogSchemaPages0() (DataPageLogSchemaPages0, error) {
	var body DataPageLogSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageLogSchemaPages0 overwrites any union data inside the DataPageLogSchema_Pages as the provided DataPageLogSchemaPages0
func (t *DataPageLogSchema_Pages) FromDataPageLogSchemaPages0(v DataPageLogSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageLogSchemaPages0 performs a merge with any union data inside the DataPageLogSchema_Pages, using the provided DataPageLogSchemaPages0
func (t *DataPageLogSchema_Pages) MergeDataPageLogSchemaPages0(v DataPageLogSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageLogSchemaPages1 returns the union data inside the DataPageLogSchema_Pages as a DataPageLogSchemaPages1
func (t DataPageLogSchema_Pages) AsDataPageLogSchemaPages1() (DataPageLogSchemaPages1, error) {
	var body DataPageLogSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageLogSchemaPages1 overwrites any union data inside the DataPageLogSchema_Pages as the provided DataPageLogSchemaPages1
func (t *DataPageLogSchema_Pages) FromDataPageLogSchemaPages1(v DataPageLogSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageLogSchemaPages1 performs a merge with any union data inside the DataPageLogSchema_Pages, using the provided DataPageLogSchemaPages1
func (t *DataPageLogSchema_Pages) MergeDataPageLogSchemaPages1(v DataPageLogSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageLogSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageLogSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageLogSchemaSize0 returns the union data inside the DataPageLogSchema_Size as a DataPageLogSchemaSize0
func (t DataPageLogSchema_Size) AsDataPageLogSchemaSize0() (DataPageLogSchemaSize0, error) {
	var body DataPageLogSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageLogSchemaSize0 overwrites any union data inside the DataPageLogSchema_Size as the provided DataPageLogSchemaSize0
func (t *DataPageLogSchema_Size) FromDataPageLogSchemaSize0(v DataPageLogSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageLogSchemaSize0 performs a merge with any union data inside the DataPageLogSchema_Size, using the provided DataPageLogSchemaSize0
func (t *DataPageLogSchema_Size) MergeDataPageLogSchemaSize0(v DataPageLogSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageLogSchemaSize1 returns the union data inside the DataPageLogSchema_Size as a DataPageLogSchemaSize1
func (t DataPageLogSchema_Size) AsDataPageLogSchemaSize1() (DataPageLogSchemaSize1, error) {
	var body DataPageLogSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageLogSchemaSize1 overwrites any union data inside the DataPageLogSchema_Size as the provided DataPageLogSchemaSize1
func (t *DataPageLogSchema_Size) FromDataPageLogSchemaSize1(v DataPageLogSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageLogSchemaSize1 performs a merge with any union data inside the DataPageLogSchema_Size, using the provided DataPageLogSchemaSize1
func (t *DataPageLogSchema_Size) MergeDataPageLogSchemaSize1(v DataPageLogSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageLogSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageLogSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageLogSchemaTotal0 returns the union data inside the DataPageLogSchema_Total as a DataPageLogSchemaTotal0
func (t DataPageLogSchema_Total) AsDataPageLogSchemaTotal0() (DataPageLogSchemaTotal0, error) {
	var body DataPageLogSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageLogSchemaTotal0 overwrites any union data inside the DataPageLogSchema_Total as the provided DataPageLogSchemaTotal0
func (t *DataPageLogSchema_Total) FromDataPageLogSchemaTotal0(v DataPageLogSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageLogSchemaTotal0 performs a merge with any union data inside the DataPageLogSchema_Total, using the provided DataPageLogSchemaTotal0
func (t *DataPageLogSchema_Total) MergeDataPageLogSchemaTotal0(v DataPageLogSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageLogSchemaTotal1 returns the union data inside the DataPageLogSchema_Total as a DataPageLogSchemaTotal1
func (t DataPageLogSchema_Total) AsDataPageLogSchemaTotal1() (DataPageLogSchemaTotal1, error) {
	var body DataPageLogSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageLogSchemaTotal1 overwrites any union data inside the DataPageLogSchema_Total as the provided DataPageLogSchemaTotal1
func (t *DataPageLogSchema_Total) FromDataPageLogSchemaTotal1(v DataPageLogSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageLogSchemaTotal1 performs a merge with any union data inside the DataPageLogSchema_Total, using the provided DataPageLogSchemaTotal1
func (t *DataPageLogSchema_Total) MergeDataPageLogSchemaTotal1(v DataPageLogSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageLogSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageLogSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageMapSchemaPage0 returns the union data inside the DataPageMapSchema_Page as a DataPageMapSchemaPage0
func (t DataPageMapSchema_Page) AsDataPageMapSchemaPage0() (DataPageMapSchemaPage0, error) {
	var body DataPageMapSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMapSchemaPage0 overwrites any union data inside the DataPageMapSchema_Page as the provided DataPageMapSchemaPage0
func (t *DataPageMapSchema_Page) FromDataPageMapSchemaPage0(v DataPageMapSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMapSchemaPage0 performs a merge with any union data inside the DataPageMapSchema_Page, using the provided DataPageMapSchemaPage0
func (t *DataPageMapSchema_Page) MergeDataPageMapSchemaPage0(v DataPageMapSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageMapSchemaPage1 returns the union data inside the DataPageMapSchema_Page as a DataPageMapSchemaPage1
func (t DataPageMapSchema_Page) AsDataPageMapSchemaPage1() (DataPageMapSchemaPage1, error) {
	var body DataPageMapSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMapSchemaPage1 overwrites any union data inside the DataPageMapSchema_Page as the provided DataPageMapSchemaPage1
func (t *DataPageMapSchema_Page) FromDataPageMapSchemaPage1(v DataPageMapSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMapSchemaPage1 performs a merge with any union data inside the DataPageMapSchema_Page, using the provided DataPageMapSchemaPage1
func (t *DataPageMapSchema_Page) MergeDataPageMapSchemaPage1(v DataPageMapSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageMapSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageMapSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageMapSchemaPages0 returns the union data inside the DataPageMapSchema_Pages as a DataPageMapSchemaPages0
func (t DataPageMapSchema_Pages) AsDataPageMapSchemaPages0() (DataPageMapSchemaPages0, error) {
	var body DataPageMapSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMapSchemaPages0 overwrites any union data inside the DataPageMapSchema_Pages as the provided DataPageMapSchemaPages0
func (t *DataPageMapSchema_Pages) FromDataPageMapSchemaPages0(v DataPageMapSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMapSchemaPages0 performs a merge with any union data inside the DataPageMapSchema_Pages, using the provided DataPageMapSchemaPages0
func (t *DataPageMapSchema_Pages) MergeDataPageMapSchemaPages0(v DataPageMapSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageMapSchemaPages1 returns the union data inside the DataPageMapSchema_Pages as a DataPageMapSchemaPages1
func (t DataPageMapSchema_Pages) AsDataPageMapSchemaPages1() (DataPageMapSchemaPages1, error) {
	var body DataPageMapSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMapSchemaPages1 overwrites any union data inside the DataPageMapSchema_Pages as the provided DataPageMapSchemaPages1
func (t *DataPageMapSchema_Pages) FromDataPageMapSchemaPages1(v DataPageMapSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMapSchemaPages1 performs a merge with any union data inside the DataPageMapSchema_Pages, using the provided DataPageMapSchemaPages1
func (t *DataPageMapSchema_Pages) MergeDataPageMapSchemaPages1(v DataPageMapSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageMapSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageMapSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageMapSchemaSize0 returns the union data inside the DataPageMapSchema_Size as a DataPageMapSchemaSize0
func (t DataPageMapSchema_Size) AsDataPageMapSchemaSize0() (DataPageMapSchemaSize0, error) {
	var body DataPageMapSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMapSchemaSize0 overwrites any union data inside the DataPageMapSchema_Size as the provided DataPageMapSchemaSize0
func (t *DataPageMapSchema_Size) FromDataPageMapSchemaSize0(v DataPageMapSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMapSchemaSize0 performs a merge with any union data inside the DataPageMapSchema_Size, using the provided DataPageMapSchemaSize0
func (t *DataPageMapSchema_Size) MergeDataPageMapSchemaSize0(v DataPageMapSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageMapSchemaSize1 returns the union data inside the DataPageMapSchema_Size as a DataPageMapSchemaSize1
func (t DataPageMapSchema_Size) AsDataPageMapSchemaSize1() (DataPageMapSchemaSize1, error) {
	var body DataPageMapSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMapSchemaSize1 overwrites any union data inside the DataPageMapSchema_Size as the provided DataPageMapSchemaSize1
func (t *DataPageMapSchema_Size) FromDataPageMapSchemaSize1(v DataPageMapSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMapSchemaSize1 performs a merge with any union data inside the DataPageMapSchema_Size, using the provided DataPageMapSchemaSize1
func (t *DataPageMapSchema_Size) MergeDataPageMapSchemaSize1(v DataPageMapSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageMapSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageMapSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageMapSchemaTotal0 returns the union data inside the DataPageMapSchema_Total as a DataPageMapSchemaTotal0
func (t DataPageMapSchema_Total) AsDataPageMapSchemaTotal0() (DataPageMapSchemaTotal0, error) {
	var body DataPageMapSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMapSchemaTotal0 overwrites any union data inside the DataPageMapSchema_Total as the provided DataPageMapSchemaTotal0
func (t *DataPageMapSchema_Total) FromDataPageMapSchemaTotal0(v DataPageMapSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMapSchemaTotal0 performs a merge with any union data inside the DataPageMapSchema_Total, using the provided DataPageMapSchemaTotal0
func (t *DataPageMapSchema_Total) MergeDataPageMapSchemaTotal0(v DataPageMapSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageMapSchemaTotal1 returns the union data inside the DataPageMapSchema_Total as a DataPageMapSchemaTotal1
func (t DataPageMapSchema_Total) AsDataPageMapSchemaTotal1() (DataPageMapSchemaTotal1, error) {
	var body DataPageMapSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMapSchemaTotal1 overwrites any union data inside the DataPageMapSchema_Total as the provided DataPageMapSchemaTotal1
func (t *DataPageMapSchema_Total) FromDataPageMapSchemaTotal1(v DataPageMapSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMapSchemaTotal1 performs a merge with any union data inside the DataPageMapSchema_Total, using the provided DataPageMapSchemaTotal1
func (t *DataPageMapSchema_Total) MergeDataPageMapSchemaTotal1(v DataPageMapSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageMapSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageMapSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageMonsterSchemaPage0 returns the union data inside the DataPageMonsterSchema_Page as a DataPageMonsterSchemaPage0
func (t DataPageMonsterSchema_Page) AsDataPageMonsterSchemaPage0() (DataPageMonsterSchemaPage0, error) {
	var body DataPageMonsterSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMonsterSchemaPage0 overwrites any union data inside the DataPageMonsterSchema_Page as the provided DataPageMonsterSchemaPage0
func (t *DataPageMonsterSchema_Page) FromDataPageMonsterSchemaPage0(v DataPageMonsterSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMonsterSchemaPage0 performs a merge with any union data inside the DataPageMonsterSchema_Page, using the provided DataPageMonsterSchemaPage0
func (t *DataPageMonsterSchema_Page) MergeDataPageMonsterSchemaPage0(v DataPageMonsterSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageMonsterSchemaPage1 returns the union data inside the DataPageMonsterSchema_Page as a DataPageMonsterSchemaPage1
func (t DataPageMonsterSchema_Page) AsDataPageMonsterSchemaPage1() (DataPageMonsterSchemaPage1, error) {
	var body DataPageMonsterSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMonsterSchemaPage1 overwrites any union data inside the DataPageMonsterSchema_Page as the provided DataPageMonsterSchemaPage1
func (t *DataPageMonsterSchema_Page) FromDataPageMonsterSchemaPage1(v DataPageMonsterSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMonsterSchemaPage1 performs a merge with any union data inside the DataPageMonsterSchema_Page, using the provided DataPageMonsterSchemaPage1
func (t *DataPageMonsterSchema_Page) MergeDataPageMonsterSchemaPage1(v DataPageMonsterSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageMonsterSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageMonsterSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageMonsterSchemaPages0 returns the union data inside the DataPageMonsterSchema_Pages as a DataPageMonsterSchemaPages0
func (t DataPageMonsterSchema_Pages) AsDataPageMonsterSchemaPages0() (DataPageMonsterSchemaPages0, error) {
	var body DataPageMonsterSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMonsterSchemaPages0 overwrites any union data inside the DataPageMonsterSchema_Pages as the provided DataPageMonsterSchemaPages0
func (t *DataPageMonsterSchema_Pages) FromDataPageMonsterSchemaPages0(v DataPageMonsterSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMonsterSchemaPages0 performs a merge with any union data inside the DataPageMonsterSchema_Pages, using the provided DataPageMonsterSchemaPages0
func (t *DataPageMonsterSchema_Pages) MergeDataPageMonsterSchemaPages0(v DataPageMonsterSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageMonsterSchemaPages1 returns the union data inside the DataPageMonsterSchema_Pages as a DataPageMonsterSchemaPages1
func (t DataPageMonsterSchema_Pages) AsDataPageMonsterSchemaPages1() (DataPageMonsterSchemaPages1, error) {
	var body DataPageMonsterSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMonsterSchemaPages1 overwrites any union data inside the DataPageMonsterSchema_Pages as the provided DataPageMonsterSchemaPages1
func (t *DataPageMonsterSchema_Pages) FromDataPageMonsterSchemaPages1(v DataPageMonsterSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMonsterSchemaPages1 performs a merge with any union data inside the DataPageMonsterSchema_Pages, using the provided DataPageMonsterSchemaPages1
func (t *DataPageMonsterSchema_Pages) MergeDataPageMonsterSchemaPages1(v DataPageMonsterSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageMonsterSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageMonsterSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageMonsterSchemaSize0 returns the union data inside the DataPageMonsterSchema_Size as a DataPageMonsterSchemaSize0
func (t DataPageMonsterSchema_Size) AsDataPageMonsterSchemaSize0() (DataPageMonsterSchemaSize0, error) {
	var body DataPageMonsterSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMonsterSchemaSize0 overwrites any union data inside the DataPageMonsterSchema_Size as the provided DataPageMonsterSchemaSize0
func (t *DataPageMonsterSchema_Size) FromDataPageMonsterSchemaSize0(v DataPageMonsterSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMonsterSchemaSize0 performs a merge with any union data inside the DataPageMonsterSchema_Size, using the provided DataPageMonsterSchemaSize0
func (t *DataPageMonsterSchema_Size) MergeDataPageMonsterSchemaSize0(v DataPageMonsterSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageMonsterSchemaSize1 returns the union data inside the DataPageMonsterSchema_Size as a DataPageMonsterSchemaSize1
func (t DataPageMonsterSchema_Size) AsDataPageMonsterSchemaSize1() (DataPageMonsterSchemaSize1, error) {
	var body DataPageMonsterSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMonsterSchemaSize1 overwrites any union data inside the DataPageMonsterSchema_Size as the provided DataPageMonsterSchemaSize1
func (t *DataPageMonsterSchema_Size) FromDataPageMonsterSchemaSize1(v DataPageMonsterSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMonsterSchemaSize1 performs a merge with any union data inside the DataPageMonsterSchema_Size, using the provided DataPageMonsterSchemaSize1
func (t *DataPageMonsterSchema_Size) MergeDataPageMonsterSchemaSize1(v DataPageMonsterSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageMonsterSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageMonsterSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageMonsterSchemaTotal0 returns the union data inside the DataPageMonsterSchema_Total as a DataPageMonsterSchemaTotal0
func (t DataPageMonsterSchema_Total) AsDataPageMonsterSchemaTotal0() (DataPageMonsterSchemaTotal0, error) {
	var body DataPageMonsterSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMonsterSchemaTotal0 overwrites any union data inside the DataPageMonsterSchema_Total as the provided DataPageMonsterSchemaTotal0
func (t *DataPageMonsterSchema_Total) FromDataPageMonsterSchemaTotal0(v DataPageMonsterSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMonsterSchemaTotal0 performs a merge with any union data inside the DataPageMonsterSchema_Total, using the provided DataPageMonsterSchemaTotal0
func (t *DataPageMonsterSchema_Total) MergeDataPageMonsterSchemaTotal0(v DataPageMonsterSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageMonsterSchemaTotal1 returns the union data inside the DataPageMonsterSchema_Total as a DataPageMonsterSchemaTotal1
func (t DataPageMonsterSchema_Total) AsDataPageMonsterSchemaTotal1() (DataPageMonsterSchemaTotal1, error) {
	var body DataPageMonsterSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMonsterSchemaTotal1 overwrites any union data inside the DataPageMonsterSchema_Total as the provided DataPageMonsterSchemaTotal1
func (t *DataPageMonsterSchema_Total) FromDataPageMonsterSchemaTotal1(v DataPageMonsterSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMonsterSchemaTotal1 performs a merge with any union data inside the DataPageMonsterSchema_Total, using the provided DataPageMonsterSchemaTotal1
func (t *DataPageMonsterSchema_Total) MergeDataPageMonsterSchemaTotal1(v DataPageMonsterSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageMonsterSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageMonsterSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageResourceSchemaPage0 returns the union data inside the DataPageResourceSchema_Page as a DataPageResourceSchemaPage0
func (t DataPageResourceSchema_Page) AsDataPageResourceSchemaPage0() (DataPageResourceSchemaPage0, error) {
	var body DataPageResourceSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageResourceSchemaPage0 overwrites any union data inside the DataPageResourceSchema_Page as the provided DataPageResourceSchemaPage0
func (t *DataPageResourceSchema_Page) FromDataPageResourceSchemaPage0(v DataPageResourceSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageResourceSchemaPage0 performs a merge with any union data inside the DataPageResourceSchema_Page, using the provided DataPageResourceSchemaPage0
func (t *DataPageResourceSchema_Page) MergeDataPageResourceSchemaPage0(v DataPageResourceSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageResourceSchemaPage1 returns the union data inside the DataPageResourceSchema_Page as a DataPageResourceSchemaPage1
func (t DataPageResourceSchema_Page) AsDataPageResourceSchemaPage1() (DataPageResourceSchemaPage1, error) {
	var body DataPageResourceSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageResourceSchemaPage1 overwrites any union data inside the DataPageResourceSchema_Page as the provided DataPageResourceSchemaPage1
func (t *DataPageResourceSchema_Page) FromDataPageResourceSchemaPage1(v DataPageResourceSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageResourceSchemaPage1 performs a merge with any union data inside the DataPageResourceSchema_Page, using the provided DataPageResourceSchemaPage1
func (t *DataPageResourceSchema_Page) MergeDataPageResourceSchemaPage1(v DataPageResourceSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageResourceSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageResourceSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageResourceSchemaPages0 returns the union data inside the DataPageResourceSchema_Pages as a DataPageResourceSchemaPages0
func (t DataPageResourceSchema_Pages) AsDataPageResourceSchemaPages0() (DataPageResourceSchemaPages0, error) {
	var body DataPageResourceSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageResourceSchemaPages0 overwrites any union data inside the DataPageResourceSchema_Pages as the provided DataPageResourceSchemaPages0
func (t *DataPageResourceSchema_Pages) FromDataPageResourceSchemaPages0(v DataPageResourceSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageResourceSchemaPages0 performs a merge with any union data inside the DataPageResourceSchema_Pages, using the provided DataPageResourceSchemaPages0
func (t *DataPageResourceSchema_Pages) MergeDataPageResourceSchemaPages0(v DataPageResourceSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageResourceSchemaPages1 returns the union data inside the DataPageResourceSchema_Pages as a DataPageResourceSchemaPages1
func (t DataPageResourceSchema_Pages) AsDataPageResourceSchemaPages1() (DataPageResourceSchemaPages1, error) {
	var body DataPageResourceSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageResourceSchemaPages1 overwrites any union data inside the DataPageResourceSchema_Pages as the provided DataPageResourceSchemaPages1
func (t *DataPageResourceSchema_Pages) FromDataPageResourceSchemaPages1(v DataPageResourceSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageResourceSchemaPages1 performs a merge with any union data inside the DataPageResourceSchema_Pages, using the provided DataPageResourceSchemaPages1
func (t *DataPageResourceSchema_Pages) MergeDataPageResourceSchemaPages1(v DataPageResourceSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageResourceSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageResourceSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageResourceSchemaSize0 returns the union data inside the DataPageResourceSchema_Size as a DataPageResourceSchemaSize0
func (t DataPageResourceSchema_Size) AsDataPageResourceSchemaSize0() (DataPageResourceSchemaSize0, error) {
	var body DataPageResourceSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageResourceSchemaSize0 overwrites any union data inside the DataPageResourceSchema_Size as the provided DataPageResourceSchemaSize0
func (t *DataPageResourceSchema_Size) FromDataPageResourceSchemaSize0(v DataPageResourceSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageResourceSchemaSize0 performs a merge with any union data inside the DataPageResourceSchema_Size, using the provided DataPageResourceSchemaSize0
func (t *DataPageResourceSchema_Size) MergeDataPageResourceSchemaSize0(v DataPageResourceSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageResourceSchemaSize1 returns the union data inside the DataPageResourceSchema_Size as a DataPageResourceSchemaSize1
func (t DataPageResourceSchema_Size) AsDataPageResourceSchemaSize1() (DataPageResourceSchemaSize1, error) {
	var body DataPageResourceSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageResourceSchemaSize1 overwrites any union data inside the DataPageResourceSchema_Size as the provided DataPageResourceSchemaSize1
func (t *DataPageResourceSchema_Size) FromDataPageResourceSchemaSize1(v DataPageResourceSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageResourceSchemaSize1 performs a merge with any union data inside the DataPageResourceSchema_Size, using the provided DataPageResourceSchemaSize1
func (t *DataPageResourceSchema_Size) MergeDataPageResourceSchemaSize1(v DataPageResourceSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageResourceSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageResourceSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageResourceSchemaTotal0 returns the union data inside the DataPageResourceSchema_Total as a DataPageResourceSchemaTotal0
func (t DataPageResourceSchema_Total) AsDataPageResourceSchemaTotal0() (DataPageResourceSchemaTotal0, error) {
	var body DataPageResourceSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageResourceSchemaTotal0 overwrites any union data inside the DataPageResourceSchema_Total as the provided DataPageResourceSchemaTotal0
func (t *DataPageResourceSchema_Total) FromDataPageResourceSchemaTotal0(v DataPageResourceSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageResourceSchemaTotal0 performs a merge with any union data inside the DataPageResourceSchema_Total, using the provided DataPageResourceSchemaTotal0
func (t *DataPageResourceSchema_Total) MergeDataPageResourceSchemaTotal0(v DataPageResourceSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageResourceSchemaTotal1 returns the union data inside the DataPageResourceSchema_Total as a DataPageResourceSchemaTotal1
func (t DataPageResourceSchema_Total) AsDataPageResourceSchemaTotal1() (DataPageResourceSchemaTotal1, error) {
	var body DataPageResourceSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageResourceSchemaTotal1 overwrites any union data inside the DataPageResourceSchema_Total as the provided DataPageResourceSchemaTotal1
func (t *DataPageResourceSchema_Total) FromDataPageResourceSchemaTotal1(v DataPageResourceSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageResourceSchemaTotal1 performs a merge with any union data inside the DataPageResourceSchema_Total, using the provided DataPageResourceSchemaTotal1
func (t *DataPageResourceSchema_Total) MergeDataPageResourceSchemaTotal1(v DataPageResourceSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageResourceSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageResourceSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageSimpleItemSchemaPage0 returns the union data inside the DataPageSimpleItemSchema_Page as a DataPageSimpleItemSchemaPage0
func (t DataPageSimpleItemSchema_Page) AsDataPageSimpleItemSchemaPage0() (DataPageSimpleItemSchemaPage0, error) {
	var body DataPageSimpleItemSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageSimpleItemSchemaPage0 overwrites any union data inside the DataPageSimpleItemSchema_Page as the provided DataPageSimpleItemSchemaPage0
func (t *DataPageSimpleItemSchema_Page) FromDataPageSimpleItemSchemaPage0(v DataPageSimpleItemSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageSimpleItemSchemaPage0 performs a merge with any union data inside the DataPageSimpleItemSchema_Page, using the provided DataPageSimpleItemSchemaPage0
func (t *DataPageSimpleItemSchema_Page) MergeDataPageSimpleItemSchemaPage0(v DataPageSimpleItemSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageSimpleItemSchemaPage1 returns the union data inside the DataPageSimpleItemSchema_Page as a DataPageSimpleItemSchemaPage1
func (t DataPageSimpleItemSchema_Page) AsDataPageSimpleItemSchemaPage1() (DataPageSimpleItemSchemaPage1, error) {
	var body DataPageSimpleItemSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageSimpleItemSchemaPage1 overwrites any union data inside the DataPageSimpleItemSchema_Page as the provided DataPageSimpleItemSchemaPage1
func (t *DataPageSimpleItemSchema_Page) FromDataPageSimpleItemSchemaPage1(v DataPageSimpleItemSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageSimpleItemSchemaPage1 performs a merge with any union data inside the DataPageSimpleItemSchema_Page, using the provided DataPageSimpleItemSchemaPage1
func (t *DataPageSimpleItemSchema_Page) MergeDataPageSimpleItemSchemaPage1(v DataPageSimpleItemSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageSimpleItemSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageSimpleItemSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageSimpleItemSchemaPages0 returns the union data inside the DataPageSimpleItemSchema_Pages as a DataPageSimpleItemSchemaPages0
func (t DataPageSimpleItemSchema_Pages) AsDataPageSimpleItemSchemaPages0() (DataPageSimpleItemSchemaPages0, error) {
	var body DataPageSimpleItemSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageSimpleItemSchemaPages0 overwrites any union data inside the DataPageSimpleItemSchema_Pages as the provided DataPageSimpleItemSchemaPages0
func (t *DataPageSimpleItemSchema_Pages) FromDataPageSimpleItemSchemaPages0(v DataPageSimpleItemSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageSimpleItemSchemaPages0 performs a merge with any union data inside the DataPageSimpleItemSchema_Pages, using the provided DataPageSimpleItemSchemaPages0
func (t *DataPageSimpleItemSchema_Pages) MergeDataPageSimpleItemSchemaPages0(v DataPageSimpleItemSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageSimpleItemSchemaPages1 returns the union data inside the DataPageSimpleItemSchema_Pages as a DataPageSimpleItemSchemaPages1
func (t DataPageSimpleItemSchema_Pages) AsDataPageSimpleItemSchemaPages1() (DataPageSimpleItemSchemaPages1, error) {
	var body DataPageSimpleItemSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageSimpleItemSchemaPages1 overwrites any union data inside the DataPageSimpleItemSchema_Pages as the provided DataPageSimpleItemSchemaPages1
func (t *DataPageSimpleItemSchema_Pages) FromDataPageSimpleItemSchemaPages1(v DataPageSimpleItemSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageSimpleItemSchemaPages1 performs a merge with any union data inside the DataPageSimpleItemSchema_Pages, using the provided DataPageSimpleItemSchemaPages1
func (t *DataPageSimpleItemSchema_Pages) MergeDataPageSimpleItemSchemaPages1(v DataPageSimpleItemSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageSimpleItemSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageSimpleItemSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageSimpleItemSchemaSize0 returns the union data inside the DataPageSimpleItemSchema_Size as a DataPageSimpleItemSchemaSize0
func (t DataPageSimpleItemSchema_Size) AsDataPageSimpleItemSchemaSize0() (DataPageSimpleItemSchemaSize0, error) {
	var body DataPageSimpleItemSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageSimpleItemSchemaSize0 overwrites any union data inside the DataPageSimpleItemSchema_Size as the provided DataPageSimpleItemSchemaSize0
func (t *DataPageSimpleItemSchema_Size) FromDataPageSimpleItemSchemaSize0(v DataPageSimpleItemSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageSimpleItemSchemaSize0 performs a merge with any union data inside the DataPageSimpleItemSchema_Size, using the provided DataPageSimpleItemSchemaSize0
func (t *DataPageSimpleItemSchema_Size) MergeDataPageSimpleItemSchemaSize0(v DataPageSimpleItemSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageSimpleItemSchemaSize1 returns the union data inside the DataPageSimpleItemSchema_Size as a DataPageSimpleItemSchemaSize1
func (t DataPageSimpleItemSchema_Size) AsDataPageSimpleItemSchemaSize1() (DataPageSimpleItemSchemaSize1, error) {
	var body DataPageSimpleItemSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageSimpleItemSchemaSize1 overwrites any union data inside the DataPageSimpleItemSchema_Size as the provided DataPageSimpleItemSchemaSize1
func (t *DataPageSimpleItemSchema_Size) FromDataPageSimpleItemSchemaSize1(v DataPageSimpleItemSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageSimpleItemSchemaSize1 performs a merge with any union data inside the DataPageSimpleItemSchema_Size, using the provided DataPageSimpleItemSchemaSize1
func (t *DataPageSimpleItemSchema_Size) MergeDataPageSimpleItemSchemaSize1(v DataPageSimpleItemSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageSimpleItemSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageSimpleItemSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageSimpleItemSchemaTotal0 returns the union data inside the DataPageSimpleItemSchema_Total as a DataPageSimpleItemSchemaTotal0
func (t DataPageSimpleItemSchema_Total) AsDataPageSimpleItemSchemaTotal0() (DataPageSimpleItemSchemaTotal0, error) {
	var body DataPageSimpleItemSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageSimpleItemSchemaTotal0 overwrites any union data inside the DataPageSimpleItemSchema_Total as the provided DataPageSimpleItemSchemaTotal0
func (t *DataPageSimpleItemSchema_Total) FromDataPageSimpleItemSchemaTotal0(v DataPageSimpleItemSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageSimpleItemSchemaTotal0 performs a merge with any union data inside the DataPageSimpleItemSchema_Total, using the provided DataPageSimpleItemSchemaTotal0
func (t *DataPageSimpleItemSchema_Total) MergeDataPageSimpleItemSchemaTotal0(v DataPageSimpleItemSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageSimpleItemSchemaTotal1 returns the union data inside the DataPageSimpleItemSchema_Total as a DataPageSimpleItemSchemaTotal1
func (t DataPageSimpleItemSchema_Total) AsDataPageSimpleItemSchemaTotal1() (DataPageSimpleItemSchemaTotal1, error) {
	var body DataPageSimpleItemSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageSimpleItemSchemaTotal1 overwrites any union data inside the DataPageSimpleItemSchema_Total as the provided DataPageSimpleItemSchemaTotal1
func (t *DataPageSimpleItemSchema_Total) FromDataPageSimpleItemSchemaTotal1(v DataPageSimpleItemSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageSimpleItemSchemaTotal1 performs a merge with any union data inside the DataPageSimpleItemSchema_Total, using the provided DataPageSimpleItemSchemaTotal1
func (t *DataPageSimpleItemSchema_Total) MergeDataPageSimpleItemSchemaTotal1(v DataPageSimpleItemSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageSimpleItemSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageSimpleItemSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCraftSchema returns the union data inside the ItemSchema_Craft as a CraftSchema
func (t ItemSchema_Craft) AsCraftSchema() (CraftSchema, error) {
	var body CraftSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCraftSchema overwrites any union data inside the ItemSchema_Craft as the provided CraftSchema
func (t *ItemSchema_Craft) FromCraftSchema(v CraftSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCraftSchema performs a merge with any union data inside the ItemSchema_Craft, using the provided CraftSchema
func (t *ItemSchema_Craft) MergeCraftSchema(v CraftSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsItemSchemaCraft1 returns the union data inside the ItemSchema_Craft as a ItemSchemaCraft1
func (t ItemSchema_Craft) AsItemSchemaCraft1() (ItemSchemaCraft1, error) {
	var body ItemSchemaCraft1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromItemSchemaCraft1 overwrites any union data inside the ItemSchema_Craft as the provided ItemSchemaCraft1
func (t *ItemSchema_Craft) FromItemSchemaCraft1(v ItemSchemaCraft1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeItemSchemaCraft1 performs a merge with any union data inside the ItemSchema_Craft, using the provided ItemSchemaCraft1
func (t *ItemSchema_Craft) MergeItemSchemaCraft1(v ItemSchemaCraft1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ItemSchema_Craft) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ItemSchema_Craft) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMapContentSchema returns the union data inside the MapSchema_Content as a MapContentSchema
func (t MapSchema_Content) AsMapContentSchema() (MapContentSchema, error) {
	var body MapContentSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMapContentSchema overwrites any union data inside the MapSchema_Content as the provided MapContentSchema
func (t *MapSchema_Content) FromMapContentSchema(v MapContentSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMapContentSchema performs a merge with any union data inside the MapSchema_Content, using the provided MapContentSchema
func (t *MapSchema_Content) MergeMapContentSchema(v MapContentSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMapSchemaContent1 returns the union data inside the MapSchema_Content as a MapSchemaContent1
func (t MapSchema_Content) AsMapSchemaContent1() (MapSchemaContent1, error) {
	var body MapSchemaContent1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMapSchemaContent1 overwrites any union data inside the MapSchema_Content as the provided MapSchemaContent1
func (t *MapSchema_Content) FromMapSchemaContent1(v MapSchemaContent1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMapSchemaContent1 performs a merge with any union data inside the MapSchema_Content, using the provided MapSchemaContent1
func (t *MapSchema_Content) MergeMapSchemaContent1(v MapSchemaContent1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t MapSchema_Content) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MapSchema_Content) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGEItemSchema returns the union data inside the SingleItemSchema_Ge as a GEItemSchema
func (t SingleItemSchema_Ge) AsGEItemSchema() (GEItemSchema, error) {
	var body GEItemSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGEItemSchema overwrites any union data inside the SingleItemSchema_Ge as the provided GEItemSchema
func (t *SingleItemSchema_Ge) FromGEItemSchema(v GEItemSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGEItemSchema performs a merge with any union data inside the SingleItemSchema_Ge, using the provided GEItemSchema
func (t *SingleItemSchema_Ge) MergeGEItemSchema(v GEItemSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSingleItemSchemaGe1 returns the union data inside the SingleItemSchema_Ge as a SingleItemSchemaGe1
func (t SingleItemSchema_Ge) AsSingleItemSchemaGe1() (SingleItemSchemaGe1, error) {
	var body SingleItemSchemaGe1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSingleItemSchemaGe1 overwrites any union data inside the SingleItemSchema_Ge as the provided SingleItemSchemaGe1
func (t *SingleItemSchema_Ge) FromSingleItemSchemaGe1(v SingleItemSchemaGe1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSingleItemSchemaGe1 performs a merge with any union data inside the SingleItemSchema_Ge, using the provided SingleItemSchemaGe1
func (t *SingleItemSchema_Ge) MergeSingleItemSchemaGe1(v SingleItemSchemaGe1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SingleItemSchema_Ge) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SingleItemSchema_Ge) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetStatus request
	GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAccountWithBody request with any body
	CreateAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAccount(ctx context.Context, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllCharacters request
	GetAllCharacters(ctx context.Context, params *GetAllCharactersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountCreateCharacterWithBody request with any body
	AccountCreateCharacterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountCreateCharacter(ctx context.Context, body AccountCreateCharacterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharacterByName request
	GetCharacterByName(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllEvents request
	GetAllEvents(ctx context.Context, params *GetAllEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllGrandExchangeItems request
	GetAllGrandExchangeItems(ctx context.Context, params *GetAllGrandExchangeItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGrandExchangeItemByCode request
	GetGrandExchangeItemByCode(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllItems request
	GetAllItems(ctx context.Context, params *GetAllItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetItemByCode request
	GetItemByCode(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllMaps request
	GetAllMaps(ctx context.Context, params *GetAllMapsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMapDetail request
	GetMapDetail(ctx context.Context, x int, y int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllMonsters request
	GetAllMonsters(ctx context.Context, params *GetAllMonstersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMonsterByCode request
	GetMonsterByCode(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountBankGold request
	GetAccountBankGold(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountBankItems request
	GetAccountBankItems(ctx context.Context, params *GetAccountBankItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountChangePasswordWithBody request with any body
	AccountChangePasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountChangePassword(ctx context.Context, body AccountChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountCharacterList request
	GetAccountCharacterList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountCharactersLogs request
	GetAccountCharactersLogs(ctx context.Context, params *GetAccountCharactersLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CharacterBankDepositItemActionWithBody request with any body
	CharacterBankDepositItemActionWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CharacterBankDepositItemAction(ctx context.Context, name string, body CharacterBankDepositItemActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CharacterBankDepositGoldActionWithBody request with any body
	CharacterBankDepositGoldActionWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CharacterBankDepositGoldAction(ctx context.Context, name string, body CharacterBankDepositGoldActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CharacterBankWithdrawItemActionWithBody request with any body
	CharacterBankWithdrawItemActionWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CharacterBankWithdrawItemAction(ctx context.Context, name string, body CharacterBankWithdrawItemActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CharacterBankWithdrawGoldActionWithBody request with any body
	CharacterBankWithdrawGoldActionWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CharacterBankWithdrawGoldAction(ctx context.Context, name string, body CharacterBankWithdrawGoldActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CharacterCraftingActionWithBody request with any body
	CharacterCraftingActionWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CharacterCraftingAction(ctx context.Context, name string, body CharacterCraftingActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CharacterDeleteItemActionWithBody request with any body
	CharacterDeleteItemActionWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CharacterDeleteItemAction(ctx context.Context, name string, body CharacterDeleteItemActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CharacterEquipActionWithBody request with any body
	CharacterEquipActionWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CharacterEquipAction(ctx context.Context, name string, body CharacterEquipActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CharacterFightAction request
	CharacterFightAction(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CharacterGatheringAction request
	CharacterGatheringAction(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CharacterGlobalExchangeBuyActionWithBody request with any body
	CharacterGlobalExchangeBuyActionWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CharacterGlobalExchangeBuyAction(ctx context.Context, name string, body CharacterGlobalExchangeBuyActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CharacterGlobalExchangeSellActionWithBody request with any body
	CharacterGlobalExchangeSellActionWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CharacterGlobalExchangeSellAction(ctx context.Context, name string, body CharacterGlobalExchangeSellActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CharacterMoveActionWithBody request with any body
	CharacterMoveActionWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CharacterMoveAction(ctx context.Context, name string, body CharacterMoveActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CharacterRecyclingActionWithBody request with any body
	CharacterRecyclingActionWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CharacterRecyclingAction(ctx context.Context, name string, body CharacterRecyclingActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CharacterCompleteTaskAction request
	CharacterCompleteTaskAction(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CharacterExchangeTaskAction request
	CharacterExchangeTaskAction(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CharacterAcceptNewTaskAction request
	CharacterAcceptNewTaskAction(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CharacterUnequipActionWithBody request with any body
	CharacterUnequipActionWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CharacterUnequipAction(ctx context.Context, name string, body CharacterUnequipActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharacterLogs request
	GetCharacterLogs(ctx context.Context, name string, params *GetCharacterLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllResources request
	GetAllResources(ctx context.Context, params *GetAllResourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetResourceByCode request
	GetResourceByCode(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenerateToken request
	GenerateToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAccount(ctx context.Context, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllCharacters(ctx context.Context, params *GetAllCharactersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllCharactersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountCreateCharacterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountCreateCharacterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountCreateCharacter(ctx context.Context, body AccountCreateCharacterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountCreateCharacterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharacterByName(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharacterByNameRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllEvents(ctx context.Context, params *GetAllEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllEventsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllGrandExchangeItems(ctx context.Context, params *GetAllGrandExchangeItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllGrandExchangeItemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGrandExchangeItemByCode(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGrandExchangeItemByCodeRequest(c.Server, code)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllItems(ctx context.Context, params *GetAllItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllItemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetItemByCode(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetItemByCodeRequest(c.Server, code)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllMaps(ctx context.Context, params *GetAllMapsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllMapsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMapDetail(ctx context.Context, x int, y int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMapDetailRequest(c.Server, x, y)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllMonsters(ctx context.Context, params *GetAllMonstersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllMonstersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMonsterByCode(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMonsterByCodeRequest(c.Server, code)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountBankGold(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountBankGoldRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountBankItems(ctx context.Context, params *GetAccountBankItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountBankItemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountChangePasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountChangePasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountChangePassword(ctx context.Context, body AccountChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountChangePasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountCharacterList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountCharacterListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountCharactersLogs(ctx context.Context, params *GetAccountCharactersLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountCharactersLogsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CharacterBankDepositItemActionWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCharacterBankDepositItemActionRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CharacterBankDepositItemAction(ctx context.Context, name string, body CharacterBankDepositItemActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCharacterBankDepositItemActionRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CharacterBankDepositGoldActionWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCharacterBankDepositGoldActionRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CharacterBankDepositGoldAction(ctx context.Context, name string, body CharacterBankDepositGoldActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCharacterBankDepositGoldActionRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CharacterBankWithdrawItemActionWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCharacterBankWithdrawItemActionRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CharacterBankWithdrawItemAction(ctx context.Context, name string, body CharacterBankWithdrawItemActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCharacterBankWithdrawItemActionRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CharacterBankWithdrawGoldActionWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCharacterBankWithdrawGoldActionRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CharacterBankWithdrawGoldAction(ctx context.Context, name string, body CharacterBankWithdrawGoldActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCharacterBankWithdrawGoldActionRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CharacterCraftingActionWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCharacterCraftingActionRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CharacterCraftingAction(ctx context.Context, name string, body CharacterCraftingActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCharacterCraftingActionRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CharacterDeleteItemActionWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCharacterDeleteItemActionRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CharacterDeleteItemAction(ctx context.Context, name string, body CharacterDeleteItemActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCharacterDeleteItemActionRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CharacterEquipActionWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCharacterEquipActionRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CharacterEquipAction(ctx context.Context, name string, body CharacterEquipActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCharacterEquipActionRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CharacterFightAction(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCharacterFightActionRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CharacterGatheringAction(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCharacterGatheringActionRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CharacterGlobalExchangeBuyActionWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCharacterGlobalExchangeBuyActionRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CharacterGlobalExchangeBuyAction(ctx context.Context, name string, body CharacterGlobalExchangeBuyActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCharacterGlobalExchangeBuyActionRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CharacterGlobalExchangeSellActionWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCharacterGlobalExchangeSellActionRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CharacterGlobalExchangeSellAction(ctx context.Context, name string, body CharacterGlobalExchangeSellActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCharacterGlobalExchangeSellActionRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CharacterMoveActionWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCharacterMoveActionRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CharacterMoveAction(ctx context.Context, name string, body CharacterMoveActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCharacterMoveActionRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CharacterRecyclingActionWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCharacterRecyclingActionRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CharacterRecyclingAction(ctx context.Context, name string, body CharacterRecyclingActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCharacterRecyclingActionRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CharacterCompleteTaskAction(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCharacterCompleteTaskActionRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CharacterExchangeTaskAction(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCharacterExchangeTaskActionRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CharacterAcceptNewTaskAction(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCharacterAcceptNewTaskActionRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CharacterUnequipActionWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCharacterUnequipActionRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CharacterUnequipAction(ctx context.Context, name string, body CharacterUnequipActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCharacterUnequipActionRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharacterLogs(ctx context.Context, name string, params *GetCharacterLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharacterLogsRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllResources(ctx context.Context, params *GetAllResourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllResourcesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetResourceByCode(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetResourceByCodeRequest(c.Server, code)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetStatusRequest generates requests for GetStatus
func NewGetStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAccountRequest calls the generic CreateAccount builder with application/json body
func NewCreateAccountRequest(server string, body CreateAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAccountRequestWithBody generates requests for CreateAccount with any type of body
func NewCreateAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllCharactersRequest generates requests for GetAllCharacters
func NewGetAllCharactersRequest(server string, params *GetAllCharactersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountCreateCharacterRequest calls the generic AccountCreateCharacter builder with application/json body
func NewAccountCreateCharacterRequest(server string, body AccountCreateCharacterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccountCreateCharacterRequestWithBody(server, "application/json", bodyReader)
}

// NewAccountCreateCharacterRequestWithBody generates requests for AccountCreateCharacter with any type of body
func NewAccountCreateCharacterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCharacterByNameRequest generates requests for GetCharacterByName
func NewGetCharacterByNameRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllEventsRequest generates requests for GetAllEvents
func NewGetAllEventsRequest(server string, params *GetAllEventsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllGrandExchangeItemsRequest generates requests for GetAllGrandExchangeItems
func NewGetAllGrandExchangeItemsRequest(server string, params *GetAllGrandExchangeItemsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ge/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGrandExchangeItemByCodeRequest generates requests for GetGrandExchangeItemByCode
func NewGetGrandExchangeItemByCodeRequest(server string, code string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ge/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllItemsRequest generates requests for GetAllItems
func NewGetAllItemsRequest(server string, params *GetAllItemsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/items/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MinLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_level", runtime.ParamLocationQuery, *params.MinLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_level", runtime.ParamLocationQuery, *params.MaxLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CraftSkill != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "craft_skill", runtime.ParamLocationQuery, *params.CraftSkill); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CraftMaterial != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "craft_material", runtime.ParamLocationQuery, *params.CraftMaterial); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetItemByCodeRequest generates requests for GetItemByCode
func NewGetItemByCodeRequest(server string, code string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllMapsRequest generates requests for GetAllMaps
func NewGetAllMapsRequest(server string, params *GetAllMapsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/maps/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ContentType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "content_type", runtime.ParamLocationQuery, *params.ContentType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContentCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "content_code", runtime.ParamLocationQuery, *params.ContentCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMapDetailRequest generates requests for GetMapDetail
func NewGetMapDetailRequest(server string, x int, y int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "x", runtime.ParamLocationPath, x)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "y", runtime.ParamLocationPath, y)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/maps/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllMonstersRequest generates requests for GetAllMonsters
func NewGetAllMonstersRequest(server string, params *GetAllMonstersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/monsters/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MinLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_level", runtime.ParamLocationQuery, *params.MinLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_level", runtime.ParamLocationQuery, *params.MaxLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Drop != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "drop", runtime.ParamLocationQuery, *params.Drop); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMonsterByCodeRequest generates requests for GetMonsterByCode
func NewGetMonsterByCodeRequest(server string, code string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/monsters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccountBankGoldRequest generates requests for GetAccountBankGold
func NewGetAccountBankGoldRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/bank/gold")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccountBankItemsRequest generates requests for GetAccountBankItems
func NewGetAccountBankItemsRequest(server string, params *GetAccountBankItemsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/bank/items")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ItemCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "item_code", runtime.ParamLocationQuery, *params.ItemCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountChangePasswordRequest calls the generic AccountChangePassword builder with application/json body
func NewAccountChangePasswordRequest(server string, body AccountChangePasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccountChangePasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewAccountChangePasswordRequestWithBody generates requests for AccountChangePassword with any type of body
func NewAccountChangePasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/change_password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAccountCharacterListRequest generates requests for GetAccountCharacterList
func NewGetAccountCharacterListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/characters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccountCharactersLogsRequest generates requests for GetAccountCharactersLogs
func NewGetAccountCharactersLogsRequest(server string, params *GetAccountCharactersLogsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/logs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCharacterBankDepositItemActionRequest calls the generic CharacterBankDepositItemAction builder with application/json body
func NewCharacterBankDepositItemActionRequest(server string, name string, body CharacterBankDepositItemActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCharacterBankDepositItemActionRequestWithBody(server, name, "application/json", bodyReader)
}

// NewCharacterBankDepositItemActionRequestWithBody generates requests for CharacterBankDepositItemAction with any type of body
func NewCharacterBankDepositItemActionRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/bank/deposit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCharacterBankDepositGoldActionRequest calls the generic CharacterBankDepositGoldAction builder with application/json body
func NewCharacterBankDepositGoldActionRequest(server string, name string, body CharacterBankDepositGoldActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCharacterBankDepositGoldActionRequestWithBody(server, name, "application/json", bodyReader)
}

// NewCharacterBankDepositGoldActionRequestWithBody generates requests for CharacterBankDepositGoldAction with any type of body
func NewCharacterBankDepositGoldActionRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/bank/deposit/gold", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCharacterBankWithdrawItemActionRequest calls the generic CharacterBankWithdrawItemAction builder with application/json body
func NewCharacterBankWithdrawItemActionRequest(server string, name string, body CharacterBankWithdrawItemActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCharacterBankWithdrawItemActionRequestWithBody(server, name, "application/json", bodyReader)
}

// NewCharacterBankWithdrawItemActionRequestWithBody generates requests for CharacterBankWithdrawItemAction with any type of body
func NewCharacterBankWithdrawItemActionRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/bank/withdraw", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCharacterBankWithdrawGoldActionRequest calls the generic CharacterBankWithdrawGoldAction builder with application/json body
func NewCharacterBankWithdrawGoldActionRequest(server string, name string, body CharacterBankWithdrawGoldActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCharacterBankWithdrawGoldActionRequestWithBody(server, name, "application/json", bodyReader)
}

// NewCharacterBankWithdrawGoldActionRequestWithBody generates requests for CharacterBankWithdrawGoldAction with any type of body
func NewCharacterBankWithdrawGoldActionRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/bank/withdraw/gold", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCharacterCraftingActionRequest calls the generic CharacterCraftingAction builder with application/json body
func NewCharacterCraftingActionRequest(server string, name string, body CharacterCraftingActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCharacterCraftingActionRequestWithBody(server, name, "application/json", bodyReader)
}

// NewCharacterCraftingActionRequestWithBody generates requests for CharacterCraftingAction with any type of body
func NewCharacterCraftingActionRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/crafting", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCharacterDeleteItemActionRequest calls the generic CharacterDeleteItemAction builder with application/json body
func NewCharacterDeleteItemActionRequest(server string, name string, body CharacterDeleteItemActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCharacterDeleteItemActionRequestWithBody(server, name, "application/json", bodyReader)
}

// NewCharacterDeleteItemActionRequestWithBody generates requests for CharacterDeleteItemAction with any type of body
func NewCharacterDeleteItemActionRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCharacterEquipActionRequest calls the generic CharacterEquipAction builder with application/json body
func NewCharacterEquipActionRequest(server string, name string, body CharacterEquipActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCharacterEquipActionRequestWithBody(server, name, "application/json", bodyReader)
}

// NewCharacterEquipActionRequestWithBody generates requests for CharacterEquipAction with any type of body
func NewCharacterEquipActionRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/equip", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCharacterFightActionRequest generates requests for CharacterFightAction
func NewCharacterFightActionRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/fight", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCharacterGatheringActionRequest generates requests for CharacterGatheringAction
func NewCharacterGatheringActionRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/gathering", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCharacterGlobalExchangeBuyActionRequest calls the generic CharacterGlobalExchangeBuyAction builder with application/json body
func NewCharacterGlobalExchangeBuyActionRequest(server string, name string, body CharacterGlobalExchangeBuyActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCharacterGlobalExchangeBuyActionRequestWithBody(server, name, "application/json", bodyReader)
}

// NewCharacterGlobalExchangeBuyActionRequestWithBody generates requests for CharacterGlobalExchangeBuyAction with any type of body
func NewCharacterGlobalExchangeBuyActionRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/ge/buy", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCharacterGlobalExchangeSellActionRequest calls the generic CharacterGlobalExchangeSellAction builder with application/json body
func NewCharacterGlobalExchangeSellActionRequest(server string, name string, body CharacterGlobalExchangeSellActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCharacterGlobalExchangeSellActionRequestWithBody(server, name, "application/json", bodyReader)
}

// NewCharacterGlobalExchangeSellActionRequestWithBody generates requests for CharacterGlobalExchangeSellAction with any type of body
func NewCharacterGlobalExchangeSellActionRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/ge/sell", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCharacterMoveActionRequest calls the generic CharacterMoveAction builder with application/json body
func NewCharacterMoveActionRequest(server string, name string, body CharacterMoveActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCharacterMoveActionRequestWithBody(server, name, "application/json", bodyReader)
}

// NewCharacterMoveActionRequestWithBody generates requests for CharacterMoveAction with any type of body
func NewCharacterMoveActionRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/move", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCharacterRecyclingActionRequest calls the generic CharacterRecyclingAction builder with application/json body
func NewCharacterRecyclingActionRequest(server string, name string, body CharacterRecyclingActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCharacterRecyclingActionRequestWithBody(server, name, "application/json", bodyReader)
}

// NewCharacterRecyclingActionRequestWithBody generates requests for CharacterRecyclingAction with any type of body
func NewCharacterRecyclingActionRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/recycling", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCharacterCompleteTaskActionRequest generates requests for CharacterCompleteTaskAction
func NewCharacterCompleteTaskActionRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/task/complete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCharacterExchangeTaskActionRequest generates requests for CharacterExchangeTaskAction
func NewCharacterExchangeTaskActionRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/task/exchange", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCharacterAcceptNewTaskActionRequest generates requests for CharacterAcceptNewTaskAction
func NewCharacterAcceptNewTaskActionRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/task/new", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCharacterUnequipActionRequest calls the generic CharacterUnequipAction builder with application/json body
func NewCharacterUnequipActionRequest(server string, name string, body CharacterUnequipActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCharacterUnequipActionRequestWithBody(server, name, "application/json", bodyReader)
}

// NewCharacterUnequipActionRequestWithBody generates requests for CharacterUnequipAction with any type of body
func NewCharacterUnequipActionRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/unequip", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCharacterLogsRequest generates requests for GetCharacterLogs
func NewGetCharacterLogsRequest(server string, name string, params *GetCharacterLogsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/logs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllResourcesRequest generates requests for GetAllResources
func NewGetAllResourcesRequest(server string, params *GetAllResourcesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MinLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_level", runtime.ParamLocationQuery, *params.MinLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_level", runtime.ParamLocationQuery, *params.MaxLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skill != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skill", runtime.ParamLocationQuery, *params.Skill); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Drop != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "drop", runtime.ParamLocationQuery, *params.Drop); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetResourceByCodeRequest generates requests for GetResourceByCode
func NewGetResourceByCodeRequest(server string, code string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGenerateTokenRequest generates requests for GenerateToken
func NewGenerateTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/token/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetStatusWithResponse request
	GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error)

	// CreateAccountWithBodyWithResponse request with any body
	CreateAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error)

	CreateAccountWithResponse(ctx context.Context, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error)

	// GetAllCharactersWithResponse request
	GetAllCharactersWithResponse(ctx context.Context, params *GetAllCharactersParams, reqEditors ...RequestEditorFn) (*GetAllCharactersResponse, error)

	// AccountCreateCharacterWithBodyWithResponse request with any body
	AccountCreateCharacterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountCreateCharacterResponse, error)

	AccountCreateCharacterWithResponse(ctx context.Context, body AccountCreateCharacterJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountCreateCharacterResponse, error)

	// GetCharacterByNameWithResponse request
	GetCharacterByNameWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetCharacterByNameResponse, error)

	// GetAllEventsWithResponse request
	GetAllEventsWithResponse(ctx context.Context, params *GetAllEventsParams, reqEditors ...RequestEditorFn) (*GetAllEventsResponse, error)

	// GetAllGrandExchangeItemsWithResponse request
	GetAllGrandExchangeItemsWithResponse(ctx context.Context, params *GetAllGrandExchangeItemsParams, reqEditors ...RequestEditorFn) (*GetAllGrandExchangeItemsResponse, error)

	// GetGrandExchangeItemByCodeWithResponse request
	GetGrandExchangeItemByCodeWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetGrandExchangeItemByCodeResponse, error)

	// GetAllItemsWithResponse request
	GetAllItemsWithResponse(ctx context.Context, params *GetAllItemsParams, reqEditors ...RequestEditorFn) (*GetAllItemsResponse, error)

	// GetItemByCodeWithResponse request
	GetItemByCodeWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetItemByCodeResponse, error)

	// GetAllMapsWithResponse request
	GetAllMapsWithResponse(ctx context.Context, params *GetAllMapsParams, reqEditors ...RequestEditorFn) (*GetAllMapsResponse, error)

	// GetMapDetailWithResponse request
	GetMapDetailWithResponse(ctx context.Context, x int, y int, reqEditors ...RequestEditorFn) (*GetMapDetailResponse, error)

	// GetAllMonstersWithResponse request
	GetAllMonstersWithResponse(ctx context.Context, params *GetAllMonstersParams, reqEditors ...RequestEditorFn) (*GetAllMonstersResponse, error)

	// GetMonsterByCodeWithResponse request
	GetMonsterByCodeWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetMonsterByCodeResponse, error)

	// GetAccountBankGoldWithResponse request
	GetAccountBankGoldWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountBankGoldResponse, error)

	// GetAccountBankItemsWithResponse request
	GetAccountBankItemsWithResponse(ctx context.Context, params *GetAccountBankItemsParams, reqEditors ...RequestEditorFn) (*GetAccountBankItemsResponse, error)

	// AccountChangePasswordWithBodyWithResponse request with any body
	AccountChangePasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountChangePasswordResponse, error)

	AccountChangePasswordWithResponse(ctx context.Context, body AccountChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountChangePasswordResponse, error)

	// GetAccountCharacterListWithResponse request
	GetAccountCharacterListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountCharacterListResponse, error)

	// GetAccountCharactersLogsWithResponse request
	GetAccountCharactersLogsWithResponse(ctx context.Context, params *GetAccountCharactersLogsParams, reqEditors ...RequestEditorFn) (*GetAccountCharactersLogsResponse, error)

	// CharacterBankDepositItemActionWithBodyWithResponse request with any body
	CharacterBankDepositItemActionWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CharacterBankDepositItemActionResponse, error)

	CharacterBankDepositItemActionWithResponse(ctx context.Context, name string, body CharacterBankDepositItemActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CharacterBankDepositItemActionResponse, error)

	// CharacterBankDepositGoldActionWithBodyWithResponse request with any body
	CharacterBankDepositGoldActionWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CharacterBankDepositGoldActionResponse, error)

	CharacterBankDepositGoldActionWithResponse(ctx context.Context, name string, body CharacterBankDepositGoldActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CharacterBankDepositGoldActionResponse, error)

	// CharacterBankWithdrawItemActionWithBodyWithResponse request with any body
	CharacterBankWithdrawItemActionWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CharacterBankWithdrawItemActionResponse, error)

	CharacterBankWithdrawItemActionWithResponse(ctx context.Context, name string, body CharacterBankWithdrawItemActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CharacterBankWithdrawItemActionResponse, error)

	// CharacterBankWithdrawGoldActionWithBodyWithResponse request with any body
	CharacterBankWithdrawGoldActionWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CharacterBankWithdrawGoldActionResponse, error)

	CharacterBankWithdrawGoldActionWithResponse(ctx context.Context, name string, body CharacterBankWithdrawGoldActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CharacterBankWithdrawGoldActionResponse, error)

	// CharacterCraftingActionWithBodyWithResponse request with any body
	CharacterCraftingActionWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CharacterCraftingActionResponse, error)

	CharacterCraftingActionWithResponse(ctx context.Context, name string, body CharacterCraftingActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CharacterCraftingActionResponse, error)

	// CharacterDeleteItemActionWithBodyWithResponse request with any body
	CharacterDeleteItemActionWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CharacterDeleteItemActionResponse, error)

	CharacterDeleteItemActionWithResponse(ctx context.Context, name string, body CharacterDeleteItemActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CharacterDeleteItemActionResponse, error)

	// CharacterEquipActionWithBodyWithResponse request with any body
	CharacterEquipActionWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CharacterEquipActionResponse, error)

	CharacterEquipActionWithResponse(ctx context.Context, name string, body CharacterEquipActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CharacterEquipActionResponse, error)

	// CharacterFightActionWithResponse request
	CharacterFightActionWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*CharacterFightActionResponse, error)

	// CharacterGatheringActionWithResponse request
	CharacterGatheringActionWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*CharacterGatheringActionResponse, error)

	// CharacterGlobalExchangeBuyActionWithBodyWithResponse request with any body
	CharacterGlobalExchangeBuyActionWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CharacterGlobalExchangeBuyActionResponse, error)

	CharacterGlobalExchangeBuyActionWithResponse(ctx context.Context, name string, body CharacterGlobalExchangeBuyActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CharacterGlobalExchangeBuyActionResponse, error)

	// CharacterGlobalExchangeSellActionWithBodyWithResponse request with any body
	CharacterGlobalExchangeSellActionWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CharacterGlobalExchangeSellActionResponse, error)

	CharacterGlobalExchangeSellActionWithResponse(ctx context.Context, name string, body CharacterGlobalExchangeSellActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CharacterGlobalExchangeSellActionResponse, error)

	// CharacterMoveActionWithBodyWithResponse request with any body
	CharacterMoveActionWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CharacterMoveActionResponse, error)

	CharacterMoveActionWithResponse(ctx context.Context, name string, body CharacterMoveActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CharacterMoveActionResponse, error)

	// CharacterRecyclingActionWithBodyWithResponse request with any body
	CharacterRecyclingActionWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CharacterRecyclingActionResponse, error)

	CharacterRecyclingActionWithResponse(ctx context.Context, name string, body CharacterRecyclingActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CharacterRecyclingActionResponse, error)

	// CharacterCompleteTaskActionWithResponse request
	CharacterCompleteTaskActionWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*CharacterCompleteTaskActionResponse, error)

	// CharacterExchangeTaskActionWithResponse request
	CharacterExchangeTaskActionWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*CharacterExchangeTaskActionResponse, error)

	// CharacterAcceptNewTaskActionWithResponse request
	CharacterAcceptNewTaskActionWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*CharacterAcceptNewTaskActionResponse, error)

	// CharacterUnequipActionWithBodyWithResponse request with any body
	CharacterUnequipActionWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CharacterUnequipActionResponse, error)

	CharacterUnequipActionWithResponse(ctx context.Context, name string, body CharacterUnequipActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CharacterUnequipActionResponse, error)

	// GetCharacterLogsWithResponse request
	GetCharacterLogsWithResponse(ctx context.Context, name string, params *GetCharacterLogsParams, reqEditors ...RequestEditorFn) (*GetCharacterLogsResponse, error)

	// GetAllResourcesWithResponse request
	GetAllResourcesWithResponse(ctx context.Context, params *GetAllResourcesParams, reqEditors ...RequestEditorFn) (*GetAllResourcesResponse, error)

	// GetResourceByCodeWithResponse request
	GetResourceByCodeWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetResourceByCodeResponse, error)

	// GenerateTokenWithResponse request
	GenerateTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GenerateTokenResponse, error)
}

type GetStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseSchema
}

// Status returns HTTPResponse.Status
func (r CreateAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllCharactersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageCharacterSchema
}

// Status returns HTTPResponse.Status
func (r GetAllCharactersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllCharactersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountCreateCharacterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharacterResponseSchema
}

// Status returns HTTPResponse.Status
func (r AccountCreateCharacterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountCreateCharacterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharacterByNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharacterResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetCharacterByNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharacterByNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageEventSchema
}

// Status returns HTTPResponse.Status
func (r GetAllEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllGrandExchangeItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageGEItemSchema
}

// Status returns HTTPResponse.Status
func (r GetAllGrandExchangeItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllGrandExchangeItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGrandExchangeItemByCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GEItemResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetGrandExchangeItemByCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGrandExchangeItemByCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageItemSchema
}

// Status returns HTTPResponse.Status
func (r GetAllItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetItemByCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ItemResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetItemByCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetItemByCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllMapsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageMapSchema
}

// Status returns HTTPResponse.Status
func (r GetAllMapsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllMapsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMapDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MapResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetMapDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMapDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllMonstersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageMonsterSchema
}

// Status returns HTTPResponse.Status
func (r GetAllMonstersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllMonstersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMonsterByCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MonsterResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetMonsterByCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMonsterByCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountBankGoldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GoldBankResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetAccountBankGoldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountBankGoldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountBankItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageSimpleItemSchema
}

// Status returns HTTPResponse.Status
func (r GetAccountBankItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountBankItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountChangePasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseSchema
}

// Status returns HTTPResponse.Status
func (r AccountChangePasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountChangePasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountCharacterListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MyCharactersListSchema
}

// Status returns HTTPResponse.Status
func (r GetAccountCharacterListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountCharacterListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountCharactersLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageLogSchema
}

// Status returns HTTPResponse.Status
func (r GetAccountCharactersLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountCharactersLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CharacterBankDepositItemActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActionItemBankResponseSchema
}

// Status returns HTTPResponse.Status
func (r CharacterBankDepositItemActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CharacterBankDepositItemActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CharacterBankDepositGoldActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GoldResponseSchema
}

// Status returns HTTPResponse.Status
func (r CharacterBankDepositGoldActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CharacterBankDepositGoldActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CharacterBankWithdrawItemActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActionItemBankResponseSchema
}

// Status returns HTTPResponse.Status
func (r CharacterBankWithdrawItemActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CharacterBankWithdrawItemActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CharacterBankWithdrawGoldActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GoldResponseSchema
}

// Status returns HTTPResponse.Status
func (r CharacterBankWithdrawGoldActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CharacterBankWithdrawGoldActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CharacterCraftingActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SkillResponseSchema
}

// Status returns HTTPResponse.Status
func (r CharacterCraftingActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CharacterCraftingActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CharacterDeleteItemActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteItemResponseSchema
}

// Status returns HTTPResponse.Status
func (r CharacterDeleteItemActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CharacterDeleteItemActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CharacterEquipActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EquipmentResponseSchema
}

// Status returns HTTPResponse.Status
func (r CharacterEquipActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CharacterEquipActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CharacterFightActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharacterFightResponseSchema
}

// Status returns HTTPResponse.Status
func (r CharacterFightActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CharacterFightActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CharacterGatheringActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SkillResponseSchema
}

// Status returns HTTPResponse.Status
func (r CharacterGatheringActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CharacterGatheringActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CharacterGlobalExchangeBuyActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GETransactionResponseSchema
}

// Status returns HTTPResponse.Status
func (r CharacterGlobalExchangeBuyActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CharacterGlobalExchangeBuyActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CharacterGlobalExchangeSellActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GETransactionResponseSchema
}

// Status returns HTTPResponse.Status
func (r CharacterGlobalExchangeSellActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CharacterGlobalExchangeSellActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CharacterMoveActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharacterMovementResponseSchema
}

// Status returns HTTPResponse.Status
func (r CharacterMoveActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CharacterMoveActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CharacterRecyclingActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RecyclingResponseSchema
}

// Status returns HTTPResponse.Status
func (r CharacterRecyclingActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CharacterRecyclingActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CharacterCompleteTaskActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaskRewardResponseSchema
}

// Status returns HTTPResponse.Status
func (r CharacterCompleteTaskActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CharacterCompleteTaskActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CharacterExchangeTaskActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaskRewardResponseSchema
}

// Status returns HTTPResponse.Status
func (r CharacterExchangeTaskActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CharacterExchangeTaskActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CharacterAcceptNewTaskActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaskResponseSchema
}

// Status returns HTTPResponse.Status
func (r CharacterAcceptNewTaskActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CharacterAcceptNewTaskActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CharacterUnequipActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EquipmentResponseSchema
}

// Status returns HTTPResponse.Status
func (r CharacterUnequipActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CharacterUnequipActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharacterLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageLogSchema
}

// Status returns HTTPResponse.Status
func (r GetCharacterLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharacterLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageResourceSchema
}

// Status returns HTTPResponse.Status
func (r GetAllResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResourceByCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetResourceByCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResourceByCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenerateTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenResponseSchema
}

// Status returns HTTPResponse.Status
func (r GenerateTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenerateTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetStatusWithResponse request returning *GetStatusResponse
func (c *ClientWithResponses) GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error) {
	rsp, err := c.GetStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusResponse(rsp)
}

// CreateAccountWithBodyWithResponse request with arbitrary body returning *CreateAccountResponse
func (c *ClientWithResponses) CreateAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error) {
	rsp, err := c.CreateAccountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAccountResponse(rsp)
}

func (c *ClientWithResponses) CreateAccountWithResponse(ctx context.Context, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error) {
	rsp, err := c.CreateAccount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAccountResponse(rsp)
}

// GetAllCharactersWithResponse request returning *GetAllCharactersResponse
func (c *ClientWithResponses) GetAllCharactersWithResponse(ctx context.Context, params *GetAllCharactersParams, reqEditors ...RequestEditorFn) (*GetAllCharactersResponse, error) {
	rsp, err := c.GetAllCharacters(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllCharactersResponse(rsp)
}

// AccountCreateCharacterWithBodyWithResponse request with arbitrary body returning *AccountCreateCharacterResponse
func (c *ClientWithResponses) AccountCreateCharacterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountCreateCharacterResponse, error) {
	rsp, err := c.AccountCreateCharacterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountCreateCharacterResponse(rsp)
}

func (c *ClientWithResponses) AccountCreateCharacterWithResponse(ctx context.Context, body AccountCreateCharacterJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountCreateCharacterResponse, error) {
	rsp, err := c.AccountCreateCharacter(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountCreateCharacterResponse(rsp)
}

// GetCharacterByNameWithResponse request returning *GetCharacterByNameResponse
func (c *ClientWithResponses) GetCharacterByNameWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetCharacterByNameResponse, error) {
	rsp, err := c.GetCharacterByName(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharacterByNameResponse(rsp)
}

// GetAllEventsWithResponse request returning *GetAllEventsResponse
func (c *ClientWithResponses) GetAllEventsWithResponse(ctx context.Context, params *GetAllEventsParams, reqEditors ...RequestEditorFn) (*GetAllEventsResponse, error) {
	rsp, err := c.GetAllEvents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllEventsResponse(rsp)
}

// GetAllGrandExchangeItemsWithResponse request returning *GetAllGrandExchangeItemsResponse
func (c *ClientWithResponses) GetAllGrandExchangeItemsWithResponse(ctx context.Context, params *GetAllGrandExchangeItemsParams, reqEditors ...RequestEditorFn) (*GetAllGrandExchangeItemsResponse, error) {
	rsp, err := c.GetAllGrandExchangeItems(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllGrandExchangeItemsResponse(rsp)
}

// GetGrandExchangeItemByCodeWithResponse request returning *GetGrandExchangeItemByCodeResponse
func (c *ClientWithResponses) GetGrandExchangeItemByCodeWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetGrandExchangeItemByCodeResponse, error) {
	rsp, err := c.GetGrandExchangeItemByCode(ctx, code, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGrandExchangeItemByCodeResponse(rsp)
}

// GetAllItemsWithResponse request returning *GetAllItemsResponse
func (c *ClientWithResponses) GetAllItemsWithResponse(ctx context.Context, params *GetAllItemsParams, reqEditors ...RequestEditorFn) (*GetAllItemsResponse, error) {
	rsp, err := c.GetAllItems(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllItemsResponse(rsp)
}

// GetItemByCodeWithResponse request returning *GetItemByCodeResponse
func (c *ClientWithResponses) GetItemByCodeWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetItemByCodeResponse, error) {
	rsp, err := c.GetItemByCode(ctx, code, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetItemByCodeResponse(rsp)
}

// GetAllMapsWithResponse request returning *GetAllMapsResponse
func (c *ClientWithResponses) GetAllMapsWithResponse(ctx context.Context, params *GetAllMapsParams, reqEditors ...RequestEditorFn) (*GetAllMapsResponse, error) {
	rsp, err := c.GetAllMaps(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllMapsResponse(rsp)
}

// GetMapDetailWithResponse request returning *GetMapDetailResponse
func (c *ClientWithResponses) GetMapDetailWithResponse(ctx context.Context, x int, y int, reqEditors ...RequestEditorFn) (*GetMapDetailResponse, error) {
	rsp, err := c.GetMapDetail(ctx, x, y, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMapDetailResponse(rsp)
}

// GetAllMonstersWithResponse request returning *GetAllMonstersResponse
func (c *ClientWithResponses) GetAllMonstersWithResponse(ctx context.Context, params *GetAllMonstersParams, reqEditors ...RequestEditorFn) (*GetAllMonstersResponse, error) {
	rsp, err := c.GetAllMonsters(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllMonstersResponse(rsp)
}

// GetMonsterByCodeWithResponse request returning *GetMonsterByCodeResponse
func (c *ClientWithResponses) GetMonsterByCodeWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetMonsterByCodeResponse, error) {
	rsp, err := c.GetMonsterByCode(ctx, code, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMonsterByCodeResponse(rsp)
}

// GetAccountBankGoldWithResponse request returning *GetAccountBankGoldResponse
func (c *ClientWithResponses) GetAccountBankGoldWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountBankGoldResponse, error) {
	rsp, err := c.GetAccountBankGold(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountBankGoldResponse(rsp)
}

// GetAccountBankItemsWithResponse request returning *GetAccountBankItemsResponse
func (c *ClientWithResponses) GetAccountBankItemsWithResponse(ctx context.Context, params *GetAccountBankItemsParams, reqEditors ...RequestEditorFn) (*GetAccountBankItemsResponse, error) {
	rsp, err := c.GetAccountBankItems(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountBankItemsResponse(rsp)
}

// AccountChangePasswordWithBodyWithResponse request with arbitrary body returning *AccountChangePasswordResponse
func (c *ClientWithResponses) AccountChangePasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountChangePasswordResponse, error) {
	rsp, err := c.AccountChangePasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountChangePasswordResponse(rsp)
}

func (c *ClientWithResponses) AccountChangePasswordWithResponse(ctx context.Context, body AccountChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountChangePasswordResponse, error) {
	rsp, err := c.AccountChangePassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountChangePasswordResponse(rsp)
}

// GetAccountCharacterListWithResponse request returning *GetAccountCharacterListResponse
func (c *ClientWithResponses) GetAccountCharacterListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountCharacterListResponse, error) {
	rsp, err := c.GetAccountCharacterList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountCharacterListResponse(rsp)
}

// GetAccountCharactersLogsWithResponse request returning *GetAccountCharactersLogsResponse
func (c *ClientWithResponses) GetAccountCharactersLogsWithResponse(ctx context.Context, params *GetAccountCharactersLogsParams, reqEditors ...RequestEditorFn) (*GetAccountCharactersLogsResponse, error) {
	rsp, err := c.GetAccountCharactersLogs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountCharactersLogsResponse(rsp)
}

// CharacterBankDepositItemActionWithBodyWithResponse request with arbitrary body returning *CharacterBankDepositItemActionResponse
func (c *ClientWithResponses) CharacterBankDepositItemActionWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CharacterBankDepositItemActionResponse, error) {
	rsp, err := c.CharacterBankDepositItemActionWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCharacterBankDepositItemActionResponse(rsp)
}

func (c *ClientWithResponses) CharacterBankDepositItemActionWithResponse(ctx context.Context, name string, body CharacterBankDepositItemActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CharacterBankDepositItemActionResponse, error) {
	rsp, err := c.CharacterBankDepositItemAction(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCharacterBankDepositItemActionResponse(rsp)
}

// CharacterBankDepositGoldActionWithBodyWithResponse request with arbitrary body returning *CharacterBankDepositGoldActionResponse
func (c *ClientWithResponses) CharacterBankDepositGoldActionWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CharacterBankDepositGoldActionResponse, error) {
	rsp, err := c.CharacterBankDepositGoldActionWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCharacterBankDepositGoldActionResponse(rsp)
}

func (c *ClientWithResponses) CharacterBankDepositGoldActionWithResponse(ctx context.Context, name string, body CharacterBankDepositGoldActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CharacterBankDepositGoldActionResponse, error) {
	rsp, err := c.CharacterBankDepositGoldAction(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCharacterBankDepositGoldActionResponse(rsp)
}

// CharacterBankWithdrawItemActionWithBodyWithResponse request with arbitrary body returning *CharacterBankWithdrawItemActionResponse
func (c *ClientWithResponses) CharacterBankWithdrawItemActionWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CharacterBankWithdrawItemActionResponse, error) {
	rsp, err := c.CharacterBankWithdrawItemActionWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCharacterBankWithdrawItemActionResponse(rsp)
}

func (c *ClientWithResponses) CharacterBankWithdrawItemActionWithResponse(ctx context.Context, name string, body CharacterBankWithdrawItemActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CharacterBankWithdrawItemActionResponse, error) {
	rsp, err := c.CharacterBankWithdrawItemAction(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCharacterBankWithdrawItemActionResponse(rsp)
}

// CharacterBankWithdrawGoldActionWithBodyWithResponse request with arbitrary body returning *CharacterBankWithdrawGoldActionResponse
func (c *ClientWithResponses) CharacterBankWithdrawGoldActionWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CharacterBankWithdrawGoldActionResponse, error) {
	rsp, err := c.CharacterBankWithdrawGoldActionWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCharacterBankWithdrawGoldActionResponse(rsp)
}

func (c *ClientWithResponses) CharacterBankWithdrawGoldActionWithResponse(ctx context.Context, name string, body CharacterBankWithdrawGoldActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CharacterBankWithdrawGoldActionResponse, error) {
	rsp, err := c.CharacterBankWithdrawGoldAction(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCharacterBankWithdrawGoldActionResponse(rsp)
}

// CharacterCraftingActionWithBodyWithResponse request with arbitrary body returning *CharacterCraftingActionResponse
func (c *ClientWithResponses) CharacterCraftingActionWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CharacterCraftingActionResponse, error) {
	rsp, err := c.CharacterCraftingActionWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCharacterCraftingActionResponse(rsp)
}

func (c *ClientWithResponses) CharacterCraftingActionWithResponse(ctx context.Context, name string, body CharacterCraftingActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CharacterCraftingActionResponse, error) {
	rsp, err := c.CharacterCraftingAction(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCharacterCraftingActionResponse(rsp)
}

// CharacterDeleteItemActionWithBodyWithResponse request with arbitrary body returning *CharacterDeleteItemActionResponse
func (c *ClientWithResponses) CharacterDeleteItemActionWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CharacterDeleteItemActionResponse, error) {
	rsp, err := c.CharacterDeleteItemActionWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCharacterDeleteItemActionResponse(rsp)
}

func (c *ClientWithResponses) CharacterDeleteItemActionWithResponse(ctx context.Context, name string, body CharacterDeleteItemActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CharacterDeleteItemActionResponse, error) {
	rsp, err := c.CharacterDeleteItemAction(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCharacterDeleteItemActionResponse(rsp)
}

// CharacterEquipActionWithBodyWithResponse request with arbitrary body returning *CharacterEquipActionResponse
func (c *ClientWithResponses) CharacterEquipActionWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CharacterEquipActionResponse, error) {
	rsp, err := c.CharacterEquipActionWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCharacterEquipActionResponse(rsp)
}

func (c *ClientWithResponses) CharacterEquipActionWithResponse(ctx context.Context, name string, body CharacterEquipActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CharacterEquipActionResponse, error) {
	rsp, err := c.CharacterEquipAction(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCharacterEquipActionResponse(rsp)
}

// CharacterFightActionWithResponse request returning *CharacterFightActionResponse
func (c *ClientWithResponses) CharacterFightActionWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*CharacterFightActionResponse, error) {
	rsp, err := c.CharacterFightAction(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCharacterFightActionResponse(rsp)
}

// CharacterGatheringActionWithResponse request returning *CharacterGatheringActionResponse
func (c *ClientWithResponses) CharacterGatheringActionWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*CharacterGatheringActionResponse, error) {
	rsp, err := c.CharacterGatheringAction(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCharacterGatheringActionResponse(rsp)
}

// CharacterGlobalExchangeBuyActionWithBodyWithResponse request with arbitrary body returning *CharacterGlobalExchangeBuyActionResponse
func (c *ClientWithResponses) CharacterGlobalExchangeBuyActionWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CharacterGlobalExchangeBuyActionResponse, error) {
	rsp, err := c.CharacterGlobalExchangeBuyActionWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCharacterGlobalExchangeBuyActionResponse(rsp)
}

func (c *ClientWithResponses) CharacterGlobalExchangeBuyActionWithResponse(ctx context.Context, name string, body CharacterGlobalExchangeBuyActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CharacterGlobalExchangeBuyActionResponse, error) {
	rsp, err := c.CharacterGlobalExchangeBuyAction(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCharacterGlobalExchangeBuyActionResponse(rsp)
}

// CharacterGlobalExchangeSellActionWithBodyWithResponse request with arbitrary body returning *CharacterGlobalExchangeSellActionResponse
func (c *ClientWithResponses) CharacterGlobalExchangeSellActionWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CharacterGlobalExchangeSellActionResponse, error) {
	rsp, err := c.CharacterGlobalExchangeSellActionWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCharacterGlobalExchangeSellActionResponse(rsp)
}

func (c *ClientWithResponses) CharacterGlobalExchangeSellActionWithResponse(ctx context.Context, name string, body CharacterGlobalExchangeSellActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CharacterGlobalExchangeSellActionResponse, error) {
	rsp, err := c.CharacterGlobalExchangeSellAction(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCharacterGlobalExchangeSellActionResponse(rsp)
}

// CharacterMoveActionWithBodyWithResponse request with arbitrary body returning *CharacterMoveActionResponse
func (c *ClientWithResponses) CharacterMoveActionWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CharacterMoveActionResponse, error) {
	rsp, err := c.CharacterMoveActionWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCharacterMoveActionResponse(rsp)
}

func (c *ClientWithResponses) CharacterMoveActionWithResponse(ctx context.Context, name string, body CharacterMoveActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CharacterMoveActionResponse, error) {
	rsp, err := c.CharacterMoveAction(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCharacterMoveActionResponse(rsp)
}

// CharacterRecyclingActionWithBodyWithResponse request with arbitrary body returning *CharacterRecyclingActionResponse
func (c *ClientWithResponses) CharacterRecyclingActionWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CharacterRecyclingActionResponse, error) {
	rsp, err := c.CharacterRecyclingActionWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCharacterRecyclingActionResponse(rsp)
}

func (c *ClientWithResponses) CharacterRecyclingActionWithResponse(ctx context.Context, name string, body CharacterRecyclingActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CharacterRecyclingActionResponse, error) {
	rsp, err := c.CharacterRecyclingAction(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCharacterRecyclingActionResponse(rsp)
}

// CharacterCompleteTaskActionWithResponse request returning *CharacterCompleteTaskActionResponse
func (c *ClientWithResponses) CharacterCompleteTaskActionWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*CharacterCompleteTaskActionResponse, error) {
	rsp, err := c.CharacterCompleteTaskAction(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCharacterCompleteTaskActionResponse(rsp)
}

// CharacterExchangeTaskActionWithResponse request returning *CharacterExchangeTaskActionResponse
func (c *ClientWithResponses) CharacterExchangeTaskActionWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*CharacterExchangeTaskActionResponse, error) {
	rsp, err := c.CharacterExchangeTaskAction(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCharacterExchangeTaskActionResponse(rsp)
}

// CharacterAcceptNewTaskActionWithResponse request returning *CharacterAcceptNewTaskActionResponse
func (c *ClientWithResponses) CharacterAcceptNewTaskActionWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*CharacterAcceptNewTaskActionResponse, error) {
	rsp, err := c.CharacterAcceptNewTaskAction(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCharacterAcceptNewTaskActionResponse(rsp)
}

// CharacterUnequipActionWithBodyWithResponse request with arbitrary body returning *CharacterUnequipActionResponse
func (c *ClientWithResponses) CharacterUnequipActionWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CharacterUnequipActionResponse, error) {
	rsp, err := c.CharacterUnequipActionWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCharacterUnequipActionResponse(rsp)
}

func (c *ClientWithResponses) CharacterUnequipActionWithResponse(ctx context.Context, name string, body CharacterUnequipActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CharacterUnequipActionResponse, error) {
	rsp, err := c.CharacterUnequipAction(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCharacterUnequipActionResponse(rsp)
}

// GetCharacterLogsWithResponse request returning *GetCharacterLogsResponse
func (c *ClientWithResponses) GetCharacterLogsWithResponse(ctx context.Context, name string, params *GetCharacterLogsParams, reqEditors ...RequestEditorFn) (*GetCharacterLogsResponse, error) {
	rsp, err := c.GetCharacterLogs(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharacterLogsResponse(rsp)
}

// GetAllResourcesWithResponse request returning *GetAllResourcesResponse
func (c *ClientWithResponses) GetAllResourcesWithResponse(ctx context.Context, params *GetAllResourcesParams, reqEditors ...RequestEditorFn) (*GetAllResourcesResponse, error) {
	rsp, err := c.GetAllResources(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllResourcesResponse(rsp)
}

// GetResourceByCodeWithResponse request returning *GetResourceByCodeResponse
func (c *ClientWithResponses) GetResourceByCodeWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetResourceByCodeResponse, error) {
	rsp, err := c.GetResourceByCode(ctx, code, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResourceByCodeResponse(rsp)
}

// GenerateTokenWithResponse request returning *GenerateTokenResponse
func (c *ClientWithResponses) GenerateTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GenerateTokenResponse, error) {
	rsp, err := c.GenerateToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateTokenResponse(rsp)
}

// ParseGetStatusResponse parses an HTTP response from a GetStatusWithResponse call
func ParseGetStatusResponse(rsp *http.Response) (*GetStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAccountResponse parses an HTTP response from a CreateAccountWithResponse call
func ParseCreateAccountResponse(rsp *http.Response) (*CreateAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllCharactersResponse parses an HTTP response from a GetAllCharactersWithResponse call
func ParseGetAllCharactersResponse(rsp *http.Response) (*GetAllCharactersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllCharactersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageCharacterSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccountCreateCharacterResponse parses an HTTP response from a AccountCreateCharacterWithResponse call
func ParseAccountCreateCharacterResponse(rsp *http.Response) (*AccountCreateCharacterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountCreateCharacterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharacterResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCharacterByNameResponse parses an HTTP response from a GetCharacterByNameWithResponse call
func ParseGetCharacterByNameResponse(rsp *http.Response) (*GetCharacterByNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharacterByNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharacterResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllEventsResponse parses an HTTP response from a GetAllEventsWithResponse call
func ParseGetAllEventsResponse(rsp *http.Response) (*GetAllEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageEventSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllGrandExchangeItemsResponse parses an HTTP response from a GetAllGrandExchangeItemsWithResponse call
func ParseGetAllGrandExchangeItemsResponse(rsp *http.Response) (*GetAllGrandExchangeItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllGrandExchangeItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageGEItemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGrandExchangeItemByCodeResponse parses an HTTP response from a GetGrandExchangeItemByCodeWithResponse call
func ParseGetGrandExchangeItemByCodeResponse(rsp *http.Response) (*GetGrandExchangeItemByCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGrandExchangeItemByCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GEItemResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllItemsResponse parses an HTTP response from a GetAllItemsWithResponse call
func ParseGetAllItemsResponse(rsp *http.Response) (*GetAllItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageItemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetItemByCodeResponse parses an HTTP response from a GetItemByCodeWithResponse call
func ParseGetItemByCodeResponse(rsp *http.Response) (*GetItemByCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetItemByCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ItemResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllMapsResponse parses an HTTP response from a GetAllMapsWithResponse call
func ParseGetAllMapsResponse(rsp *http.Response) (*GetAllMapsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllMapsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageMapSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMapDetailResponse parses an HTTP response from a GetMapDetailWithResponse call
func ParseGetMapDetailResponse(rsp *http.Response) (*GetMapDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMapDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MapResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllMonstersResponse parses an HTTP response from a GetAllMonstersWithResponse call
func ParseGetAllMonstersResponse(rsp *http.Response) (*GetAllMonstersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllMonstersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageMonsterSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMonsterByCodeResponse parses an HTTP response from a GetMonsterByCodeWithResponse call
func ParseGetMonsterByCodeResponse(rsp *http.Response) (*GetMonsterByCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMonsterByCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MonsterResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAccountBankGoldResponse parses an HTTP response from a GetAccountBankGoldWithResponse call
func ParseGetAccountBankGoldResponse(rsp *http.Response) (*GetAccountBankGoldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountBankGoldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GoldBankResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAccountBankItemsResponse parses an HTTP response from a GetAccountBankItemsWithResponse call
func ParseGetAccountBankItemsResponse(rsp *http.Response) (*GetAccountBankItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountBankItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageSimpleItemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccountChangePasswordResponse parses an HTTP response from a AccountChangePasswordWithResponse call
func ParseAccountChangePasswordResponse(rsp *http.Response) (*AccountChangePasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountChangePasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAccountCharacterListResponse parses an HTTP response from a GetAccountCharacterListWithResponse call
func ParseGetAccountCharacterListResponse(rsp *http.Response) (*GetAccountCharacterListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountCharacterListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MyCharactersListSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAccountCharactersLogsResponse parses an HTTP response from a GetAccountCharactersLogsWithResponse call
func ParseGetAccountCharactersLogsResponse(rsp *http.Response) (*GetAccountCharactersLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountCharactersLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageLogSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCharacterBankDepositItemActionResponse parses an HTTP response from a CharacterBankDepositItemActionWithResponse call
func ParseCharacterBankDepositItemActionResponse(rsp *http.Response) (*CharacterBankDepositItemActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CharacterBankDepositItemActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActionItemBankResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCharacterBankDepositGoldActionResponse parses an HTTP response from a CharacterBankDepositGoldActionWithResponse call
func ParseCharacterBankDepositGoldActionResponse(rsp *http.Response) (*CharacterBankDepositGoldActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CharacterBankDepositGoldActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GoldResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCharacterBankWithdrawItemActionResponse parses an HTTP response from a CharacterBankWithdrawItemActionWithResponse call
func ParseCharacterBankWithdrawItemActionResponse(rsp *http.Response) (*CharacterBankWithdrawItemActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CharacterBankWithdrawItemActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActionItemBankResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCharacterBankWithdrawGoldActionResponse parses an HTTP response from a CharacterBankWithdrawGoldActionWithResponse call
func ParseCharacterBankWithdrawGoldActionResponse(rsp *http.Response) (*CharacterBankWithdrawGoldActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CharacterBankWithdrawGoldActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GoldResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCharacterCraftingActionResponse parses an HTTP response from a CharacterCraftingActionWithResponse call
func ParseCharacterCraftingActionResponse(rsp *http.Response) (*CharacterCraftingActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CharacterCraftingActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SkillResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCharacterDeleteItemActionResponse parses an HTTP response from a CharacterDeleteItemActionWithResponse call
func ParseCharacterDeleteItemActionResponse(rsp *http.Response) (*CharacterDeleteItemActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CharacterDeleteItemActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteItemResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCharacterEquipActionResponse parses an HTTP response from a CharacterEquipActionWithResponse call
func ParseCharacterEquipActionResponse(rsp *http.Response) (*CharacterEquipActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CharacterEquipActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EquipmentResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCharacterFightActionResponse parses an HTTP response from a CharacterFightActionWithResponse call
func ParseCharacterFightActionResponse(rsp *http.Response) (*CharacterFightActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CharacterFightActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharacterFightResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCharacterGatheringActionResponse parses an HTTP response from a CharacterGatheringActionWithResponse call
func ParseCharacterGatheringActionResponse(rsp *http.Response) (*CharacterGatheringActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CharacterGatheringActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SkillResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCharacterGlobalExchangeBuyActionResponse parses an HTTP response from a CharacterGlobalExchangeBuyActionWithResponse call
func ParseCharacterGlobalExchangeBuyActionResponse(rsp *http.Response) (*CharacterGlobalExchangeBuyActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CharacterGlobalExchangeBuyActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GETransactionResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCharacterGlobalExchangeSellActionResponse parses an HTTP response from a CharacterGlobalExchangeSellActionWithResponse call
func ParseCharacterGlobalExchangeSellActionResponse(rsp *http.Response) (*CharacterGlobalExchangeSellActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CharacterGlobalExchangeSellActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GETransactionResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCharacterMoveActionResponse parses an HTTP response from a CharacterMoveActionWithResponse call
func ParseCharacterMoveActionResponse(rsp *http.Response) (*CharacterMoveActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CharacterMoveActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharacterMovementResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCharacterRecyclingActionResponse parses an HTTP response from a CharacterRecyclingActionWithResponse call
func ParseCharacterRecyclingActionResponse(rsp *http.Response) (*CharacterRecyclingActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CharacterRecyclingActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RecyclingResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCharacterCompleteTaskActionResponse parses an HTTP response from a CharacterCompleteTaskActionWithResponse call
func ParseCharacterCompleteTaskActionResponse(rsp *http.Response) (*CharacterCompleteTaskActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CharacterCompleteTaskActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskRewardResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCharacterExchangeTaskActionResponse parses an HTTP response from a CharacterExchangeTaskActionWithResponse call
func ParseCharacterExchangeTaskActionResponse(rsp *http.Response) (*CharacterExchangeTaskActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CharacterExchangeTaskActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskRewardResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCharacterAcceptNewTaskActionResponse parses an HTTP response from a CharacterAcceptNewTaskActionWithResponse call
func ParseCharacterAcceptNewTaskActionResponse(rsp *http.Response) (*CharacterAcceptNewTaskActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CharacterAcceptNewTaskActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCharacterUnequipActionResponse parses an HTTP response from a CharacterUnequipActionWithResponse call
func ParseCharacterUnequipActionResponse(rsp *http.Response) (*CharacterUnequipActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CharacterUnequipActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EquipmentResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCharacterLogsResponse parses an HTTP response from a GetCharacterLogsWithResponse call
func ParseGetCharacterLogsResponse(rsp *http.Response) (*GetCharacterLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharacterLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageLogSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllResourcesResponse parses an HTTP response from a GetAllResourcesWithResponse call
func ParseGetAllResourcesResponse(rsp *http.Response) (*GetAllResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageResourceSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetResourceByCodeResponse parses an HTTP response from a GetResourceByCodeWithResponse call
func ParseGetResourceByCodeResponse(rsp *http.Response) (*GetResourceByCodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResourceByCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGenerateTokenResponse parses an HTTP response from a GenerateTokenWithResponse call
func ParseGenerateTokenResponse(rsp *http.Response) (*GenerateTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenerateTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
