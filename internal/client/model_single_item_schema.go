/*
Artifacts API

 Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SingleItemSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SingleItemSchema{}

// SingleItemSchema struct for SingleItemSchema
type SingleItemSchema struct {
	// Item information.
	Item ItemSchema `json:"item"`
	Ge NullableGEItemSchema `json:"ge,omitempty"`
}

type _SingleItemSchema SingleItemSchema

// NewSingleItemSchema instantiates a new SingleItemSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSingleItemSchema(item ItemSchema) *SingleItemSchema {
	this := SingleItemSchema{}
	this.Item = item
	return &this
}

// NewSingleItemSchemaWithDefaults instantiates a new SingleItemSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSingleItemSchemaWithDefaults() *SingleItemSchema {
	this := SingleItemSchema{}
	return &this
}

// GetItem returns the Item field value
func (o *SingleItemSchema) GetItem() ItemSchema {
	if o == nil {
		var ret ItemSchema
		return ret
	}

	return o.Item
}

// GetItemOk returns a tuple with the Item field value
// and a boolean to check if the value has been set.
func (o *SingleItemSchema) GetItemOk() (*ItemSchema, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Item, true
}

// SetItem sets field value
func (o *SingleItemSchema) SetItem(v ItemSchema) {
	o.Item = v
}

// GetGe returns the Ge field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SingleItemSchema) GetGe() GEItemSchema {
	if o == nil || IsNil(o.Ge.Get()) {
		var ret GEItemSchema
		return ret
	}
	return *o.Ge.Get()
}

// GetGeOk returns a tuple with the Ge field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SingleItemSchema) GetGeOk() (*GEItemSchema, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ge.Get(), o.Ge.IsSet()
}

// HasGe returns a boolean if a field has been set.
func (o *SingleItemSchema) HasGe() bool {
	if o != nil && o.Ge.IsSet() {
		return true
	}

	return false
}

// SetGe gets a reference to the given NullableGEItemSchema and assigns it to the Ge field.
func (o *SingleItemSchema) SetGe(v GEItemSchema) {
	o.Ge.Set(&v)
}
// SetGeNil sets the value for Ge to be an explicit nil
func (o *SingleItemSchema) SetGeNil() {
	o.Ge.Set(nil)
}

// UnsetGe ensures that no value is present for Ge, not even an explicit nil
func (o *SingleItemSchema) UnsetGe() {
	o.Ge.Unset()
}

func (o SingleItemSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SingleItemSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["item"] = o.Item
	if o.Ge.IsSet() {
		toSerialize["ge"] = o.Ge.Get()
	}
	return toSerialize, nil
}

func (o *SingleItemSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"item",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSingleItemSchema := _SingleItemSchema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSingleItemSchema)

	if err != nil {
		return err
	}

	*o = SingleItemSchema(varSingleItemSchema)

	return err
}

type NullableSingleItemSchema struct {
	value *SingleItemSchema
	isSet bool
}

func (v NullableSingleItemSchema) Get() *SingleItemSchema {
	return v.value
}

func (v *NullableSingleItemSchema) Set(val *SingleItemSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableSingleItemSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableSingleItemSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSingleItemSchema(val *SingleItemSchema) *NullableSingleItemSchema {
	return &NullableSingleItemSchema{value: val, isSet: true}
}

func (v NullableSingleItemSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSingleItemSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


