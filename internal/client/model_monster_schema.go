/*
Artifacts API

 Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MonsterSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MonsterSchema{}

// MonsterSchema struct for MonsterSchema
type MonsterSchema struct {
	// Name of the monster.
	Name string `json:"name"`
	// The code of the monster. This is the monster's unique identifier (ID).
	Code string `json:"code"`
	// Monster level.
	Level int32 `json:"level"`
	// Monster hit points.
	Hp int32 `json:"hp"`
	// Monster fire attack.
	AttackFire int32 `json:"attack_fire"`
	// Monster earth attack.
	AttackEarth int32 `json:"attack_earth"`
	// Monster water attack.
	AttackWater int32 `json:"attack_water"`
	// Monster air attack.
	AttackAir int32 `json:"attack_air"`
	// Monster % fire resistance.
	ResFire int32 `json:"res_fire"`
	// Monster % earth resistance.
	ResEarth int32 `json:"res_earth"`
	// Monster % water resistance.
	ResWater int32 `json:"res_water"`
	// Monster % air resistance.
	ResAir int32 `json:"res_air"`
	// Monster golds drop. This is a minimum-maximum range (example: 0-5, the player drops between 0 and 5 golds after killing the monster.). 
	Golds string `json:"golds"`
	// Monster drops. This is a list of items that the monster drops after killing the monster. 
	Drops []interface{} `json:"drops"`
}

type _MonsterSchema MonsterSchema

// NewMonsterSchema instantiates a new MonsterSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonsterSchema(name string, code string, level int32, hp int32, attackFire int32, attackEarth int32, attackWater int32, attackAir int32, resFire int32, resEarth int32, resWater int32, resAir int32, golds string, drops []interface{}) *MonsterSchema {
	this := MonsterSchema{}
	this.Name = name
	this.Code = code
	this.Level = level
	this.Hp = hp
	this.AttackFire = attackFire
	this.AttackEarth = attackEarth
	this.AttackWater = attackWater
	this.AttackAir = attackAir
	this.ResFire = resFire
	this.ResEarth = resEarth
	this.ResWater = resWater
	this.ResAir = resAir
	this.Golds = golds
	this.Drops = drops
	return &this
}

// NewMonsterSchemaWithDefaults instantiates a new MonsterSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonsterSchemaWithDefaults() *MonsterSchema {
	this := MonsterSchema{}
	return &this
}

// GetName returns the Name field value
func (o *MonsterSchema) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MonsterSchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MonsterSchema) SetName(v string) {
	o.Name = v
}

// GetCode returns the Code field value
func (o *MonsterSchema) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *MonsterSchema) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *MonsterSchema) SetCode(v string) {
	o.Code = v
}

// GetLevel returns the Level field value
func (o *MonsterSchema) GetLevel() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Level
}

// GetLevelOk returns a tuple with the Level field value
// and a boolean to check if the value has been set.
func (o *MonsterSchema) GetLevelOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Level, true
}

// SetLevel sets field value
func (o *MonsterSchema) SetLevel(v int32) {
	o.Level = v
}

// GetHp returns the Hp field value
func (o *MonsterSchema) GetHp() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Hp
}

// GetHpOk returns a tuple with the Hp field value
// and a boolean to check if the value has been set.
func (o *MonsterSchema) GetHpOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hp, true
}

// SetHp sets field value
func (o *MonsterSchema) SetHp(v int32) {
	o.Hp = v
}

// GetAttackFire returns the AttackFire field value
func (o *MonsterSchema) GetAttackFire() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AttackFire
}

// GetAttackFireOk returns a tuple with the AttackFire field value
// and a boolean to check if the value has been set.
func (o *MonsterSchema) GetAttackFireOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AttackFire, true
}

// SetAttackFire sets field value
func (o *MonsterSchema) SetAttackFire(v int32) {
	o.AttackFire = v
}

// GetAttackEarth returns the AttackEarth field value
func (o *MonsterSchema) GetAttackEarth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AttackEarth
}

// GetAttackEarthOk returns a tuple with the AttackEarth field value
// and a boolean to check if the value has been set.
func (o *MonsterSchema) GetAttackEarthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AttackEarth, true
}

// SetAttackEarth sets field value
func (o *MonsterSchema) SetAttackEarth(v int32) {
	o.AttackEarth = v
}

// GetAttackWater returns the AttackWater field value
func (o *MonsterSchema) GetAttackWater() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AttackWater
}

// GetAttackWaterOk returns a tuple with the AttackWater field value
// and a boolean to check if the value has been set.
func (o *MonsterSchema) GetAttackWaterOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AttackWater, true
}

// SetAttackWater sets field value
func (o *MonsterSchema) SetAttackWater(v int32) {
	o.AttackWater = v
}

// GetAttackAir returns the AttackAir field value
func (o *MonsterSchema) GetAttackAir() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AttackAir
}

// GetAttackAirOk returns a tuple with the AttackAir field value
// and a boolean to check if the value has been set.
func (o *MonsterSchema) GetAttackAirOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AttackAir, true
}

// SetAttackAir sets field value
func (o *MonsterSchema) SetAttackAir(v int32) {
	o.AttackAir = v
}

// GetResFire returns the ResFire field value
func (o *MonsterSchema) GetResFire() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ResFire
}

// GetResFireOk returns a tuple with the ResFire field value
// and a boolean to check if the value has been set.
func (o *MonsterSchema) GetResFireOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResFire, true
}

// SetResFire sets field value
func (o *MonsterSchema) SetResFire(v int32) {
	o.ResFire = v
}

// GetResEarth returns the ResEarth field value
func (o *MonsterSchema) GetResEarth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ResEarth
}

// GetResEarthOk returns a tuple with the ResEarth field value
// and a boolean to check if the value has been set.
func (o *MonsterSchema) GetResEarthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResEarth, true
}

// SetResEarth sets field value
func (o *MonsterSchema) SetResEarth(v int32) {
	o.ResEarth = v
}

// GetResWater returns the ResWater field value
func (o *MonsterSchema) GetResWater() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ResWater
}

// GetResWaterOk returns a tuple with the ResWater field value
// and a boolean to check if the value has been set.
func (o *MonsterSchema) GetResWaterOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResWater, true
}

// SetResWater sets field value
func (o *MonsterSchema) SetResWater(v int32) {
	o.ResWater = v
}

// GetResAir returns the ResAir field value
func (o *MonsterSchema) GetResAir() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ResAir
}

// GetResAirOk returns a tuple with the ResAir field value
// and a boolean to check if the value has been set.
func (o *MonsterSchema) GetResAirOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResAir, true
}

// SetResAir sets field value
func (o *MonsterSchema) SetResAir(v int32) {
	o.ResAir = v
}

// GetGolds returns the Golds field value
func (o *MonsterSchema) GetGolds() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Golds
}

// GetGoldsOk returns a tuple with the Golds field value
// and a boolean to check if the value has been set.
func (o *MonsterSchema) GetGoldsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Golds, true
}

// SetGolds sets field value
func (o *MonsterSchema) SetGolds(v string) {
	o.Golds = v
}

// GetDrops returns the Drops field value
func (o *MonsterSchema) GetDrops() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.Drops
}

// GetDropsOk returns a tuple with the Drops field value
// and a boolean to check if the value has been set.
func (o *MonsterSchema) GetDropsOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Drops, true
}

// SetDrops sets field value
func (o *MonsterSchema) SetDrops(v []interface{}) {
	o.Drops = v
}

func (o MonsterSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MonsterSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["code"] = o.Code
	toSerialize["level"] = o.Level
	toSerialize["hp"] = o.Hp
	toSerialize["attack_fire"] = o.AttackFire
	toSerialize["attack_earth"] = o.AttackEarth
	toSerialize["attack_water"] = o.AttackWater
	toSerialize["attack_air"] = o.AttackAir
	toSerialize["res_fire"] = o.ResFire
	toSerialize["res_earth"] = o.ResEarth
	toSerialize["res_water"] = o.ResWater
	toSerialize["res_air"] = o.ResAir
	toSerialize["golds"] = o.Golds
	toSerialize["drops"] = o.Drops
	return toSerialize, nil
}

func (o *MonsterSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"code",
		"level",
		"hp",
		"attack_fire",
		"attack_earth",
		"attack_water",
		"attack_air",
		"res_fire",
		"res_earth",
		"res_water",
		"res_air",
		"golds",
		"drops",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMonsterSchema := _MonsterSchema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMonsterSchema)

	if err != nil {
		return err
	}

	*o = MonsterSchema(varMonsterSchema)

	return err
}

type NullableMonsterSchema struct {
	value *MonsterSchema
	isSet bool
}

func (v NullableMonsterSchema) Get() *MonsterSchema {
	return v.value
}

func (v *NullableMonsterSchema) Set(val *MonsterSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableMonsterSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableMonsterSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonsterSchema(val *MonsterSchema) *NullableMonsterSchema {
	return &NullableMonsterSchema{value: val, isSet: true}
}

func (v NullableMonsterSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonsterSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


