/*
Artifacts API

 Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TaskSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskSchema{}

// TaskSchema struct for TaskSchema
type TaskSchema struct {
	// Task objective.
	Code string `json:"code"`
	Type interface{} `json:"type"`
	// The total required to complete the task.
	Total int32 `json:"total"`
}

type _TaskSchema TaskSchema

// NewTaskSchema instantiates a new TaskSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskSchema(code string, type_ interface{}, total int32) *TaskSchema {
	this := TaskSchema{}
	this.Code = code
	this.Type = type_
	this.Total = total
	return &this
}

// NewTaskSchemaWithDefaults instantiates a new TaskSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskSchemaWithDefaults() *TaskSchema {
	this := TaskSchema{}
	return &this
}

// GetCode returns the Code field value
func (o *TaskSchema) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *TaskSchema) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *TaskSchema) SetCode(v string) {
	o.Code = v
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *TaskSchema) GetType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskSchema) GetTypeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TaskSchema) SetType(v interface{}) {
	o.Type = v
}

// GetTotal returns the Total field value
func (o *TaskSchema) GetTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *TaskSchema) GetTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *TaskSchema) SetTotal(v int32) {
	o.Total = v
}

func (o TaskSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	toSerialize["total"] = o.Total
	return toSerialize, nil
}

func (o *TaskSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"type",
		"total",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaskSchema := _TaskSchema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTaskSchema)

	if err != nil {
		return err
	}

	*o = TaskSchema(varTaskSchema)

	return err
}

type NullableTaskSchema struct {
	value *TaskSchema
	isSet bool
}

func (v NullableTaskSchema) Get() *TaskSchema {
	return v.value
}

func (v *NullableTaskSchema) Set(val *TaskSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskSchema(val *TaskSchema) *NullableTaskSchema {
	return &NullableTaskSchema{value: val, isSet: true}
}

func (v NullableTaskSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


