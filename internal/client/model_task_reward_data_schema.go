/*
Artifacts API

 Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TaskRewardDataSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskRewardDataSchema{}

// TaskRewardDataSchema struct for TaskRewardDataSchema
type TaskRewardDataSchema struct {
	// Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`
	// Reward details.
	Reward TaskRewardSchema `json:"reward"`
	// Player details.
	Character CharacterSchema `json:"character"`
}

type _TaskRewardDataSchema TaskRewardDataSchema

// NewTaskRewardDataSchema instantiates a new TaskRewardDataSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskRewardDataSchema(cooldown CooldownSchema, reward TaskRewardSchema, character CharacterSchema) *TaskRewardDataSchema {
	this := TaskRewardDataSchema{}
	this.Cooldown = cooldown
	this.Reward = reward
	this.Character = character
	return &this
}

// NewTaskRewardDataSchemaWithDefaults instantiates a new TaskRewardDataSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskRewardDataSchemaWithDefaults() *TaskRewardDataSchema {
	this := TaskRewardDataSchema{}
	return &this
}

// GetCooldown returns the Cooldown field value
func (o *TaskRewardDataSchema) GetCooldown() CooldownSchema {
	if o == nil {
		var ret CooldownSchema
		return ret
	}

	return o.Cooldown
}

// GetCooldownOk returns a tuple with the Cooldown field value
// and a boolean to check if the value has been set.
func (o *TaskRewardDataSchema) GetCooldownOk() (*CooldownSchema, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cooldown, true
}

// SetCooldown sets field value
func (o *TaskRewardDataSchema) SetCooldown(v CooldownSchema) {
	o.Cooldown = v
}

// GetReward returns the Reward field value
func (o *TaskRewardDataSchema) GetReward() TaskRewardSchema {
	if o == nil {
		var ret TaskRewardSchema
		return ret
	}

	return o.Reward
}

// GetRewardOk returns a tuple with the Reward field value
// and a boolean to check if the value has been set.
func (o *TaskRewardDataSchema) GetRewardOk() (*TaskRewardSchema, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reward, true
}

// SetReward sets field value
func (o *TaskRewardDataSchema) SetReward(v TaskRewardSchema) {
	o.Reward = v
}

// GetCharacter returns the Character field value
func (o *TaskRewardDataSchema) GetCharacter() CharacterSchema {
	if o == nil {
		var ret CharacterSchema
		return ret
	}

	return o.Character
}

// GetCharacterOk returns a tuple with the Character field value
// and a boolean to check if the value has been set.
func (o *TaskRewardDataSchema) GetCharacterOk() (*CharacterSchema, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Character, true
}

// SetCharacter sets field value
func (o *TaskRewardDataSchema) SetCharacter(v CharacterSchema) {
	o.Character = v
}

func (o TaskRewardDataSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskRewardDataSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cooldown"] = o.Cooldown
	toSerialize["reward"] = o.Reward
	toSerialize["character"] = o.Character
	return toSerialize, nil
}

func (o *TaskRewardDataSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cooldown",
		"reward",
		"character",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaskRewardDataSchema := _TaskRewardDataSchema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTaskRewardDataSchema)

	if err != nil {
		return err
	}

	*o = TaskRewardDataSchema(varTaskRewardDataSchema)

	return err
}

type NullableTaskRewardDataSchema struct {
	value *TaskRewardDataSchema
	isSet bool
}

func (v NullableTaskRewardDataSchema) Get() *TaskRewardDataSchema {
	return v.value
}

func (v *NullableTaskRewardDataSchema) Set(val *TaskRewardDataSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskRewardDataSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskRewardDataSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskRewardDataSchema(val *TaskRewardDataSchema) *NullableTaskRewardDataSchema {
	return &NullableTaskRewardDataSchema{value: val, isSet: true}
}

func (v NullableTaskRewardDataSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskRewardDataSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


