/*
Artifacts API

 Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type MonstersAPI interface {

	/*
	GetAllMonstersMonstersGet Get All Monsters

	Fetch monsters details.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetAllMonstersMonstersGetRequest
	*/
	GetAllMonstersMonstersGet(ctx context.Context) ApiGetAllMonstersMonstersGetRequest

	// GetAllMonstersMonstersGetExecute executes the request
	//  @return DataPageMonsterSchema
	GetAllMonstersMonstersGetExecute(r ApiGetAllMonstersMonstersGetRequest) (*DataPageMonsterSchema, *http.Response, error)

	/*
	GetMonsterMonstersCodeGet Get Monster

	Retrieve the details of a monster.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param code The code of the monster.
	@return ApiGetMonsterMonstersCodeGetRequest
	*/
	GetMonsterMonstersCodeGet(ctx context.Context, code string) ApiGetMonsterMonstersCodeGetRequest

	// GetMonsterMonstersCodeGetExecute executes the request
	//  @return MonsterResponseSchema
	GetMonsterMonstersCodeGetExecute(r ApiGetMonsterMonstersCodeGetRequest) (*MonsterResponseSchema, *http.Response, error)
}

// MonstersAPIService MonstersAPI service
type MonstersAPIService service

type ApiGetAllMonstersMonstersGetRequest struct {
	ctx context.Context
	ApiService MonstersAPI
	minLevel *int32
	maxLevel *int32
	drop *string
	page *int32
	size *int32
}

// Monster minimum level.
func (r ApiGetAllMonstersMonstersGetRequest) MinLevel(minLevel int32) ApiGetAllMonstersMonstersGetRequest {
	r.minLevel = &minLevel
	return r
}

// Monster maximum level.
func (r ApiGetAllMonstersMonstersGetRequest) MaxLevel(maxLevel int32) ApiGetAllMonstersMonstersGetRequest {
	r.maxLevel = &maxLevel
	return r
}

// Item code of the drop.
func (r ApiGetAllMonstersMonstersGetRequest) Drop(drop string) ApiGetAllMonstersMonstersGetRequest {
	r.drop = &drop
	return r
}

// Page number
func (r ApiGetAllMonstersMonstersGetRequest) Page(page int32) ApiGetAllMonstersMonstersGetRequest {
	r.page = &page
	return r
}

// Page size
func (r ApiGetAllMonstersMonstersGetRequest) Size(size int32) ApiGetAllMonstersMonstersGetRequest {
	r.size = &size
	return r
}

func (r ApiGetAllMonstersMonstersGetRequest) Execute() (*DataPageMonsterSchema, *http.Response, error) {
	return r.ApiService.GetAllMonstersMonstersGetExecute(r)
}

/*
GetAllMonstersMonstersGet Get All Monsters

Fetch monsters details.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAllMonstersMonstersGetRequest
*/
func (a *MonstersAPIService) GetAllMonstersMonstersGet(ctx context.Context) ApiGetAllMonstersMonstersGetRequest {
	return ApiGetAllMonstersMonstersGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DataPageMonsterSchema
func (a *MonstersAPIService) GetAllMonstersMonstersGetExecute(r ApiGetAllMonstersMonstersGetRequest) (*DataPageMonsterSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DataPageMonsterSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonstersAPIService.GetAllMonstersMonstersGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/monsters/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.minLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "min_level", r.minLevel, "")
	}
	if r.maxLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max_level", r.maxLevel, "")
	}
	if r.drop != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "drop", r.drop, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	} else {
		var defaultValue int32 = 50
		r.size = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMonsterMonstersCodeGetRequest struct {
	ctx context.Context
	ApiService MonstersAPI
	code string
}

func (r ApiGetMonsterMonstersCodeGetRequest) Execute() (*MonsterResponseSchema, *http.Response, error) {
	return r.ApiService.GetMonsterMonstersCodeGetExecute(r)
}

/*
GetMonsterMonstersCodeGet Get Monster

Retrieve the details of a monster.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param code The code of the monster.
 @return ApiGetMonsterMonstersCodeGetRequest
*/
func (a *MonstersAPIService) GetMonsterMonstersCodeGet(ctx context.Context, code string) ApiGetMonsterMonstersCodeGetRequest {
	return ApiGetMonsterMonstersCodeGetRequest{
		ApiService: a,
		ctx: ctx,
		code: code,
	}
}

// Execute executes the request
//  @return MonsterResponseSchema
func (a *MonstersAPIService) GetMonsterMonstersCodeGetExecute(r ApiGetMonsterMonstersCodeGetRequest) (*MonsterResponseSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MonsterResponseSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonstersAPIService.GetMonsterMonstersCodeGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/monsters/{code}"
	localVarPath = strings.Replace(localVarPath, "{"+"code"+"}", url.PathEscape(parameterValueToString(r.code, "code")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
