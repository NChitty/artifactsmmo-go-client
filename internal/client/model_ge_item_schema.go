/*
Artifacts API

 Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GEItemSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GEItemSchema{}

// GEItemSchema struct for GEItemSchema
type GEItemSchema struct {
	// Item code.
	Item string `json:"item"`
	// Item stock.
	Stock int32 `json:"stock"`
	// Item value.
	Price int32 `json:"price"`
}

type _GEItemSchema GEItemSchema

// NewGEItemSchema instantiates a new GEItemSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGEItemSchema(item string, stock int32, price int32) *GEItemSchema {
	this := GEItemSchema{}
	this.Item = item
	this.Stock = stock
	this.Price = price
	return &this
}

// NewGEItemSchemaWithDefaults instantiates a new GEItemSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGEItemSchemaWithDefaults() *GEItemSchema {
	this := GEItemSchema{}
	return &this
}

// GetItem returns the Item field value
func (o *GEItemSchema) GetItem() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Item
}

// GetItemOk returns a tuple with the Item field value
// and a boolean to check if the value has been set.
func (o *GEItemSchema) GetItemOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Item, true
}

// SetItem sets field value
func (o *GEItemSchema) SetItem(v string) {
	o.Item = v
}

// GetStock returns the Stock field value
func (o *GEItemSchema) GetStock() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Stock
}

// GetStockOk returns a tuple with the Stock field value
// and a boolean to check if the value has been set.
func (o *GEItemSchema) GetStockOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stock, true
}

// SetStock sets field value
func (o *GEItemSchema) SetStock(v int32) {
	o.Stock = v
}

// GetPrice returns the Price field value
func (o *GEItemSchema) GetPrice() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *GEItemSchema) GetPriceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *GEItemSchema) SetPrice(v int32) {
	o.Price = v
}

func (o GEItemSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GEItemSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["item"] = o.Item
	toSerialize["stock"] = o.Stock
	toSerialize["price"] = o.Price
	return toSerialize, nil
}

func (o *GEItemSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"item",
		"stock",
		"price",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGEItemSchema := _GEItemSchema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGEItemSchema)

	if err != nil {
		return err
	}

	*o = GEItemSchema(varGEItemSchema)

	return err
}

type NullableGEItemSchema struct {
	value *GEItemSchema
	isSet bool
}

func (v NullableGEItemSchema) Get() *GEItemSchema {
	return v.value
}

func (v *NullableGEItemSchema) Set(val *GEItemSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableGEItemSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableGEItemSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGEItemSchema(val *GEItemSchema) *NullableGEItemSchema {
	return &NullableGEItemSchema{value: val, isSet: true}
}

func (v NullableGEItemSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGEItemSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


