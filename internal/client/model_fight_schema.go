/*
Artifacts API

 Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FightSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FightSchema{}

// FightSchema struct for FightSchema
type FightSchema struct {
	// The amount of xp gained by the fight.
	Xp int32 `json:"xp"`
	// The amount of gold gained by the fight.
	Gold int32 `json:"gold"`
	// The items dropped by the fight.
	Drops []DropSchema `json:"drops"`
	// Numbers of the turns of the combat.
	Turns int32 `json:"turns"`
	// The amount of blocked hits by the monster.
	MonsterBlockedHits BlockedHitsSchema `json:"monster_blocked_hits"`
	// The amount of blocked hits by the player.
	PlayerBlockedHits BlockedHitsSchema `json:"player_blocked_hits"`
	// The fight logs.
	Logs []string `json:"logs"`
	// The result of the fight.
	Result string `json:"result"`
}

type _FightSchema FightSchema

// NewFightSchema instantiates a new FightSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFightSchema(xp int32, gold int32, drops []DropSchema, turns int32, monsterBlockedHits BlockedHitsSchema, playerBlockedHits BlockedHitsSchema, logs []string, result string) *FightSchema {
	this := FightSchema{}
	this.Xp = xp
	this.Gold = gold
	this.Drops = drops
	this.Turns = turns
	this.MonsterBlockedHits = monsterBlockedHits
	this.PlayerBlockedHits = playerBlockedHits
	this.Logs = logs
	this.Result = result
	return &this
}

// NewFightSchemaWithDefaults instantiates a new FightSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFightSchemaWithDefaults() *FightSchema {
	this := FightSchema{}
	return &this
}

// GetXp returns the Xp field value
func (o *FightSchema) GetXp() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Xp
}

// GetXpOk returns a tuple with the Xp field value
// and a boolean to check if the value has been set.
func (o *FightSchema) GetXpOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Xp, true
}

// SetXp sets field value
func (o *FightSchema) SetXp(v int32) {
	o.Xp = v
}

// GetGold returns the Gold field value
func (o *FightSchema) GetGold() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Gold
}

// GetGoldOk returns a tuple with the Gold field value
// and a boolean to check if the value has been set.
func (o *FightSchema) GetGoldOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Gold, true
}

// SetGold sets field value
func (o *FightSchema) SetGold(v int32) {
	o.Gold = v
}

// GetDrops returns the Drops field value
func (o *FightSchema) GetDrops() []DropSchema {
	if o == nil {
		var ret []DropSchema
		return ret
	}

	return o.Drops
}

// GetDropsOk returns a tuple with the Drops field value
// and a boolean to check if the value has been set.
func (o *FightSchema) GetDropsOk() ([]DropSchema, bool) {
	if o == nil {
		return nil, false
	}
	return o.Drops, true
}

// SetDrops sets field value
func (o *FightSchema) SetDrops(v []DropSchema) {
	o.Drops = v
}

// GetTurns returns the Turns field value
func (o *FightSchema) GetTurns() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Turns
}

// GetTurnsOk returns a tuple with the Turns field value
// and a boolean to check if the value has been set.
func (o *FightSchema) GetTurnsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Turns, true
}

// SetTurns sets field value
func (o *FightSchema) SetTurns(v int32) {
	o.Turns = v
}

// GetMonsterBlockedHits returns the MonsterBlockedHits field value
func (o *FightSchema) GetMonsterBlockedHits() BlockedHitsSchema {
	if o == nil {
		var ret BlockedHitsSchema
		return ret
	}

	return o.MonsterBlockedHits
}

// GetMonsterBlockedHitsOk returns a tuple with the MonsterBlockedHits field value
// and a boolean to check if the value has been set.
func (o *FightSchema) GetMonsterBlockedHitsOk() (*BlockedHitsSchema, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MonsterBlockedHits, true
}

// SetMonsterBlockedHits sets field value
func (o *FightSchema) SetMonsterBlockedHits(v BlockedHitsSchema) {
	o.MonsterBlockedHits = v
}

// GetPlayerBlockedHits returns the PlayerBlockedHits field value
func (o *FightSchema) GetPlayerBlockedHits() BlockedHitsSchema {
	if o == nil {
		var ret BlockedHitsSchema
		return ret
	}

	return o.PlayerBlockedHits
}

// GetPlayerBlockedHitsOk returns a tuple with the PlayerBlockedHits field value
// and a boolean to check if the value has been set.
func (o *FightSchema) GetPlayerBlockedHitsOk() (*BlockedHitsSchema, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlayerBlockedHits, true
}

// SetPlayerBlockedHits sets field value
func (o *FightSchema) SetPlayerBlockedHits(v BlockedHitsSchema) {
	o.PlayerBlockedHits = v
}

// GetLogs returns the Logs field value
func (o *FightSchema) GetLogs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Logs
}

// GetLogsOk returns a tuple with the Logs field value
// and a boolean to check if the value has been set.
func (o *FightSchema) GetLogsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Logs, true
}

// SetLogs sets field value
func (o *FightSchema) SetLogs(v []string) {
	o.Logs = v
}

// GetResult returns the Result field value
func (o *FightSchema) GetResult() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *FightSchema) GetResultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *FightSchema) SetResult(v string) {
	o.Result = v
}

func (o FightSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FightSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["xp"] = o.Xp
	toSerialize["gold"] = o.Gold
	toSerialize["drops"] = o.Drops
	toSerialize["turns"] = o.Turns
	toSerialize["monster_blocked_hits"] = o.MonsterBlockedHits
	toSerialize["player_blocked_hits"] = o.PlayerBlockedHits
	toSerialize["logs"] = o.Logs
	toSerialize["result"] = o.Result
	return toSerialize, nil
}

func (o *FightSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"xp",
		"gold",
		"drops",
		"turns",
		"monster_blocked_hits",
		"player_blocked_hits",
		"logs",
		"result",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFightSchema := _FightSchema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFightSchema)

	if err != nil {
		return err
	}

	*o = FightSchema(varFightSchema)

	return err
}

type NullableFightSchema struct {
	value *FightSchema
	isSet bool
}

func (v NullableFightSchema) Get() *FightSchema {
	return v.value
}

func (v *NullableFightSchema) Set(val *FightSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableFightSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableFightSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFightSchema(val *FightSchema) *NullableFightSchema {
	return &NullableFightSchema{value: val, isSet: true}
}

func (v NullableFightSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFightSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


