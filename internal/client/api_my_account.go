/*
Artifacts API

 Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type MyAccountAPI interface {

	/*
	ChangePasswordMyChangePasswordPost Change Password

	Change your account password. Changing the password reset the account token.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiChangePasswordMyChangePasswordPostRequest
	*/
	ChangePasswordMyChangePasswordPost(ctx context.Context) ApiChangePasswordMyChangePasswordPostRequest

	// ChangePasswordMyChangePasswordPostExecute executes the request
	//  @return ResponseSchema
	ChangePasswordMyChangePasswordPostExecute(r ApiChangePasswordMyChangePasswordPostRequest) (*ResponseSchema, *http.Response, error)

	/*
	GetBankGoldsMyBankGoldGet Get Bank Golds

	Fetch golds in your bank.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetBankGoldsMyBankGoldGetRequest
	*/
	GetBankGoldsMyBankGoldGet(ctx context.Context) ApiGetBankGoldsMyBankGoldGetRequest

	// GetBankGoldsMyBankGoldGetExecute executes the request
	//  @return GoldBankResponseSchema
	GetBankGoldsMyBankGoldGetExecute(r ApiGetBankGoldsMyBankGoldGetRequest) (*GoldBankResponseSchema, *http.Response, error)

	/*
	GetBankItemsMyBankItemsGet Get Bank Items

	Fetch all items in your bank.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetBankItemsMyBankItemsGetRequest
	*/
	GetBankItemsMyBankItemsGet(ctx context.Context) ApiGetBankItemsMyBankItemsGetRequest

	// GetBankItemsMyBankItemsGetExecute executes the request
	//  @return DataPageSimpleItemSchema
	GetBankItemsMyBankItemsGetExecute(r ApiGetBankItemsMyBankItemsGetRequest) (*DataPageSimpleItemSchema, *http.Response, error)
}

// MyAccountAPIService MyAccountAPI service
type MyAccountAPIService service

type ApiChangePasswordMyChangePasswordPostRequest struct {
	ctx context.Context
	ApiService MyAccountAPI
	changePassword *ChangePassword
}

func (r ApiChangePasswordMyChangePasswordPostRequest) ChangePassword(changePassword ChangePassword) ApiChangePasswordMyChangePasswordPostRequest {
	r.changePassword = &changePassword
	return r
}

func (r ApiChangePasswordMyChangePasswordPostRequest) Execute() (*ResponseSchema, *http.Response, error) {
	return r.ApiService.ChangePasswordMyChangePasswordPostExecute(r)
}

/*
ChangePasswordMyChangePasswordPost Change Password

Change your account password. Changing the password reset the account token.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiChangePasswordMyChangePasswordPostRequest
*/
func (a *MyAccountAPIService) ChangePasswordMyChangePasswordPost(ctx context.Context) ApiChangePasswordMyChangePasswordPostRequest {
	return ApiChangePasswordMyChangePasswordPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResponseSchema
func (a *MyAccountAPIService) ChangePasswordMyChangePasswordPostExecute(r ApiChangePasswordMyChangePasswordPostRequest) (*ResponseSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MyAccountAPIService.ChangePasswordMyChangePasswordPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/my/change_password"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.changePassword == nil {
		return localVarReturnValue, nil, reportError("changePassword is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.changePassword
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBankGoldsMyBankGoldGetRequest struct {
	ctx context.Context
	ApiService MyAccountAPI
}

func (r ApiGetBankGoldsMyBankGoldGetRequest) Execute() (*GoldBankResponseSchema, *http.Response, error) {
	return r.ApiService.GetBankGoldsMyBankGoldGetExecute(r)
}

/*
GetBankGoldsMyBankGoldGet Get Bank Golds

Fetch golds in your bank.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetBankGoldsMyBankGoldGetRequest
*/
func (a *MyAccountAPIService) GetBankGoldsMyBankGoldGet(ctx context.Context) ApiGetBankGoldsMyBankGoldGetRequest {
	return ApiGetBankGoldsMyBankGoldGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GoldBankResponseSchema
func (a *MyAccountAPIService) GetBankGoldsMyBankGoldGetExecute(r ApiGetBankGoldsMyBankGoldGetRequest) (*GoldBankResponseSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GoldBankResponseSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MyAccountAPIService.GetBankGoldsMyBankGoldGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/my/bank/gold"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBankItemsMyBankItemsGetRequest struct {
	ctx context.Context
	ApiService MyAccountAPI
	page *int32
	size *int32
}

// Page number
func (r ApiGetBankItemsMyBankItemsGetRequest) Page(page int32) ApiGetBankItemsMyBankItemsGetRequest {
	r.page = &page
	return r
}

// Page size
func (r ApiGetBankItemsMyBankItemsGetRequest) Size(size int32) ApiGetBankItemsMyBankItemsGetRequest {
	r.size = &size
	return r
}

func (r ApiGetBankItemsMyBankItemsGetRequest) Execute() (*DataPageSimpleItemSchema, *http.Response, error) {
	return r.ApiService.GetBankItemsMyBankItemsGetExecute(r)
}

/*
GetBankItemsMyBankItemsGet Get Bank Items

Fetch all items in your bank.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetBankItemsMyBankItemsGetRequest
*/
func (a *MyAccountAPIService) GetBankItemsMyBankItemsGet(ctx context.Context) ApiGetBankItemsMyBankItemsGetRequest {
	return ApiGetBankItemsMyBankItemsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DataPageSimpleItemSchema
func (a *MyAccountAPIService) GetBankItemsMyBankItemsGetExecute(r ApiGetBankItemsMyBankItemsGetRequest) (*DataPageSimpleItemSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DataPageSimpleItemSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MyAccountAPIService.GetBankItemsMyBankItemsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/my/bank/items"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	} else {
		var defaultValue int32 = 50
		r.size = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
