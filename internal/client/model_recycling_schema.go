/*
Artifacts API

 Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecyclingSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecyclingSchema{}

// RecyclingSchema struct for RecyclingSchema
type RecyclingSchema struct {
	// Item code.
	Code string `json:"code" validate:"regexp=^[a-zA-Z0-9_-]+$"`
	// Quantity of items to recycle.
	Quantity *int32 `json:"quantity,omitempty"`
}

type _RecyclingSchema RecyclingSchema

// NewRecyclingSchema instantiates a new RecyclingSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecyclingSchema(code string) *RecyclingSchema {
	this := RecyclingSchema{}
	this.Code = code
	var quantity int32 = 1
	this.Quantity = &quantity
	return &this
}

// NewRecyclingSchemaWithDefaults instantiates a new RecyclingSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecyclingSchemaWithDefaults() *RecyclingSchema {
	this := RecyclingSchema{}
	var quantity int32 = 1
	this.Quantity = &quantity
	return &this
}

// GetCode returns the Code field value
func (o *RecyclingSchema) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *RecyclingSchema) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *RecyclingSchema) SetCode(v string) {
	o.Code = v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *RecyclingSchema) GetQuantity() int32 {
	if o == nil || IsNil(o.Quantity) {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecyclingSchema) GetQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *RecyclingSchema) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *RecyclingSchema) SetQuantity(v int32) {
	o.Quantity = &v
}

func (o RecyclingSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecyclingSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	return toSerialize, nil
}

func (o *RecyclingSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecyclingSchema := _RecyclingSchema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecyclingSchema)

	if err != nil {
		return err
	}

	*o = RecyclingSchema(varRecyclingSchema)

	return err
}

type NullableRecyclingSchema struct {
	value *RecyclingSchema
	isSet bool
}

func (v NullableRecyclingSchema) Get() *RecyclingSchema {
	return v.value
}

func (v *NullableRecyclingSchema) Set(val *RecyclingSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableRecyclingSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableRecyclingSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecyclingSchema(val *RecyclingSchema) *NullableRecyclingSchema {
	return &NullableRecyclingSchema{value: val, isSet: true}
}

func (v NullableRecyclingSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecyclingSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


