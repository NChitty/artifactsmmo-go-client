/*
Artifacts API

 Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResourceSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceSchema{}

// ResourceSchema struct for ResourceSchema
type ResourceSchema struct {
	// The name of the resource
	Name string `json:"name"`
	// The code of the resource. This is the monster's unique identifier (ID).
	Code string `json:"code"`
	// The skill required to gather this resource.
	Skill string `json:"skill"`
	// The skill level required to gather this resource.
	Level int32 `json:"level"`
	// The drops of this resource.
	Drops []interface{} `json:"drops"`
}

type _ResourceSchema ResourceSchema

// NewResourceSchema instantiates a new ResourceSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceSchema(name string, code string, skill string, level int32, drops []interface{}) *ResourceSchema {
	this := ResourceSchema{}
	this.Name = name
	this.Code = code
	this.Skill = skill
	this.Level = level
	this.Drops = drops
	return &this
}

// NewResourceSchemaWithDefaults instantiates a new ResourceSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceSchemaWithDefaults() *ResourceSchema {
	this := ResourceSchema{}
	return &this
}

// GetName returns the Name field value
func (o *ResourceSchema) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ResourceSchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ResourceSchema) SetName(v string) {
	o.Name = v
}

// GetCode returns the Code field value
func (o *ResourceSchema) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *ResourceSchema) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *ResourceSchema) SetCode(v string) {
	o.Code = v
}

// GetSkill returns the Skill field value
func (o *ResourceSchema) GetSkill() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Skill
}

// GetSkillOk returns a tuple with the Skill field value
// and a boolean to check if the value has been set.
func (o *ResourceSchema) GetSkillOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Skill, true
}

// SetSkill sets field value
func (o *ResourceSchema) SetSkill(v string) {
	o.Skill = v
}

// GetLevel returns the Level field value
func (o *ResourceSchema) GetLevel() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Level
}

// GetLevelOk returns a tuple with the Level field value
// and a boolean to check if the value has been set.
func (o *ResourceSchema) GetLevelOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Level, true
}

// SetLevel sets field value
func (o *ResourceSchema) SetLevel(v int32) {
	o.Level = v
}

// GetDrops returns the Drops field value
func (o *ResourceSchema) GetDrops() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.Drops
}

// GetDropsOk returns a tuple with the Drops field value
// and a boolean to check if the value has been set.
func (o *ResourceSchema) GetDropsOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Drops, true
}

// SetDrops sets field value
func (o *ResourceSchema) SetDrops(v []interface{}) {
	o.Drops = v
}

func (o ResourceSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["code"] = o.Code
	toSerialize["skill"] = o.Skill
	toSerialize["level"] = o.Level
	toSerialize["drops"] = o.Drops
	return toSerialize, nil
}

func (o *ResourceSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"code",
		"skill",
		"level",
		"drops",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceSchema := _ResourceSchema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResourceSchema)

	if err != nil {
		return err
	}

	*o = ResourceSchema(varResourceSchema)

	return err
}

type NullableResourceSchema struct {
	value *ResourceSchema
	isSet bool
}

func (v NullableResourceSchema) Get() *ResourceSchema {
	return v.value
}

func (v *NullableResourceSchema) Set(val *ResourceSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceSchema(val *ResourceSchema) *NullableResourceSchema {
	return &NullableResourceSchema{value: val, isSet: true}
}

func (v NullableResourceSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


