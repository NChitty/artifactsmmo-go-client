/*
Artifacts API

 Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the CraftSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CraftSchema{}

// CraftSchema struct for CraftSchema
type CraftSchema struct {
	Skill NullableString `json:"skill,omitempty"`
	Level NullableInt32 `json:"level,omitempty"`
	// List of items required to craft the item.
	Items []interface{} `json:"items,omitempty"`
	Quantity NullableInt32 `json:"quantity,omitempty"`
}

// NewCraftSchema instantiates a new CraftSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCraftSchema() *CraftSchema {
	this := CraftSchema{}
	return &this
}

// NewCraftSchemaWithDefaults instantiates a new CraftSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCraftSchemaWithDefaults() *CraftSchema {
	this := CraftSchema{}
	return &this
}

// GetSkill returns the Skill field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CraftSchema) GetSkill() string {
	if o == nil || IsNil(o.Skill.Get()) {
		var ret string
		return ret
	}
	return *o.Skill.Get()
}

// GetSkillOk returns a tuple with the Skill field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CraftSchema) GetSkillOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Skill.Get(), o.Skill.IsSet()
}

// HasSkill returns a boolean if a field has been set.
func (o *CraftSchema) HasSkill() bool {
	if o != nil && o.Skill.IsSet() {
		return true
	}

	return false
}

// SetSkill gets a reference to the given NullableString and assigns it to the Skill field.
func (o *CraftSchema) SetSkill(v string) {
	o.Skill.Set(&v)
}
// SetSkillNil sets the value for Skill to be an explicit nil
func (o *CraftSchema) SetSkillNil() {
	o.Skill.Set(nil)
}

// UnsetSkill ensures that no value is present for Skill, not even an explicit nil
func (o *CraftSchema) UnsetSkill() {
	o.Skill.Unset()
}

// GetLevel returns the Level field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CraftSchema) GetLevel() int32 {
	if o == nil || IsNil(o.Level.Get()) {
		var ret int32
		return ret
	}
	return *o.Level.Get()
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CraftSchema) GetLevelOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Level.Get(), o.Level.IsSet()
}

// HasLevel returns a boolean if a field has been set.
func (o *CraftSchema) HasLevel() bool {
	if o != nil && o.Level.IsSet() {
		return true
	}

	return false
}

// SetLevel gets a reference to the given NullableInt32 and assigns it to the Level field.
func (o *CraftSchema) SetLevel(v int32) {
	o.Level.Set(&v)
}
// SetLevelNil sets the value for Level to be an explicit nil
func (o *CraftSchema) SetLevelNil() {
	o.Level.Set(nil)
}

// UnsetLevel ensures that no value is present for Level, not even an explicit nil
func (o *CraftSchema) UnsetLevel() {
	o.Level.Unset()
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *CraftSchema) GetItems() []interface{} {
	if o == nil || IsNil(o.Items) {
		var ret []interface{}
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CraftSchema) GetItemsOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *CraftSchema) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []interface{} and assigns it to the Items field.
func (o *CraftSchema) SetItems(v []interface{}) {
	o.Items = v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CraftSchema) GetQuantity() int32 {
	if o == nil || IsNil(o.Quantity.Get()) {
		var ret int32
		return ret
	}
	return *o.Quantity.Get()
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CraftSchema) GetQuantityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Quantity.Get(), o.Quantity.IsSet()
}

// HasQuantity returns a boolean if a field has been set.
func (o *CraftSchema) HasQuantity() bool {
	if o != nil && o.Quantity.IsSet() {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given NullableInt32 and assigns it to the Quantity field.
func (o *CraftSchema) SetQuantity(v int32) {
	o.Quantity.Set(&v)
}
// SetQuantityNil sets the value for Quantity to be an explicit nil
func (o *CraftSchema) SetQuantityNil() {
	o.Quantity.Set(nil)
}

// UnsetQuantity ensures that no value is present for Quantity, not even an explicit nil
func (o *CraftSchema) UnsetQuantity() {
	o.Quantity.Unset()
}

func (o CraftSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CraftSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Skill.IsSet() {
		toSerialize["skill"] = o.Skill.Get()
	}
	if o.Level.IsSet() {
		toSerialize["level"] = o.Level.Get()
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if o.Quantity.IsSet() {
		toSerialize["quantity"] = o.Quantity.Get()
	}
	return toSerialize, nil
}

type NullableCraftSchema struct {
	value *CraftSchema
	isSet bool
}

func (v NullableCraftSchema) Get() *CraftSchema {
	return v.value
}

func (v *NullableCraftSchema) Set(val *CraftSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableCraftSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableCraftSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCraftSchema(val *CraftSchema) *NullableCraftSchema {
	return &NullableCraftSchema{value: val, isSet: true}
}

func (v NullableCraftSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCraftSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


