/*
Artifacts API

 Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MapSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MapSchema{}

// MapSchema struct for MapSchema
type MapSchema struct {
	// Name of the map.
	Name string `json:"name"`
	// Skin of the map.
	Skin string `json:"skin"`
	// Position X of the map.
	X int32 `json:"x"`
	// Position Y of the map.
	Y int32 `json:"y"`
	Content interface{} `json:"content"`
}

type _MapSchema MapSchema

// NewMapSchema instantiates a new MapSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMapSchema(name string, skin string, x int32, y int32, content interface{}) *MapSchema {
	this := MapSchema{}
	this.Name = name
	this.Skin = skin
	this.X = x
	this.Y = y
	this.Content = content
	return &this
}

// NewMapSchemaWithDefaults instantiates a new MapSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMapSchemaWithDefaults() *MapSchema {
	this := MapSchema{}
	return &this
}

// GetName returns the Name field value
func (o *MapSchema) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MapSchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MapSchema) SetName(v string) {
	o.Name = v
}

// GetSkin returns the Skin field value
func (o *MapSchema) GetSkin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Skin
}

// GetSkinOk returns a tuple with the Skin field value
// and a boolean to check if the value has been set.
func (o *MapSchema) GetSkinOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Skin, true
}

// SetSkin sets field value
func (o *MapSchema) SetSkin(v string) {
	o.Skin = v
}

// GetX returns the X field value
func (o *MapSchema) GetX() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.X
}

// GetXOk returns a tuple with the X field value
// and a boolean to check if the value has been set.
func (o *MapSchema) GetXOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.X, true
}

// SetX sets field value
func (o *MapSchema) SetX(v int32) {
	o.X = v
}

// GetY returns the Y field value
func (o *MapSchema) GetY() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Y
}

// GetYOk returns a tuple with the Y field value
// and a boolean to check if the value has been set.
func (o *MapSchema) GetYOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Y, true
}

// SetY sets field value
func (o *MapSchema) SetY(v int32) {
	o.Y = v
}

// GetContent returns the Content field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *MapSchema) GetContent() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MapSchema) GetContentOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *MapSchema) SetContent(v interface{}) {
	o.Content = v
}

func (o MapSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MapSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["skin"] = o.Skin
	toSerialize["x"] = o.X
	toSerialize["y"] = o.Y
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	return toSerialize, nil
}

func (o *MapSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"skin",
		"x",
		"y",
		"content",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMapSchema := _MapSchema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMapSchema)

	if err != nil {
		return err
	}

	*o = MapSchema(varMapSchema)

	return err
}

type NullableMapSchema struct {
	value *MapSchema
	isSet bool
}

func (v NullableMapSchema) Get() *MapSchema {
	return v.value
}

func (v *NullableMapSchema) Set(val *MapSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableMapSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableMapSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMapSchema(val *MapSchema) *NullableMapSchema {
	return &NullableMapSchema{value: val, isSet: true}
}

func (v NullableMapSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMapSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


