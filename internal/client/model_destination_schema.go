/*
Artifacts API

 Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DestinationSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DestinationSchema{}

// DestinationSchema struct for DestinationSchema
type DestinationSchema struct {
	// The x coordinate of the destination.
	X int32 `json:"x"`
	// The y coordinate of the destination.
	Y int32 `json:"y"`
}

type _DestinationSchema DestinationSchema

// NewDestinationSchema instantiates a new DestinationSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDestinationSchema(x int32, y int32) *DestinationSchema {
	this := DestinationSchema{}
	this.X = x
	this.Y = y
	return &this
}

// NewDestinationSchemaWithDefaults instantiates a new DestinationSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDestinationSchemaWithDefaults() *DestinationSchema {
	this := DestinationSchema{}
	return &this
}

// GetX returns the X field value
func (o *DestinationSchema) GetX() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.X
}

// GetXOk returns a tuple with the X field value
// and a boolean to check if the value has been set.
func (o *DestinationSchema) GetXOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.X, true
}

// SetX sets field value
func (o *DestinationSchema) SetX(v int32) {
	o.X = v
}

// GetY returns the Y field value
func (o *DestinationSchema) GetY() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Y
}

// GetYOk returns a tuple with the Y field value
// and a boolean to check if the value has been set.
func (o *DestinationSchema) GetYOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Y, true
}

// SetY sets field value
func (o *DestinationSchema) SetY(v int32) {
	o.Y = v
}

func (o DestinationSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DestinationSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["x"] = o.X
	toSerialize["y"] = o.Y
	return toSerialize, nil
}

func (o *DestinationSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"x",
		"y",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDestinationSchema := _DestinationSchema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDestinationSchema)

	if err != nil {
		return err
	}

	*o = DestinationSchema(varDestinationSchema)

	return err
}

type NullableDestinationSchema struct {
	value *DestinationSchema
	isSet bool
}

func (v NullableDestinationSchema) Get() *DestinationSchema {
	return v.value
}

func (v *NullableDestinationSchema) Set(val *DestinationSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableDestinationSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableDestinationSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestinationSchema(val *DestinationSchema) *NullableDestinationSchema {
	return &NullableDestinationSchema{value: val, isSet: true}
}

func (v NullableDestinationSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDestinationSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


