/*
Artifacts API

 Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SimpleItemSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SimpleItemSchema{}

// SimpleItemSchema struct for SimpleItemSchema
type SimpleItemSchema struct {
	// Item code.
	Code string `json:"code" validate:"regexp=^[a-zA-Z0-9_-]+$"`
	// Item quantity.
	Quantity int32 `json:"quantity"`
}

type _SimpleItemSchema SimpleItemSchema

// NewSimpleItemSchema instantiates a new SimpleItemSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSimpleItemSchema(code string, quantity int32) *SimpleItemSchema {
	this := SimpleItemSchema{}
	this.Code = code
	this.Quantity = quantity
	return &this
}

// NewSimpleItemSchemaWithDefaults instantiates a new SimpleItemSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSimpleItemSchemaWithDefaults() *SimpleItemSchema {
	this := SimpleItemSchema{}
	return &this
}

// GetCode returns the Code field value
func (o *SimpleItemSchema) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *SimpleItemSchema) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *SimpleItemSchema) SetCode(v string) {
	o.Code = v
}

// GetQuantity returns the Quantity field value
func (o *SimpleItemSchema) GetQuantity() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *SimpleItemSchema) GetQuantityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *SimpleItemSchema) SetQuantity(v int32) {
	o.Quantity = v
}

func (o SimpleItemSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SimpleItemSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	toSerialize["quantity"] = o.Quantity
	return toSerialize, nil
}

func (o *SimpleItemSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"quantity",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSimpleItemSchema := _SimpleItemSchema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSimpleItemSchema)

	if err != nil {
		return err
	}

	*o = SimpleItemSchema(varSimpleItemSchema)

	return err
}

type NullableSimpleItemSchema struct {
	value *SimpleItemSchema
	isSet bool
}

func (v NullableSimpleItemSchema) Get() *SimpleItemSchema {
	return v.value
}

func (v *NullableSimpleItemSchema) Set(val *SimpleItemSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableSimpleItemSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableSimpleItemSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSimpleItemSchema(val *SimpleItemSchema) *NullableSimpleItemSchema {
	return &NullableSimpleItemSchema{value: val, isSet: true}
}

func (v NullableSimpleItemSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSimpleItemSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


