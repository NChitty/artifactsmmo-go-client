/*
Artifacts API

 Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type ItemsAPI interface {

	/*
	GetAllItemsItemsGet Get All Items

	Fetch items details.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetAllItemsItemsGetRequest
	*/
	GetAllItemsItemsGet(ctx context.Context) ApiGetAllItemsItemsGetRequest

	// GetAllItemsItemsGetExecute executes the request
	//  @return DataPageItemSchema
	GetAllItemsItemsGetExecute(r ApiGetAllItemsItemsGetRequest) (*DataPageItemSchema, *http.Response, error)

	/*
	GetItemItemsCodeGet Get Item

	Retrieve the details of a item.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param code The code of the item.
	@return ApiGetItemItemsCodeGetRequest
	*/
	GetItemItemsCodeGet(ctx context.Context, code string) ApiGetItemItemsCodeGetRequest

	// GetItemItemsCodeGetExecute executes the request
	//  @return ItemResponseSchema
	GetItemItemsCodeGetExecute(r ApiGetItemItemsCodeGetRequest) (*ItemResponseSchema, *http.Response, error)
}

// ItemsAPIService ItemsAPI service
type ItemsAPIService service

type ApiGetAllItemsItemsGetRequest struct {
	ctx context.Context
	ApiService ItemsAPI
	minLevel *int32
	maxLevel *int32
	name *string
	type_ *string
	craftSkill *string
	craftMaterial *string
	page *int32
	size *int32
}

// Minimum level items.
func (r ApiGetAllItemsItemsGetRequest) MinLevel(minLevel int32) ApiGetAllItemsItemsGetRequest {
	r.minLevel = &minLevel
	return r
}

// Maximum level items.
func (r ApiGetAllItemsItemsGetRequest) MaxLevel(maxLevel int32) ApiGetAllItemsItemsGetRequest {
	r.maxLevel = &maxLevel
	return r
}

// Name of the item.
func (r ApiGetAllItemsItemsGetRequest) Name(name string) ApiGetAllItemsItemsGetRequest {
	r.name = &name
	return r
}

// Type of items.
func (r ApiGetAllItemsItemsGetRequest) Type_(type_ string) ApiGetAllItemsItemsGetRequest {
	r.type_ = &type_
	return r
}

// Skill to craft items.
func (r ApiGetAllItemsItemsGetRequest) CraftSkill(craftSkill string) ApiGetAllItemsItemsGetRequest {
	r.craftSkill = &craftSkill
	return r
}

// Item code of items used as material for crafting.
func (r ApiGetAllItemsItemsGetRequest) CraftMaterial(craftMaterial string) ApiGetAllItemsItemsGetRequest {
	r.craftMaterial = &craftMaterial
	return r
}

// Page number
func (r ApiGetAllItemsItemsGetRequest) Page(page int32) ApiGetAllItemsItemsGetRequest {
	r.page = &page
	return r
}

// Page size
func (r ApiGetAllItemsItemsGetRequest) Size(size int32) ApiGetAllItemsItemsGetRequest {
	r.size = &size
	return r
}

func (r ApiGetAllItemsItemsGetRequest) Execute() (*DataPageItemSchema, *http.Response, error) {
	return r.ApiService.GetAllItemsItemsGetExecute(r)
}

/*
GetAllItemsItemsGet Get All Items

Fetch items details.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAllItemsItemsGetRequest
*/
func (a *ItemsAPIService) GetAllItemsItemsGet(ctx context.Context) ApiGetAllItemsItemsGetRequest {
	return ApiGetAllItemsItemsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DataPageItemSchema
func (a *ItemsAPIService) GetAllItemsItemsGetExecute(r ApiGetAllItemsItemsGetRequest) (*DataPageItemSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DataPageItemSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemsAPIService.GetAllItemsItemsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/items/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.minLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "min_level", r.minLevel, "")
	}
	if r.maxLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max_level", r.maxLevel, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.craftSkill != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "craft_skill", r.craftSkill, "")
	}
	if r.craftMaterial != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "craft_material", r.craftMaterial, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	} else {
		var defaultValue int32 = 50
		r.size = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetItemItemsCodeGetRequest struct {
	ctx context.Context
	ApiService ItemsAPI
	code string
}

func (r ApiGetItemItemsCodeGetRequest) Execute() (*ItemResponseSchema, *http.Response, error) {
	return r.ApiService.GetItemItemsCodeGetExecute(r)
}

/*
GetItemItemsCodeGet Get Item

Retrieve the details of a item.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param code The code of the item.
 @return ApiGetItemItemsCodeGetRequest
*/
func (a *ItemsAPIService) GetItemItemsCodeGet(ctx context.Context, code string) ApiGetItemItemsCodeGetRequest {
	return ApiGetItemItemsCodeGetRequest{
		ApiService: a,
		ctx: ctx,
		code: code,
	}
}

// Execute executes the request
//  @return ItemResponseSchema
func (a *ItemsAPIService) GetItemItemsCodeGetExecute(r ApiGetItemItemsCodeGetRequest) (*ItemResponseSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ItemResponseSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ItemsAPIService.GetItemItemsCodeGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/items/{code}"
	localVarPath = strings.Replace(localVarPath, "{"+"code"+"}", url.PathEscape(parameterValueToString(r.code, "code")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
