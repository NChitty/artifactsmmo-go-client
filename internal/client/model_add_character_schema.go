/*
Artifacts API

 Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddCharacterSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddCharacterSchema{}

// AddCharacterSchema struct for AddCharacterSchema
type AddCharacterSchema struct {
	// Your desired character name. It's unique and all players can see it.
	Name string `json:"name" validate:"regexp=^[a-zA-Z0-9_-]+$"`
	// Your desired skin.
	Skin string `json:"skin"`
}

type _AddCharacterSchema AddCharacterSchema

// NewAddCharacterSchema instantiates a new AddCharacterSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddCharacterSchema(name string, skin string) *AddCharacterSchema {
	this := AddCharacterSchema{}
	this.Name = name
	this.Skin = skin
	return &this
}

// NewAddCharacterSchemaWithDefaults instantiates a new AddCharacterSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddCharacterSchemaWithDefaults() *AddCharacterSchema {
	this := AddCharacterSchema{}
	return &this
}

// GetName returns the Name field value
func (o *AddCharacterSchema) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AddCharacterSchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AddCharacterSchema) SetName(v string) {
	o.Name = v
}

// GetSkin returns the Skin field value
func (o *AddCharacterSchema) GetSkin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Skin
}

// GetSkinOk returns a tuple with the Skin field value
// and a boolean to check if the value has been set.
func (o *AddCharacterSchema) GetSkinOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Skin, true
}

// SetSkin sets field value
func (o *AddCharacterSchema) SetSkin(v string) {
	o.Skin = v
}

func (o AddCharacterSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddCharacterSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["skin"] = o.Skin
	return toSerialize, nil
}

func (o *AddCharacterSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"skin",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddCharacterSchema := _AddCharacterSchema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddCharacterSchema)

	if err != nil {
		return err
	}

	*o = AddCharacterSchema(varAddCharacterSchema)

	return err
}

type NullableAddCharacterSchema struct {
	value *AddCharacterSchema
	isSet bool
}

func (v NullableAddCharacterSchema) Get() *AddCharacterSchema {
	return v.value
}

func (v *NullableAddCharacterSchema) Set(val *AddCharacterSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableAddCharacterSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableAddCharacterSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddCharacterSchema(val *AddCharacterSchema) *NullableAddCharacterSchema {
	return &NullableAddCharacterSchema{value: val, isSet: true}
}

func (v NullableAddCharacterSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddCharacterSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


