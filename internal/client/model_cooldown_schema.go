/*
Artifacts API

 Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the CooldownSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CooldownSchema{}

// CooldownSchema struct for CooldownSchema
type CooldownSchema struct {
	// The total seconds of the cooldown.
	TotalSeconds int32 `json:"totalSeconds"`
	// The remaning seconds of the cooldown.
	RemainingSeconds int32 `json:"remainingSeconds"`
	// The expiration of the cooldown.
	Expiration time.Time `json:"expiration"`
	// The reason of the cooldown.
	Reason string `json:"reason"`
}

type _CooldownSchema CooldownSchema

// NewCooldownSchema instantiates a new CooldownSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCooldownSchema(totalSeconds int32, remainingSeconds int32, expiration time.Time, reason string) *CooldownSchema {
	this := CooldownSchema{}
	this.TotalSeconds = totalSeconds
	this.RemainingSeconds = remainingSeconds
	this.Expiration = expiration
	this.Reason = reason
	return &this
}

// NewCooldownSchemaWithDefaults instantiates a new CooldownSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCooldownSchemaWithDefaults() *CooldownSchema {
	this := CooldownSchema{}
	return &this
}

// GetTotalSeconds returns the TotalSeconds field value
func (o *CooldownSchema) GetTotalSeconds() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalSeconds
}

// GetTotalSecondsOk returns a tuple with the TotalSeconds field value
// and a boolean to check if the value has been set.
func (o *CooldownSchema) GetTotalSecondsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalSeconds, true
}

// SetTotalSeconds sets field value
func (o *CooldownSchema) SetTotalSeconds(v int32) {
	o.TotalSeconds = v
}

// GetRemainingSeconds returns the RemainingSeconds field value
func (o *CooldownSchema) GetRemainingSeconds() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RemainingSeconds
}

// GetRemainingSecondsOk returns a tuple with the RemainingSeconds field value
// and a boolean to check if the value has been set.
func (o *CooldownSchema) GetRemainingSecondsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemainingSeconds, true
}

// SetRemainingSeconds sets field value
func (o *CooldownSchema) SetRemainingSeconds(v int32) {
	o.RemainingSeconds = v
}

// GetExpiration returns the Expiration field value
func (o *CooldownSchema) GetExpiration() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Expiration
}

// GetExpirationOk returns a tuple with the Expiration field value
// and a boolean to check if the value has been set.
func (o *CooldownSchema) GetExpirationOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Expiration, true
}

// SetExpiration sets field value
func (o *CooldownSchema) SetExpiration(v time.Time) {
	o.Expiration = v
}

// GetReason returns the Reason field value
func (o *CooldownSchema) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *CooldownSchema) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *CooldownSchema) SetReason(v string) {
	o.Reason = v
}

func (o CooldownSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CooldownSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["totalSeconds"] = o.TotalSeconds
	toSerialize["remainingSeconds"] = o.RemainingSeconds
	toSerialize["expiration"] = o.Expiration
	toSerialize["reason"] = o.Reason
	return toSerialize, nil
}

func (o *CooldownSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"totalSeconds",
		"remainingSeconds",
		"expiration",
		"reason",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCooldownSchema := _CooldownSchema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCooldownSchema)

	if err != nil {
		return err
	}

	*o = CooldownSchema(varCooldownSchema)

	return err
}

type NullableCooldownSchema struct {
	value *CooldownSchema
	isSet bool
}

func (v NullableCooldownSchema) Get() *CooldownSchema {
	return v.value
}

func (v *NullableCooldownSchema) Set(val *CooldownSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableCooldownSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableCooldownSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCooldownSchema(val *CooldownSchema) *NullableCooldownSchema {
	return &NullableCooldownSchema{value: val, isSet: true}
}

func (v NullableCooldownSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCooldownSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


