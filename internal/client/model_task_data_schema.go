/*
Artifacts API

 Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TaskDataSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskDataSchema{}

// TaskDataSchema struct for TaskDataSchema
type TaskDataSchema struct {
	// Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`
	// Task details.
	Task TaskSchema `json:"task"`
	// Player details.
	Character CharacterSchema `json:"character"`
}

type _TaskDataSchema TaskDataSchema

// NewTaskDataSchema instantiates a new TaskDataSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskDataSchema(cooldown CooldownSchema, task TaskSchema, character CharacterSchema) *TaskDataSchema {
	this := TaskDataSchema{}
	this.Cooldown = cooldown
	this.Task = task
	this.Character = character
	return &this
}

// NewTaskDataSchemaWithDefaults instantiates a new TaskDataSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskDataSchemaWithDefaults() *TaskDataSchema {
	this := TaskDataSchema{}
	return &this
}

// GetCooldown returns the Cooldown field value
func (o *TaskDataSchema) GetCooldown() CooldownSchema {
	if o == nil {
		var ret CooldownSchema
		return ret
	}

	return o.Cooldown
}

// GetCooldownOk returns a tuple with the Cooldown field value
// and a boolean to check if the value has been set.
func (o *TaskDataSchema) GetCooldownOk() (*CooldownSchema, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cooldown, true
}

// SetCooldown sets field value
func (o *TaskDataSchema) SetCooldown(v CooldownSchema) {
	o.Cooldown = v
}

// GetTask returns the Task field value
func (o *TaskDataSchema) GetTask() TaskSchema {
	if o == nil {
		var ret TaskSchema
		return ret
	}

	return o.Task
}

// GetTaskOk returns a tuple with the Task field value
// and a boolean to check if the value has been set.
func (o *TaskDataSchema) GetTaskOk() (*TaskSchema, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Task, true
}

// SetTask sets field value
func (o *TaskDataSchema) SetTask(v TaskSchema) {
	o.Task = v
}

// GetCharacter returns the Character field value
func (o *TaskDataSchema) GetCharacter() CharacterSchema {
	if o == nil {
		var ret CharacterSchema
		return ret
	}

	return o.Character
}

// GetCharacterOk returns a tuple with the Character field value
// and a boolean to check if the value has been set.
func (o *TaskDataSchema) GetCharacterOk() (*CharacterSchema, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Character, true
}

// SetCharacter sets field value
func (o *TaskDataSchema) SetCharacter(v CharacterSchema) {
	o.Character = v
}

func (o TaskDataSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskDataSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cooldown"] = o.Cooldown
	toSerialize["task"] = o.Task
	toSerialize["character"] = o.Character
	return toSerialize, nil
}

func (o *TaskDataSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cooldown",
		"task",
		"character",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaskDataSchema := _TaskDataSchema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTaskDataSchema)

	if err != nil {
		return err
	}

	*o = TaskDataSchema(varTaskDataSchema)

	return err
}

type NullableTaskDataSchema struct {
	value *TaskDataSchema
	isSet bool
}

func (v NullableTaskDataSchema) Get() *TaskDataSchema {
	return v.value
}

func (v *NullableTaskDataSchema) Set(val *TaskDataSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskDataSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskDataSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskDataSchema(val *TaskDataSchema) *NullableTaskDataSchema {
	return &NullableTaskDataSchema{value: val, isSet: true}
}

func (v NullableTaskDataSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskDataSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


