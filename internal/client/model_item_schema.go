/*
Artifacts API

 Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ItemSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ItemSchema{}

// ItemSchema struct for ItemSchema
type ItemSchema struct {
	// Item name.
	Name string `json:"name"`
	// Item code. This is the item's unique identifier (ID).
	Code string `json:"code"`
	// Item level.
	Level int32 `json:"level"`
	// Item type.
	Type string `json:"type"`
	// Item subtype.
	Subtype string `json:"subtype"`
	// Item description.
	Description string `json:"description"`
	// List of object effects. For equipment, it will include item stats.
	Effects []interface{} `json:"effects,omitempty"`
	// Craft information. If applicable.
	Craft *CraftSchema `json:"craft,omitempty"`
}

type _ItemSchema ItemSchema

// NewItemSchema instantiates a new ItemSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemSchema(name string, code string, level int32, type_ string, subtype string, description string) *ItemSchema {
	this := ItemSchema{}
	this.Name = name
	this.Code = code
	this.Level = level
	this.Type = type_
	this.Subtype = subtype
	this.Description = description
	return &this
}

// NewItemSchemaWithDefaults instantiates a new ItemSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemSchemaWithDefaults() *ItemSchema {
	this := ItemSchema{}
	return &this
}

// GetName returns the Name field value
func (o *ItemSchema) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ItemSchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ItemSchema) SetName(v string) {
	o.Name = v
}

// GetCode returns the Code field value
func (o *ItemSchema) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *ItemSchema) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *ItemSchema) SetCode(v string) {
	o.Code = v
}

// GetLevel returns the Level field value
func (o *ItemSchema) GetLevel() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Level
}

// GetLevelOk returns a tuple with the Level field value
// and a boolean to check if the value has been set.
func (o *ItemSchema) GetLevelOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Level, true
}

// SetLevel sets field value
func (o *ItemSchema) SetLevel(v int32) {
	o.Level = v
}

// GetType returns the Type field value
func (o *ItemSchema) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ItemSchema) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ItemSchema) SetType(v string) {
	o.Type = v
}

// GetSubtype returns the Subtype field value
func (o *ItemSchema) GetSubtype() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subtype
}

// GetSubtypeOk returns a tuple with the Subtype field value
// and a boolean to check if the value has been set.
func (o *ItemSchema) GetSubtypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subtype, true
}

// SetSubtype sets field value
func (o *ItemSchema) SetSubtype(v string) {
	o.Subtype = v
}

// GetDescription returns the Description field value
func (o *ItemSchema) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *ItemSchema) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *ItemSchema) SetDescription(v string) {
	o.Description = v
}

// GetEffects returns the Effects field value if set, zero value otherwise.
func (o *ItemSchema) GetEffects() []interface{} {
	if o == nil || IsNil(o.Effects) {
		var ret []interface{}
		return ret
	}
	return o.Effects
}

// GetEffectsOk returns a tuple with the Effects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSchema) GetEffectsOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.Effects) {
		return nil, false
	}
	return o.Effects, true
}

// HasEffects returns a boolean if a field has been set.
func (o *ItemSchema) HasEffects() bool {
	if o != nil && !IsNil(o.Effects) {
		return true
	}

	return false
}

// SetEffects gets a reference to the given []interface{} and assigns it to the Effects field.
func (o *ItemSchema) SetEffects(v []interface{}) {
	o.Effects = v
}

// GetCraft returns the Craft field value if set, zero value otherwise.
func (o *ItemSchema) GetCraft() CraftSchema {
	if o == nil || IsNil(o.Craft) {
		var ret CraftSchema
		return ret
	}
	return *o.Craft
}

// GetCraftOk returns a tuple with the Craft field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSchema) GetCraftOk() (*CraftSchema, bool) {
	if o == nil || IsNil(o.Craft) {
		return nil, false
	}
	return o.Craft, true
}

// HasCraft returns a boolean if a field has been set.
func (o *ItemSchema) HasCraft() bool {
	if o != nil && !IsNil(o.Craft) {
		return true
	}

	return false
}

// SetCraft gets a reference to the given CraftSchema and assigns it to the Craft field.
func (o *ItemSchema) SetCraft(v CraftSchema) {
	o.Craft = &v
}

func (o ItemSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ItemSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["code"] = o.Code
	toSerialize["level"] = o.Level
	toSerialize["type"] = o.Type
	toSerialize["subtype"] = o.Subtype
	toSerialize["description"] = o.Description
	if !IsNil(o.Effects) {
		toSerialize["effects"] = o.Effects
	}
	if !IsNil(o.Craft) {
		toSerialize["craft"] = o.Craft
	}
	return toSerialize, nil
}

func (o *ItemSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"code",
		"level",
		"type",
		"subtype",
		"description",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varItemSchema := _ItemSchema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varItemSchema)

	if err != nil {
		return err
	}

	*o = ItemSchema(varItemSchema)

	return err
}

type NullableItemSchema struct {
	value *ItemSchema
	isSet bool
}

func (v NullableItemSchema) Get() *ItemSchema {
	return v.value
}

func (v *NullableItemSchema) Set(val *ItemSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableItemSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableItemSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemSchema(val *ItemSchema) *NullableItemSchema {
	return &NullableItemSchema{value: val, isSet: true}
}

func (v NullableItemSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


