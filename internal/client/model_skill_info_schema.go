/*
Artifacts API

 Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SkillInfoSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SkillInfoSchema{}

// SkillInfoSchema struct for SkillInfoSchema
type SkillInfoSchema struct {
	// The amount of xp gained.
	Xp int32 `json:"xp"`
	// Objects received.
	Items []DropSchema `json:"items"`
}

type _SkillInfoSchema SkillInfoSchema

// NewSkillInfoSchema instantiates a new SkillInfoSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkillInfoSchema(xp int32, items []DropSchema) *SkillInfoSchema {
	this := SkillInfoSchema{}
	this.Xp = xp
	this.Items = items
	return &this
}

// NewSkillInfoSchemaWithDefaults instantiates a new SkillInfoSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkillInfoSchemaWithDefaults() *SkillInfoSchema {
	this := SkillInfoSchema{}
	return &this
}

// GetXp returns the Xp field value
func (o *SkillInfoSchema) GetXp() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Xp
}

// GetXpOk returns a tuple with the Xp field value
// and a boolean to check if the value has been set.
func (o *SkillInfoSchema) GetXpOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Xp, true
}

// SetXp sets field value
func (o *SkillInfoSchema) SetXp(v int32) {
	o.Xp = v
}

// GetItems returns the Items field value
func (o *SkillInfoSchema) GetItems() []DropSchema {
	if o == nil {
		var ret []DropSchema
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *SkillInfoSchema) GetItemsOk() ([]DropSchema, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *SkillInfoSchema) SetItems(v []DropSchema) {
	o.Items = v
}

func (o SkillInfoSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SkillInfoSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["xp"] = o.Xp
	toSerialize["items"] = o.Items
	return toSerialize, nil
}

func (o *SkillInfoSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"xp",
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSkillInfoSchema := _SkillInfoSchema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSkillInfoSchema)

	if err != nil {
		return err
	}

	*o = SkillInfoSchema(varSkillInfoSchema)

	return err
}

type NullableSkillInfoSchema struct {
	value *SkillInfoSchema
	isSet bool
}

func (v NullableSkillInfoSchema) Get() *SkillInfoSchema {
	return v.value
}

func (v *NullableSkillInfoSchema) Set(val *SkillInfoSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableSkillInfoSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableSkillInfoSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkillInfoSchema(val *SkillInfoSchema) *NullableSkillInfoSchema {
	return &NullableSkillInfoSchema{value: val, isSet: true}
}

func (v NullableSkillInfoSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkillInfoSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


