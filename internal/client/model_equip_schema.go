/*
Artifacts API

 Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EquipSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EquipSchema{}

// EquipSchema struct for EquipSchema
type EquipSchema struct {
	// Item code.
	Code string `json:"code" validate:"regexp=^[a-zA-Z0-9_-]+$"`
	// Item slot.
	Slot string `json:"slot"`
}

type _EquipSchema EquipSchema

// NewEquipSchema instantiates a new EquipSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEquipSchema(code string, slot string) *EquipSchema {
	this := EquipSchema{}
	this.Code = code
	this.Slot = slot
	return &this
}

// NewEquipSchemaWithDefaults instantiates a new EquipSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEquipSchemaWithDefaults() *EquipSchema {
	this := EquipSchema{}
	return &this
}

// GetCode returns the Code field value
func (o *EquipSchema) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *EquipSchema) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *EquipSchema) SetCode(v string) {
	o.Code = v
}

// GetSlot returns the Slot field value
func (o *EquipSchema) GetSlot() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slot
}

// GetSlotOk returns a tuple with the Slot field value
// and a boolean to check if the value has been set.
func (o *EquipSchema) GetSlotOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slot, true
}

// SetSlot sets field value
func (o *EquipSchema) SetSlot(v string) {
	o.Slot = v
}

func (o EquipSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EquipSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	toSerialize["slot"] = o.Slot
	return toSerialize, nil
}

func (o *EquipSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"slot",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEquipSchema := _EquipSchema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEquipSchema)

	if err != nil {
		return err
	}

	*o = EquipSchema(varEquipSchema)

	return err
}

type NullableEquipSchema struct {
	value *EquipSchema
	isSet bool
}

func (v NullableEquipSchema) Get() *EquipSchema {
	return v.value
}

func (v *NullableEquipSchema) Set(val *EquipSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableEquipSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableEquipSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEquipSchema(val *EquipSchema) *NullableEquipSchema {
	return &NullableEquipSchema{value: val, isSet: true}
}

func (v NullableEquipSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEquipSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


