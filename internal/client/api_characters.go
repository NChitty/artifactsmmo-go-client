/*
Artifacts API

 Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json 

API version: 1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type CharactersAPI interface {

	/*
	CreateCharacterCharactersCreatePost Create Character

	Create new character on your account. You can create up to 5 characters.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateCharacterCharactersCreatePostRequest
	*/
	CreateCharacterCharactersCreatePost(ctx context.Context) ApiCreateCharacterCharactersCreatePostRequest

	// CreateCharacterCharactersCreatePostExecute executes the request
	//  @return CharacterResponseSchema
	CreateCharacterCharactersCreatePostExecute(r ApiCreateCharacterCharactersCreatePostRequest) (*CharacterResponseSchema, *http.Response, error)

	/*
	GetAllCharactersCharactersGet Get All Characters

	Fetch characters details.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetAllCharactersCharactersGetRequest
	*/
	GetAllCharactersCharactersGet(ctx context.Context) ApiGetAllCharactersCharactersGetRequest

	// GetAllCharactersCharactersGetExecute executes the request
	//  @return DataPageCharacterSchema
	GetAllCharactersCharactersGetExecute(r ApiGetAllCharactersCharactersGetRequest) (*DataPageCharacterSchema, *http.Response, error)

	/*
	GetCharacterCharactersNameGet Get Character

	Retrieve the details of a character.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name The character name.
	@return ApiGetCharacterCharactersNameGetRequest
	*/
	GetCharacterCharactersNameGet(ctx context.Context, name string) ApiGetCharacterCharactersNameGetRequest

	// GetCharacterCharactersNameGetExecute executes the request
	//  @return CharacterResponseSchema
	GetCharacterCharactersNameGetExecute(r ApiGetCharacterCharactersNameGetRequest) (*CharacterResponseSchema, *http.Response, error)
}

// CharactersAPIService CharactersAPI service
type CharactersAPIService service

type ApiCreateCharacterCharactersCreatePostRequest struct {
	ctx context.Context
	ApiService CharactersAPI
	addCharacterSchema *AddCharacterSchema
}

func (r ApiCreateCharacterCharactersCreatePostRequest) AddCharacterSchema(addCharacterSchema AddCharacterSchema) ApiCreateCharacterCharactersCreatePostRequest {
	r.addCharacterSchema = &addCharacterSchema
	return r
}

func (r ApiCreateCharacterCharactersCreatePostRequest) Execute() (*CharacterResponseSchema, *http.Response, error) {
	return r.ApiService.CreateCharacterCharactersCreatePostExecute(r)
}

/*
CreateCharacterCharactersCreatePost Create Character

Create new character on your account. You can create up to 5 characters.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateCharacterCharactersCreatePostRequest
*/
func (a *CharactersAPIService) CreateCharacterCharactersCreatePost(ctx context.Context) ApiCreateCharacterCharactersCreatePostRequest {
	return ApiCreateCharacterCharactersCreatePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CharacterResponseSchema
func (a *CharactersAPIService) CreateCharacterCharactersCreatePostExecute(r ApiCreateCharacterCharactersCreatePostRequest) (*CharacterResponseSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CharacterResponseSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CharactersAPIService.CreateCharacterCharactersCreatePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/characters/create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addCharacterSchema == nil {
		return localVarReturnValue, nil, reportError("addCharacterSchema is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addCharacterSchema
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAllCharactersCharactersGetRequest struct {
	ctx context.Context
	ApiService CharactersAPI
	sort *string
	page *int32
	size *int32
}

// Default sort by total XP.
func (r ApiGetAllCharactersCharactersGetRequest) Sort(sort string) ApiGetAllCharactersCharactersGetRequest {
	r.sort = &sort
	return r
}

// Page number
func (r ApiGetAllCharactersCharactersGetRequest) Page(page int32) ApiGetAllCharactersCharactersGetRequest {
	r.page = &page
	return r
}

// Page size
func (r ApiGetAllCharactersCharactersGetRequest) Size(size int32) ApiGetAllCharactersCharactersGetRequest {
	r.size = &size
	return r
}

func (r ApiGetAllCharactersCharactersGetRequest) Execute() (*DataPageCharacterSchema, *http.Response, error) {
	return r.ApiService.GetAllCharactersCharactersGetExecute(r)
}

/*
GetAllCharactersCharactersGet Get All Characters

Fetch characters details.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAllCharactersCharactersGetRequest
*/
func (a *CharactersAPIService) GetAllCharactersCharactersGet(ctx context.Context) ApiGetAllCharactersCharactersGetRequest {
	return ApiGetAllCharactersCharactersGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DataPageCharacterSchema
func (a *CharactersAPIService) GetAllCharactersCharactersGetExecute(r ApiGetAllCharactersCharactersGetRequest) (*DataPageCharacterSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DataPageCharacterSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CharactersAPIService.GetAllCharactersCharactersGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/characters/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	} else {
		var defaultValue int32 = 50
		r.size = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCharacterCharactersNameGetRequest struct {
	ctx context.Context
	ApiService CharactersAPI
	name string
}

func (r ApiGetCharacterCharactersNameGetRequest) Execute() (*CharacterResponseSchema, *http.Response, error) {
	return r.ApiService.GetCharacterCharactersNameGetExecute(r)
}

/*
GetCharacterCharactersNameGet Get Character

Retrieve the details of a character.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name The character name.
 @return ApiGetCharacterCharactersNameGetRequest
*/
func (a *CharactersAPIService) GetCharacterCharactersNameGet(ctx context.Context, name string) ApiGetCharacterCharactersNameGetRequest {
	return ApiGetCharacterCharactersNameGetRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return CharacterResponseSchema
func (a *CharactersAPIService) GetCharacterCharactersNameGetExecute(r ApiGetCharacterCharactersNameGetRequest) (*CharacterResponseSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CharacterResponseSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CharactersAPIService.GetCharacterCharactersNameGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/characters/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
