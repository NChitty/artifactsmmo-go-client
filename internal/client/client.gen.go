// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetStatusGet request
	GetStatusGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAccountAccountsCreatePostWithBody request with any body
	CreateAccountAccountsCreatePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAccountAccountsCreatePost(ctx context.Context, body CreateAccountAccountsCreatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllCharactersCharactersGet request
	GetAllCharactersCharactersGet(ctx context.Context, params *GetAllCharactersCharactersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCharacterCharactersCreatePostWithBody request with any body
	CreateCharacterCharactersCreatePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCharacterCharactersCreatePost(ctx context.Context, body CreateCharacterCharactersCreatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharacterCharactersNameGet request
	GetCharacterCharactersNameGet(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllEventsEventsGet request
	GetAllEventsEventsGet(ctx context.Context, params *GetAllEventsEventsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllGeItemsGeGet request
	GetAllGeItemsGeGet(ctx context.Context, params *GetAllGeItemsGeGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGeItemGeCodeGet request
	GetGeItemGeCodeGet(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllItemsItemsGet request
	GetAllItemsItemsGet(ctx context.Context, params *GetAllItemsItemsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetItemItemsCodeGet request
	GetItemItemsCodeGet(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllMapsMapsGet request
	GetAllMapsMapsGet(ctx context.Context, params *GetAllMapsMapsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMapMapsXYGet request
	GetMapMapsXYGet(ctx context.Context, x int, y int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllMonstersMonstersGet request
	GetAllMonstersMonstersGet(ctx context.Context, params *GetAllMonstersMonstersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMonsterMonstersCodeGet request
	GetMonsterMonstersCodeGet(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBankGoldsMyBankGoldGet request
	GetBankGoldsMyBankGoldGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBankItemsMyBankItemsGet request
	GetBankItemsMyBankItemsGet(ctx context.Context, params *GetBankItemsMyBankItemsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChangePasswordMyChangePasswordPostWithBody request with any body
	ChangePasswordMyChangePasswordPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ChangePasswordMyChangePasswordPost(ctx context.Context, body ChangePasswordMyChangePasswordPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMyCharactersMyCharactersGet request
	GetMyCharactersMyCharactersGet(ctx context.Context, params *GetMyCharactersMyCharactersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllCharactersLogsMyLogsGet request
	GetAllCharactersLogsMyLogsGet(ctx context.Context, params *GetAllCharactersLogsMyLogsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionDepositBankMyNameActionBankDepositPostWithBody request with any body
	ActionDepositBankMyNameActionBankDepositPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionDepositBankMyNameActionBankDepositPost(ctx context.Context, name string, body ActionDepositBankMyNameActionBankDepositPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionDepositBankGoldMyNameActionBankDepositGoldPostWithBody request with any body
	ActionDepositBankGoldMyNameActionBankDepositGoldPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionDepositBankGoldMyNameActionBankDepositGoldPost(ctx context.Context, name string, body ActionDepositBankGoldMyNameActionBankDepositGoldPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionWithdrawBankMyNameActionBankWithdrawPostWithBody request with any body
	ActionWithdrawBankMyNameActionBankWithdrawPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionWithdrawBankMyNameActionBankWithdrawPost(ctx context.Context, name string, body ActionWithdrawBankMyNameActionBankWithdrawPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostWithBody request with any body
	ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPost(ctx context.Context, name string, body ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionCraftingMyNameActionCraftingPostWithBody request with any body
	ActionCraftingMyNameActionCraftingPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionCraftingMyNameActionCraftingPost(ctx context.Context, name string, body ActionCraftingMyNameActionCraftingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionDeleteItemMyNameActionDeletePostWithBody request with any body
	ActionDeleteItemMyNameActionDeletePostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionDeleteItemMyNameActionDeletePost(ctx context.Context, name string, body ActionDeleteItemMyNameActionDeletePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionEquipItemMyNameActionEquipPostWithBody request with any body
	ActionEquipItemMyNameActionEquipPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionEquipItemMyNameActionEquipPost(ctx context.Context, name string, body ActionEquipItemMyNameActionEquipPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionFightMyNameActionFightPost request
	ActionFightMyNameActionFightPost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionGatheringMyNameActionGatheringPost request
	ActionGatheringMyNameActionGatheringPost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionGeBuyItemMyNameActionGeBuyPostWithBody request with any body
	ActionGeBuyItemMyNameActionGeBuyPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionGeBuyItemMyNameActionGeBuyPost(ctx context.Context, name string, body ActionGeBuyItemMyNameActionGeBuyPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionGeSellItemMyNameActionGeSellPostWithBody request with any body
	ActionGeSellItemMyNameActionGeSellPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionGeSellItemMyNameActionGeSellPost(ctx context.Context, name string, body ActionGeSellItemMyNameActionGeSellPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionMoveMyNameActionMovePostWithBody request with any body
	ActionMoveMyNameActionMovePostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionMoveMyNameActionMovePost(ctx context.Context, name string, body ActionMoveMyNameActionMovePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionRecyclingMyNameActionRecyclingPostWithBody request with any body
	ActionRecyclingMyNameActionRecyclingPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionRecyclingMyNameActionRecyclingPost(ctx context.Context, name string, body ActionRecyclingMyNameActionRecyclingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionCompleteTaskMyNameActionTaskCompletePost request
	ActionCompleteTaskMyNameActionTaskCompletePost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionTaskExchangeMyNameActionTaskExchangePost request
	ActionTaskExchangeMyNameActionTaskExchangePost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionAcceptNewTaskMyNameActionTaskNewPost request
	ActionAcceptNewTaskMyNameActionTaskNewPost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionUnequipItemMyNameActionUnequipPostWithBody request with any body
	ActionUnequipItemMyNameActionUnequipPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionUnequipItemMyNameActionUnequipPost(ctx context.Context, name string, body ActionUnequipItemMyNameActionUnequipPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharacterLogsMyNameLogsGet request
	GetCharacterLogsMyNameLogsGet(ctx context.Context, name string, params *GetCharacterLogsMyNameLogsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllResourcesResourcesGet request
	GetAllResourcesResourcesGet(ctx context.Context, params *GetAllResourcesResourcesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetResourcesResourcesCodeGet request
	GetResourcesResourcesCodeGet(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenerateTokenTokenPost request
	GenerateTokenTokenPost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetStatusGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAccountAccountsCreatePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAccountAccountsCreatePostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAccountAccountsCreatePost(ctx context.Context, body CreateAccountAccountsCreatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAccountAccountsCreatePostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllCharactersCharactersGet(ctx context.Context, params *GetAllCharactersCharactersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllCharactersCharactersGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCharacterCharactersCreatePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCharacterCharactersCreatePostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCharacterCharactersCreatePost(ctx context.Context, body CreateCharacterCharactersCreatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCharacterCharactersCreatePostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharacterCharactersNameGet(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharacterCharactersNameGetRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllEventsEventsGet(ctx context.Context, params *GetAllEventsEventsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllEventsEventsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllGeItemsGeGet(ctx context.Context, params *GetAllGeItemsGeGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllGeItemsGeGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGeItemGeCodeGet(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGeItemGeCodeGetRequest(c.Server, code)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllItemsItemsGet(ctx context.Context, params *GetAllItemsItemsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllItemsItemsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetItemItemsCodeGet(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetItemItemsCodeGetRequest(c.Server, code)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllMapsMapsGet(ctx context.Context, params *GetAllMapsMapsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllMapsMapsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMapMapsXYGet(ctx context.Context, x int, y int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMapMapsXYGetRequest(c.Server, x, y)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllMonstersMonstersGet(ctx context.Context, params *GetAllMonstersMonstersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllMonstersMonstersGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMonsterMonstersCodeGet(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMonsterMonstersCodeGetRequest(c.Server, code)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBankGoldsMyBankGoldGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBankGoldsMyBankGoldGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBankItemsMyBankItemsGet(ctx context.Context, params *GetBankItemsMyBankItemsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBankItemsMyBankItemsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangePasswordMyChangePasswordPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangePasswordMyChangePasswordPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangePasswordMyChangePasswordPost(ctx context.Context, body ChangePasswordMyChangePasswordPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangePasswordMyChangePasswordPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyCharactersMyCharactersGet(ctx context.Context, params *GetMyCharactersMyCharactersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMyCharactersMyCharactersGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllCharactersLogsMyLogsGet(ctx context.Context, params *GetAllCharactersLogsMyLogsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllCharactersLogsMyLogsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionDepositBankMyNameActionBankDepositPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionDepositBankMyNameActionBankDepositPostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionDepositBankMyNameActionBankDepositPost(ctx context.Context, name string, body ActionDepositBankMyNameActionBankDepositPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionDepositBankMyNameActionBankDepositPostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionDepositBankGoldMyNameActionBankDepositGoldPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionDepositBankGoldMyNameActionBankDepositGoldPostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionDepositBankGoldMyNameActionBankDepositGoldPost(ctx context.Context, name string, body ActionDepositBankGoldMyNameActionBankDepositGoldPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionDepositBankGoldMyNameActionBankDepositGoldPostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionWithdrawBankMyNameActionBankWithdrawPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionWithdrawBankMyNameActionBankWithdrawPostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionWithdrawBankMyNameActionBankWithdrawPost(ctx context.Context, name string, body ActionWithdrawBankMyNameActionBankWithdrawPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionWithdrawBankMyNameActionBankWithdrawPostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPost(ctx context.Context, name string, body ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionCraftingMyNameActionCraftingPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionCraftingMyNameActionCraftingPostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionCraftingMyNameActionCraftingPost(ctx context.Context, name string, body ActionCraftingMyNameActionCraftingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionCraftingMyNameActionCraftingPostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionDeleteItemMyNameActionDeletePostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionDeleteItemMyNameActionDeletePostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionDeleteItemMyNameActionDeletePost(ctx context.Context, name string, body ActionDeleteItemMyNameActionDeletePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionDeleteItemMyNameActionDeletePostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionEquipItemMyNameActionEquipPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionEquipItemMyNameActionEquipPostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionEquipItemMyNameActionEquipPost(ctx context.Context, name string, body ActionEquipItemMyNameActionEquipPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionEquipItemMyNameActionEquipPostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionFightMyNameActionFightPost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionFightMyNameActionFightPostRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionGatheringMyNameActionGatheringPost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionGatheringMyNameActionGatheringPostRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionGeBuyItemMyNameActionGeBuyPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionGeBuyItemMyNameActionGeBuyPostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionGeBuyItemMyNameActionGeBuyPost(ctx context.Context, name string, body ActionGeBuyItemMyNameActionGeBuyPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionGeBuyItemMyNameActionGeBuyPostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionGeSellItemMyNameActionGeSellPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionGeSellItemMyNameActionGeSellPostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionGeSellItemMyNameActionGeSellPost(ctx context.Context, name string, body ActionGeSellItemMyNameActionGeSellPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionGeSellItemMyNameActionGeSellPostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionMoveMyNameActionMovePostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionMoveMyNameActionMovePostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionMoveMyNameActionMovePost(ctx context.Context, name string, body ActionMoveMyNameActionMovePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionMoveMyNameActionMovePostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionRecyclingMyNameActionRecyclingPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionRecyclingMyNameActionRecyclingPostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionRecyclingMyNameActionRecyclingPost(ctx context.Context, name string, body ActionRecyclingMyNameActionRecyclingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionRecyclingMyNameActionRecyclingPostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionCompleteTaskMyNameActionTaskCompletePost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionCompleteTaskMyNameActionTaskCompletePostRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionTaskExchangeMyNameActionTaskExchangePost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionTaskExchangeMyNameActionTaskExchangePostRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionAcceptNewTaskMyNameActionTaskNewPost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionAcceptNewTaskMyNameActionTaskNewPostRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionUnequipItemMyNameActionUnequipPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionUnequipItemMyNameActionUnequipPostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionUnequipItemMyNameActionUnequipPost(ctx context.Context, name string, body ActionUnequipItemMyNameActionUnequipPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionUnequipItemMyNameActionUnequipPostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharacterLogsMyNameLogsGet(ctx context.Context, name string, params *GetCharacterLogsMyNameLogsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharacterLogsMyNameLogsGetRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllResourcesResourcesGet(ctx context.Context, params *GetAllResourcesResourcesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllResourcesResourcesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetResourcesResourcesCodeGet(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetResourcesResourcesCodeGetRequest(c.Server, code)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateTokenTokenPost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateTokenTokenPostRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetStatusGetRequest generates requests for GetStatusGet
func NewGetStatusGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAccountAccountsCreatePostRequest calls the generic CreateAccountAccountsCreatePost builder with application/json body
func NewCreateAccountAccountsCreatePostRequest(server string, body CreateAccountAccountsCreatePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAccountAccountsCreatePostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAccountAccountsCreatePostRequestWithBody generates requests for CreateAccountAccountsCreatePost with any type of body
func NewCreateAccountAccountsCreatePostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllCharactersCharactersGetRequest generates requests for GetAllCharactersCharactersGet
func NewGetAllCharactersCharactersGetRequest(server string, params *GetAllCharactersCharactersGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCharacterCharactersCreatePostRequest calls the generic CreateCharacterCharactersCreatePost builder with application/json body
func NewCreateCharacterCharactersCreatePostRequest(server string, body CreateCharacterCharactersCreatePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCharacterCharactersCreatePostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateCharacterCharactersCreatePostRequestWithBody generates requests for CreateCharacterCharactersCreatePost with any type of body
func NewCreateCharacterCharactersCreatePostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCharacterCharactersNameGetRequest generates requests for GetCharacterCharactersNameGet
func NewGetCharacterCharactersNameGetRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllEventsEventsGetRequest generates requests for GetAllEventsEventsGet
func NewGetAllEventsEventsGetRequest(server string, params *GetAllEventsEventsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllGeItemsGeGetRequest generates requests for GetAllGeItemsGeGet
func NewGetAllGeItemsGeGetRequest(server string, params *GetAllGeItemsGeGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ge/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGeItemGeCodeGetRequest generates requests for GetGeItemGeCodeGet
func NewGetGeItemGeCodeGetRequest(server string, code string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ge/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllItemsItemsGetRequest generates requests for GetAllItemsItemsGet
func NewGetAllItemsItemsGetRequest(server string, params *GetAllItemsItemsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/items/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MinLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_level", runtime.ParamLocationQuery, *params.MinLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_level", runtime.ParamLocationQuery, *params.MaxLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CraftSkill != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "craft_skill", runtime.ParamLocationQuery, *params.CraftSkill); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CraftMaterial != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "craft_material", runtime.ParamLocationQuery, *params.CraftMaterial); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetItemItemsCodeGetRequest generates requests for GetItemItemsCodeGet
func NewGetItemItemsCodeGetRequest(server string, code string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllMapsMapsGetRequest generates requests for GetAllMapsMapsGet
func NewGetAllMapsMapsGetRequest(server string, params *GetAllMapsMapsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/maps/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ContentType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "content_type", runtime.ParamLocationQuery, *params.ContentType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContentCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "content_code", runtime.ParamLocationQuery, *params.ContentCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMapMapsXYGetRequest generates requests for GetMapMapsXYGet
func NewGetMapMapsXYGetRequest(server string, x int, y int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "x", runtime.ParamLocationPath, x)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "y", runtime.ParamLocationPath, y)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/maps/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllMonstersMonstersGetRequest generates requests for GetAllMonstersMonstersGet
func NewGetAllMonstersMonstersGetRequest(server string, params *GetAllMonstersMonstersGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/monsters/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MinLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_level", runtime.ParamLocationQuery, *params.MinLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_level", runtime.ParamLocationQuery, *params.MaxLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Drop != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "drop", runtime.ParamLocationQuery, *params.Drop); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMonsterMonstersCodeGetRequest generates requests for GetMonsterMonstersCodeGet
func NewGetMonsterMonstersCodeGetRequest(server string, code string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/monsters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBankGoldsMyBankGoldGetRequest generates requests for GetBankGoldsMyBankGoldGet
func NewGetBankGoldsMyBankGoldGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/bank/gold")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBankItemsMyBankItemsGetRequest generates requests for GetBankItemsMyBankItemsGet
func NewGetBankItemsMyBankItemsGetRequest(server string, params *GetBankItemsMyBankItemsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/bank/items")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangePasswordMyChangePasswordPostRequest calls the generic ChangePasswordMyChangePasswordPost builder with application/json body
func NewChangePasswordMyChangePasswordPostRequest(server string, body ChangePasswordMyChangePasswordPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewChangePasswordMyChangePasswordPostRequestWithBody(server, "application/json", bodyReader)
}

// NewChangePasswordMyChangePasswordPostRequestWithBody generates requests for ChangePasswordMyChangePasswordPost with any type of body
func NewChangePasswordMyChangePasswordPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/change_password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMyCharactersMyCharactersGetRequest generates requests for GetMyCharactersMyCharactersGet
func NewGetMyCharactersMyCharactersGetRequest(server string, params *GetMyCharactersMyCharactersGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/characters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllCharactersLogsMyLogsGetRequest generates requests for GetAllCharactersLogsMyLogsGet
func NewGetAllCharactersLogsMyLogsGetRequest(server string, params *GetAllCharactersLogsMyLogsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/logs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActionDepositBankMyNameActionBankDepositPostRequest calls the generic ActionDepositBankMyNameActionBankDepositPost builder with application/json body
func NewActionDepositBankMyNameActionBankDepositPostRequest(server string, name string, body ActionDepositBankMyNameActionBankDepositPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionDepositBankMyNameActionBankDepositPostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionDepositBankMyNameActionBankDepositPostRequestWithBody generates requests for ActionDepositBankMyNameActionBankDepositPost with any type of body
func NewActionDepositBankMyNameActionBankDepositPostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/bank/deposit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionDepositBankGoldMyNameActionBankDepositGoldPostRequest calls the generic ActionDepositBankGoldMyNameActionBankDepositGoldPost builder with application/json body
func NewActionDepositBankGoldMyNameActionBankDepositGoldPostRequest(server string, name string, body ActionDepositBankGoldMyNameActionBankDepositGoldPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionDepositBankGoldMyNameActionBankDepositGoldPostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionDepositBankGoldMyNameActionBankDepositGoldPostRequestWithBody generates requests for ActionDepositBankGoldMyNameActionBankDepositGoldPost with any type of body
func NewActionDepositBankGoldMyNameActionBankDepositGoldPostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/bank/deposit/gold", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionWithdrawBankMyNameActionBankWithdrawPostRequest calls the generic ActionWithdrawBankMyNameActionBankWithdrawPost builder with application/json body
func NewActionWithdrawBankMyNameActionBankWithdrawPostRequest(server string, name string, body ActionWithdrawBankMyNameActionBankWithdrawPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionWithdrawBankMyNameActionBankWithdrawPostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionWithdrawBankMyNameActionBankWithdrawPostRequestWithBody generates requests for ActionWithdrawBankMyNameActionBankWithdrawPost with any type of body
func NewActionWithdrawBankMyNameActionBankWithdrawPostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/bank/withdraw", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostRequest calls the generic ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPost builder with application/json body
func NewActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostRequest(server string, name string, body ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostRequestWithBody generates requests for ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPost with any type of body
func NewActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/bank/withdraw/gold", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionCraftingMyNameActionCraftingPostRequest calls the generic ActionCraftingMyNameActionCraftingPost builder with application/json body
func NewActionCraftingMyNameActionCraftingPostRequest(server string, name string, body ActionCraftingMyNameActionCraftingPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionCraftingMyNameActionCraftingPostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionCraftingMyNameActionCraftingPostRequestWithBody generates requests for ActionCraftingMyNameActionCraftingPost with any type of body
func NewActionCraftingMyNameActionCraftingPostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/crafting", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionDeleteItemMyNameActionDeletePostRequest calls the generic ActionDeleteItemMyNameActionDeletePost builder with application/json body
func NewActionDeleteItemMyNameActionDeletePostRequest(server string, name string, body ActionDeleteItemMyNameActionDeletePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionDeleteItemMyNameActionDeletePostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionDeleteItemMyNameActionDeletePostRequestWithBody generates requests for ActionDeleteItemMyNameActionDeletePost with any type of body
func NewActionDeleteItemMyNameActionDeletePostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionEquipItemMyNameActionEquipPostRequest calls the generic ActionEquipItemMyNameActionEquipPost builder with application/json body
func NewActionEquipItemMyNameActionEquipPostRequest(server string, name string, body ActionEquipItemMyNameActionEquipPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionEquipItemMyNameActionEquipPostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionEquipItemMyNameActionEquipPostRequestWithBody generates requests for ActionEquipItemMyNameActionEquipPost with any type of body
func NewActionEquipItemMyNameActionEquipPostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/equip/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionFightMyNameActionFightPostRequest generates requests for ActionFightMyNameActionFightPost
func NewActionFightMyNameActionFightPostRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/fight", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActionGatheringMyNameActionGatheringPostRequest generates requests for ActionGatheringMyNameActionGatheringPost
func NewActionGatheringMyNameActionGatheringPostRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/gathering", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActionGeBuyItemMyNameActionGeBuyPostRequest calls the generic ActionGeBuyItemMyNameActionGeBuyPost builder with application/json body
func NewActionGeBuyItemMyNameActionGeBuyPostRequest(server string, name string, body ActionGeBuyItemMyNameActionGeBuyPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionGeBuyItemMyNameActionGeBuyPostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionGeBuyItemMyNameActionGeBuyPostRequestWithBody generates requests for ActionGeBuyItemMyNameActionGeBuyPost with any type of body
func NewActionGeBuyItemMyNameActionGeBuyPostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/ge/buy", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionGeSellItemMyNameActionGeSellPostRequest calls the generic ActionGeSellItemMyNameActionGeSellPost builder with application/json body
func NewActionGeSellItemMyNameActionGeSellPostRequest(server string, name string, body ActionGeSellItemMyNameActionGeSellPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionGeSellItemMyNameActionGeSellPostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionGeSellItemMyNameActionGeSellPostRequestWithBody generates requests for ActionGeSellItemMyNameActionGeSellPost with any type of body
func NewActionGeSellItemMyNameActionGeSellPostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/ge/sell", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionMoveMyNameActionMovePostRequest calls the generic ActionMoveMyNameActionMovePost builder with application/json body
func NewActionMoveMyNameActionMovePostRequest(server string, name string, body ActionMoveMyNameActionMovePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionMoveMyNameActionMovePostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionMoveMyNameActionMovePostRequestWithBody generates requests for ActionMoveMyNameActionMovePost with any type of body
func NewActionMoveMyNameActionMovePostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/move", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionRecyclingMyNameActionRecyclingPostRequest calls the generic ActionRecyclingMyNameActionRecyclingPost builder with application/json body
func NewActionRecyclingMyNameActionRecyclingPostRequest(server string, name string, body ActionRecyclingMyNameActionRecyclingPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionRecyclingMyNameActionRecyclingPostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionRecyclingMyNameActionRecyclingPostRequestWithBody generates requests for ActionRecyclingMyNameActionRecyclingPost with any type of body
func NewActionRecyclingMyNameActionRecyclingPostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/recycling", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionCompleteTaskMyNameActionTaskCompletePostRequest generates requests for ActionCompleteTaskMyNameActionTaskCompletePost
func NewActionCompleteTaskMyNameActionTaskCompletePostRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/task/complete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActionTaskExchangeMyNameActionTaskExchangePostRequest generates requests for ActionTaskExchangeMyNameActionTaskExchangePost
func NewActionTaskExchangeMyNameActionTaskExchangePostRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/task/exchange", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActionAcceptNewTaskMyNameActionTaskNewPostRequest generates requests for ActionAcceptNewTaskMyNameActionTaskNewPost
func NewActionAcceptNewTaskMyNameActionTaskNewPostRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/task/new", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActionUnequipItemMyNameActionUnequipPostRequest calls the generic ActionUnequipItemMyNameActionUnequipPost builder with application/json body
func NewActionUnequipItemMyNameActionUnequipPostRequest(server string, name string, body ActionUnequipItemMyNameActionUnequipPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionUnequipItemMyNameActionUnequipPostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionUnequipItemMyNameActionUnequipPostRequestWithBody generates requests for ActionUnequipItemMyNameActionUnequipPost with any type of body
func NewActionUnequipItemMyNameActionUnequipPostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/unequip/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCharacterLogsMyNameLogsGetRequest generates requests for GetCharacterLogsMyNameLogsGet
func NewGetCharacterLogsMyNameLogsGetRequest(server string, name string, params *GetCharacterLogsMyNameLogsGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/logs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllResourcesResourcesGetRequest generates requests for GetAllResourcesResourcesGet
func NewGetAllResourcesResourcesGetRequest(server string, params *GetAllResourcesResourcesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MinLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_level", runtime.ParamLocationQuery, *params.MinLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_level", runtime.ParamLocationQuery, *params.MaxLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skill != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skill", runtime.ParamLocationQuery, *params.Skill); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Drop != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "drop", runtime.ParamLocationQuery, *params.Drop); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetResourcesResourcesCodeGetRequest generates requests for GetResourcesResourcesCodeGet
func NewGetResourcesResourcesCodeGetRequest(server string, code string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGenerateTokenTokenPostRequest generates requests for GenerateTokenTokenPost
func NewGenerateTokenTokenPostRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/token/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetStatusGetWithResponse request
	GetStatusGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusGetResponse, error)

	// CreateAccountAccountsCreatePostWithBodyWithResponse request with any body
	CreateAccountAccountsCreatePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccountAccountsCreatePostResponse, error)

	CreateAccountAccountsCreatePostWithResponse(ctx context.Context, body CreateAccountAccountsCreatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAccountAccountsCreatePostResponse, error)

	// GetAllCharactersCharactersGetWithResponse request
	GetAllCharactersCharactersGetWithResponse(ctx context.Context, params *GetAllCharactersCharactersGetParams, reqEditors ...RequestEditorFn) (*GetAllCharactersCharactersGetResponse, error)

	// CreateCharacterCharactersCreatePostWithBodyWithResponse request with any body
	CreateCharacterCharactersCreatePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCharacterCharactersCreatePostResponse, error)

	CreateCharacterCharactersCreatePostWithResponse(ctx context.Context, body CreateCharacterCharactersCreatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCharacterCharactersCreatePostResponse, error)

	// GetCharacterCharactersNameGetWithResponse request
	GetCharacterCharactersNameGetWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetCharacterCharactersNameGetResponse, error)

	// GetAllEventsEventsGetWithResponse request
	GetAllEventsEventsGetWithResponse(ctx context.Context, params *GetAllEventsEventsGetParams, reqEditors ...RequestEditorFn) (*GetAllEventsEventsGetResponse, error)

	// GetAllGeItemsGeGetWithResponse request
	GetAllGeItemsGeGetWithResponse(ctx context.Context, params *GetAllGeItemsGeGetParams, reqEditors ...RequestEditorFn) (*GetAllGeItemsGeGetResponse, error)

	// GetGeItemGeCodeGetWithResponse request
	GetGeItemGeCodeGetWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetGeItemGeCodeGetResponse, error)

	// GetAllItemsItemsGetWithResponse request
	GetAllItemsItemsGetWithResponse(ctx context.Context, params *GetAllItemsItemsGetParams, reqEditors ...RequestEditorFn) (*GetAllItemsItemsGetResponse, error)

	// GetItemItemsCodeGetWithResponse request
	GetItemItemsCodeGetWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetItemItemsCodeGetResponse, error)

	// GetAllMapsMapsGetWithResponse request
	GetAllMapsMapsGetWithResponse(ctx context.Context, params *GetAllMapsMapsGetParams, reqEditors ...RequestEditorFn) (*GetAllMapsMapsGetResponse, error)

	// GetMapMapsXYGetWithResponse request
	GetMapMapsXYGetWithResponse(ctx context.Context, x int, y int, reqEditors ...RequestEditorFn) (*GetMapMapsXYGetResponse, error)

	// GetAllMonstersMonstersGetWithResponse request
	GetAllMonstersMonstersGetWithResponse(ctx context.Context, params *GetAllMonstersMonstersGetParams, reqEditors ...RequestEditorFn) (*GetAllMonstersMonstersGetResponse, error)

	// GetMonsterMonstersCodeGetWithResponse request
	GetMonsterMonstersCodeGetWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetMonsterMonstersCodeGetResponse, error)

	// GetBankGoldsMyBankGoldGetWithResponse request
	GetBankGoldsMyBankGoldGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBankGoldsMyBankGoldGetResponse, error)

	// GetBankItemsMyBankItemsGetWithResponse request
	GetBankItemsMyBankItemsGetWithResponse(ctx context.Context, params *GetBankItemsMyBankItemsGetParams, reqEditors ...RequestEditorFn) (*GetBankItemsMyBankItemsGetResponse, error)

	// ChangePasswordMyChangePasswordPostWithBodyWithResponse request with any body
	ChangePasswordMyChangePasswordPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangePasswordMyChangePasswordPostResponse, error)

	ChangePasswordMyChangePasswordPostWithResponse(ctx context.Context, body ChangePasswordMyChangePasswordPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangePasswordMyChangePasswordPostResponse, error)

	// GetMyCharactersMyCharactersGetWithResponse request
	GetMyCharactersMyCharactersGetWithResponse(ctx context.Context, params *GetMyCharactersMyCharactersGetParams, reqEditors ...RequestEditorFn) (*GetMyCharactersMyCharactersGetResponse, error)

	// GetAllCharactersLogsMyLogsGetWithResponse request
	GetAllCharactersLogsMyLogsGetWithResponse(ctx context.Context, params *GetAllCharactersLogsMyLogsGetParams, reqEditors ...RequestEditorFn) (*GetAllCharactersLogsMyLogsGetResponse, error)

	// ActionDepositBankMyNameActionBankDepositPostWithBodyWithResponse request with any body
	ActionDepositBankMyNameActionBankDepositPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionDepositBankMyNameActionBankDepositPostResponse, error)

	ActionDepositBankMyNameActionBankDepositPostWithResponse(ctx context.Context, name string, body ActionDepositBankMyNameActionBankDepositPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionDepositBankMyNameActionBankDepositPostResponse, error)

	// ActionDepositBankGoldMyNameActionBankDepositGoldPostWithBodyWithResponse request with any body
	ActionDepositBankGoldMyNameActionBankDepositGoldPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse, error)

	ActionDepositBankGoldMyNameActionBankDepositGoldPostWithResponse(ctx context.Context, name string, body ActionDepositBankGoldMyNameActionBankDepositGoldPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse, error)

	// ActionWithdrawBankMyNameActionBankWithdrawPostWithBodyWithResponse request with any body
	ActionWithdrawBankMyNameActionBankWithdrawPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionWithdrawBankMyNameActionBankWithdrawPostResponse, error)

	ActionWithdrawBankMyNameActionBankWithdrawPostWithResponse(ctx context.Context, name string, body ActionWithdrawBankMyNameActionBankWithdrawPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionWithdrawBankMyNameActionBankWithdrawPostResponse, error)

	// ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostWithBodyWithResponse request with any body
	ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse, error)

	ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostWithResponse(ctx context.Context, name string, body ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse, error)

	// ActionCraftingMyNameActionCraftingPostWithBodyWithResponse request with any body
	ActionCraftingMyNameActionCraftingPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionCraftingMyNameActionCraftingPostResponse, error)

	ActionCraftingMyNameActionCraftingPostWithResponse(ctx context.Context, name string, body ActionCraftingMyNameActionCraftingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionCraftingMyNameActionCraftingPostResponse, error)

	// ActionDeleteItemMyNameActionDeletePostWithBodyWithResponse request with any body
	ActionDeleteItemMyNameActionDeletePostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionDeleteItemMyNameActionDeletePostResponse, error)

	ActionDeleteItemMyNameActionDeletePostWithResponse(ctx context.Context, name string, body ActionDeleteItemMyNameActionDeletePostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionDeleteItemMyNameActionDeletePostResponse, error)

	// ActionEquipItemMyNameActionEquipPostWithBodyWithResponse request with any body
	ActionEquipItemMyNameActionEquipPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionEquipItemMyNameActionEquipPostResponse, error)

	ActionEquipItemMyNameActionEquipPostWithResponse(ctx context.Context, name string, body ActionEquipItemMyNameActionEquipPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionEquipItemMyNameActionEquipPostResponse, error)

	// ActionFightMyNameActionFightPostWithResponse request
	ActionFightMyNameActionFightPostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionFightMyNameActionFightPostResponse, error)

	// ActionGatheringMyNameActionGatheringPostWithResponse request
	ActionGatheringMyNameActionGatheringPostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionGatheringMyNameActionGatheringPostResponse, error)

	// ActionGeBuyItemMyNameActionGeBuyPostWithBodyWithResponse request with any body
	ActionGeBuyItemMyNameActionGeBuyPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionGeBuyItemMyNameActionGeBuyPostResponse, error)

	ActionGeBuyItemMyNameActionGeBuyPostWithResponse(ctx context.Context, name string, body ActionGeBuyItemMyNameActionGeBuyPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionGeBuyItemMyNameActionGeBuyPostResponse, error)

	// ActionGeSellItemMyNameActionGeSellPostWithBodyWithResponse request with any body
	ActionGeSellItemMyNameActionGeSellPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionGeSellItemMyNameActionGeSellPostResponse, error)

	ActionGeSellItemMyNameActionGeSellPostWithResponse(ctx context.Context, name string, body ActionGeSellItemMyNameActionGeSellPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionGeSellItemMyNameActionGeSellPostResponse, error)

	// ActionMoveMyNameActionMovePostWithBodyWithResponse request with any body
	ActionMoveMyNameActionMovePostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionMoveMyNameActionMovePostResponse, error)

	ActionMoveMyNameActionMovePostWithResponse(ctx context.Context, name string, body ActionMoveMyNameActionMovePostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionMoveMyNameActionMovePostResponse, error)

	// ActionRecyclingMyNameActionRecyclingPostWithBodyWithResponse request with any body
	ActionRecyclingMyNameActionRecyclingPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionRecyclingMyNameActionRecyclingPostResponse, error)

	ActionRecyclingMyNameActionRecyclingPostWithResponse(ctx context.Context, name string, body ActionRecyclingMyNameActionRecyclingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionRecyclingMyNameActionRecyclingPostResponse, error)

	// ActionCompleteTaskMyNameActionTaskCompletePostWithResponse request
	ActionCompleteTaskMyNameActionTaskCompletePostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionCompleteTaskMyNameActionTaskCompletePostResponse, error)

	// ActionTaskExchangeMyNameActionTaskExchangePostWithResponse request
	ActionTaskExchangeMyNameActionTaskExchangePostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionTaskExchangeMyNameActionTaskExchangePostResponse, error)

	// ActionAcceptNewTaskMyNameActionTaskNewPostWithResponse request
	ActionAcceptNewTaskMyNameActionTaskNewPostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionAcceptNewTaskMyNameActionTaskNewPostResponse, error)

	// ActionUnequipItemMyNameActionUnequipPostWithBodyWithResponse request with any body
	ActionUnequipItemMyNameActionUnequipPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionUnequipItemMyNameActionUnequipPostResponse, error)

	ActionUnequipItemMyNameActionUnequipPostWithResponse(ctx context.Context, name string, body ActionUnequipItemMyNameActionUnequipPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionUnequipItemMyNameActionUnequipPostResponse, error)

	// GetCharacterLogsMyNameLogsGetWithResponse request
	GetCharacterLogsMyNameLogsGetWithResponse(ctx context.Context, name string, params *GetCharacterLogsMyNameLogsGetParams, reqEditors ...RequestEditorFn) (*GetCharacterLogsMyNameLogsGetResponse, error)

	// GetAllResourcesResourcesGetWithResponse request
	GetAllResourcesResourcesGetWithResponse(ctx context.Context, params *GetAllResourcesResourcesGetParams, reqEditors ...RequestEditorFn) (*GetAllResourcesResourcesGetResponse, error)

	// GetResourcesResourcesCodeGetWithResponse request
	GetResourcesResourcesCodeGetWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetResourcesResourcesCodeGetResponse, error)

	// GenerateTokenTokenPostWithResponse request
	GenerateTokenTokenPostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GenerateTokenTokenPostResponse, error)
}

type GetStatusGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetStatusGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAccountAccountsCreatePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseSchema
}

// Status returns HTTPResponse.Status
func (r CreateAccountAccountsCreatePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAccountAccountsCreatePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllCharactersCharactersGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageCharacterSchema
}

// Status returns HTTPResponse.Status
func (r GetAllCharactersCharactersGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllCharactersCharactersGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCharacterCharactersCreatePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharacterResponseSchema
}

// Status returns HTTPResponse.Status
func (r CreateCharacterCharactersCreatePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCharacterCharactersCreatePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharacterCharactersNameGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharacterResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetCharacterCharactersNameGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharacterCharactersNameGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllEventsEventsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageEventSchema
}

// Status returns HTTPResponse.Status
func (r GetAllEventsEventsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllEventsEventsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllGeItemsGeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageGEItemSchema
}

// Status returns HTTPResponse.Status
func (r GetAllGeItemsGeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllGeItemsGeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGeItemGeCodeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GEItemResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetGeItemGeCodeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGeItemGeCodeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllItemsItemsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageItemSchema
}

// Status returns HTTPResponse.Status
func (r GetAllItemsItemsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllItemsItemsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetItemItemsCodeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ItemResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetItemItemsCodeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetItemItemsCodeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllMapsMapsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageMapSchema
}

// Status returns HTTPResponse.Status
func (r GetAllMapsMapsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllMapsMapsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMapMapsXYGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MapResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetMapMapsXYGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMapMapsXYGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllMonstersMonstersGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageMonsterSchema
}

// Status returns HTTPResponse.Status
func (r GetAllMonstersMonstersGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllMonstersMonstersGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMonsterMonstersCodeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MonsterResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetMonsterMonstersCodeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMonsterMonstersCodeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBankGoldsMyBankGoldGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GoldBankResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetBankGoldsMyBankGoldGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBankGoldsMyBankGoldGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBankItemsMyBankItemsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageSimpleItemSchema
}

// Status returns HTTPResponse.Status
func (r GetBankItemsMyBankItemsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBankItemsMyBankItemsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangePasswordMyChangePasswordPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseSchema
}

// Status returns HTTPResponse.Status
func (r ChangePasswordMyChangePasswordPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangePasswordMyChangePasswordPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyCharactersMyCharactersGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageMyCharacterSchema
}

// Status returns HTTPResponse.Status
func (r GetMyCharactersMyCharactersGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyCharactersMyCharactersGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllCharactersLogsMyLogsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageActionSchema
}

// Status returns HTTPResponse.Status
func (r GetAllCharactersLogsMyLogsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllCharactersLogsMyLogsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionDepositBankMyNameActionBankDepositPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActionItemBankReponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionDepositBankMyNameActionBankDepositPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionDepositBankMyNameActionBankDepositPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GoldResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionWithdrawBankMyNameActionBankWithdrawPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActionItemBankReponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionWithdrawBankMyNameActionBankWithdrawPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionWithdrawBankMyNameActionBankWithdrawPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GoldResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionCraftingMyNameActionCraftingPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SkillResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionCraftingMyNameActionCraftingPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionCraftingMyNameActionCraftingPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionDeleteItemMyNameActionDeletePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteItemResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionDeleteItemMyNameActionDeletePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionDeleteItemMyNameActionDeletePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionEquipItemMyNameActionEquipPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EquipmentResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionEquipItemMyNameActionEquipPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionEquipItemMyNameActionEquipPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionFightMyNameActionFightPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharacterFightResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionFightMyNameActionFightPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionFightMyNameActionFightPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionGatheringMyNameActionGatheringPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SkillResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionGatheringMyNameActionGatheringPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionGatheringMyNameActionGatheringPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionGeBuyItemMyNameActionGeBuyPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GETransactionResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionGeBuyItemMyNameActionGeBuyPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionGeBuyItemMyNameActionGeBuyPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionGeSellItemMyNameActionGeSellPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GETransactionResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionGeSellItemMyNameActionGeSellPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionGeSellItemMyNameActionGeSellPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionMoveMyNameActionMovePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharacterMovementResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionMoveMyNameActionMovePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionMoveMyNameActionMovePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionRecyclingMyNameActionRecyclingPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RecylingResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionRecyclingMyNameActionRecyclingPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionRecyclingMyNameActionRecyclingPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionCompleteTaskMyNameActionTaskCompletePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaskRewardResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionCompleteTaskMyNameActionTaskCompletePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionCompleteTaskMyNameActionTaskCompletePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionTaskExchangeMyNameActionTaskExchangePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaskRewardResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionTaskExchangeMyNameActionTaskExchangePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionTaskExchangeMyNameActionTaskExchangePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionAcceptNewTaskMyNameActionTaskNewPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaskResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionAcceptNewTaskMyNameActionTaskNewPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionAcceptNewTaskMyNameActionTaskNewPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionUnequipItemMyNameActionUnequipPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EquipmentResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionUnequipItemMyNameActionUnequipPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionUnequipItemMyNameActionUnequipPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharacterLogsMyNameLogsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageActionSchema
}

// Status returns HTTPResponse.Status
func (r GetCharacterLogsMyNameLogsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharacterLogsMyNameLogsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllResourcesResourcesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageResourceSchema
}

// Status returns HTTPResponse.Status
func (r GetAllResourcesResourcesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllResourcesResourcesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResourcesResourcesCodeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetResourcesResourcesCodeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResourcesResourcesCodeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenerateTokenTokenPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenResponseSchema
}

// Status returns HTTPResponse.Status
func (r GenerateTokenTokenPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenerateTokenTokenPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetStatusGetWithResponse request returning *GetStatusGetResponse
func (c *ClientWithResponses) GetStatusGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusGetResponse, error) {
	rsp, err := c.GetStatusGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusGetResponse(rsp)
}

// CreateAccountAccountsCreatePostWithBodyWithResponse request with arbitrary body returning *CreateAccountAccountsCreatePostResponse
func (c *ClientWithResponses) CreateAccountAccountsCreatePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccountAccountsCreatePostResponse, error) {
	rsp, err := c.CreateAccountAccountsCreatePostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAccountAccountsCreatePostResponse(rsp)
}

func (c *ClientWithResponses) CreateAccountAccountsCreatePostWithResponse(ctx context.Context, body CreateAccountAccountsCreatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAccountAccountsCreatePostResponse, error) {
	rsp, err := c.CreateAccountAccountsCreatePost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAccountAccountsCreatePostResponse(rsp)
}

// GetAllCharactersCharactersGetWithResponse request returning *GetAllCharactersCharactersGetResponse
func (c *ClientWithResponses) GetAllCharactersCharactersGetWithResponse(ctx context.Context, params *GetAllCharactersCharactersGetParams, reqEditors ...RequestEditorFn) (*GetAllCharactersCharactersGetResponse, error) {
	rsp, err := c.GetAllCharactersCharactersGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllCharactersCharactersGetResponse(rsp)
}

// CreateCharacterCharactersCreatePostWithBodyWithResponse request with arbitrary body returning *CreateCharacterCharactersCreatePostResponse
func (c *ClientWithResponses) CreateCharacterCharactersCreatePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCharacterCharactersCreatePostResponse, error) {
	rsp, err := c.CreateCharacterCharactersCreatePostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCharacterCharactersCreatePostResponse(rsp)
}

func (c *ClientWithResponses) CreateCharacterCharactersCreatePostWithResponse(ctx context.Context, body CreateCharacterCharactersCreatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCharacterCharactersCreatePostResponse, error) {
	rsp, err := c.CreateCharacterCharactersCreatePost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCharacterCharactersCreatePostResponse(rsp)
}

// GetCharacterCharactersNameGetWithResponse request returning *GetCharacterCharactersNameGetResponse
func (c *ClientWithResponses) GetCharacterCharactersNameGetWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetCharacterCharactersNameGetResponse, error) {
	rsp, err := c.GetCharacterCharactersNameGet(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharacterCharactersNameGetResponse(rsp)
}

// GetAllEventsEventsGetWithResponse request returning *GetAllEventsEventsGetResponse
func (c *ClientWithResponses) GetAllEventsEventsGetWithResponse(ctx context.Context, params *GetAllEventsEventsGetParams, reqEditors ...RequestEditorFn) (*GetAllEventsEventsGetResponse, error) {
	rsp, err := c.GetAllEventsEventsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllEventsEventsGetResponse(rsp)
}

// GetAllGeItemsGeGetWithResponse request returning *GetAllGeItemsGeGetResponse
func (c *ClientWithResponses) GetAllGeItemsGeGetWithResponse(ctx context.Context, params *GetAllGeItemsGeGetParams, reqEditors ...RequestEditorFn) (*GetAllGeItemsGeGetResponse, error) {
	rsp, err := c.GetAllGeItemsGeGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllGeItemsGeGetResponse(rsp)
}

// GetGeItemGeCodeGetWithResponse request returning *GetGeItemGeCodeGetResponse
func (c *ClientWithResponses) GetGeItemGeCodeGetWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetGeItemGeCodeGetResponse, error) {
	rsp, err := c.GetGeItemGeCodeGet(ctx, code, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGeItemGeCodeGetResponse(rsp)
}

// GetAllItemsItemsGetWithResponse request returning *GetAllItemsItemsGetResponse
func (c *ClientWithResponses) GetAllItemsItemsGetWithResponse(ctx context.Context, params *GetAllItemsItemsGetParams, reqEditors ...RequestEditorFn) (*GetAllItemsItemsGetResponse, error) {
	rsp, err := c.GetAllItemsItemsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllItemsItemsGetResponse(rsp)
}

// GetItemItemsCodeGetWithResponse request returning *GetItemItemsCodeGetResponse
func (c *ClientWithResponses) GetItemItemsCodeGetWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetItemItemsCodeGetResponse, error) {
	rsp, err := c.GetItemItemsCodeGet(ctx, code, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetItemItemsCodeGetResponse(rsp)
}

// GetAllMapsMapsGetWithResponse request returning *GetAllMapsMapsGetResponse
func (c *ClientWithResponses) GetAllMapsMapsGetWithResponse(ctx context.Context, params *GetAllMapsMapsGetParams, reqEditors ...RequestEditorFn) (*GetAllMapsMapsGetResponse, error) {
	rsp, err := c.GetAllMapsMapsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllMapsMapsGetResponse(rsp)
}

// GetMapMapsXYGetWithResponse request returning *GetMapMapsXYGetResponse
func (c *ClientWithResponses) GetMapMapsXYGetWithResponse(ctx context.Context, x int, y int, reqEditors ...RequestEditorFn) (*GetMapMapsXYGetResponse, error) {
	rsp, err := c.GetMapMapsXYGet(ctx, x, y, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMapMapsXYGetResponse(rsp)
}

// GetAllMonstersMonstersGetWithResponse request returning *GetAllMonstersMonstersGetResponse
func (c *ClientWithResponses) GetAllMonstersMonstersGetWithResponse(ctx context.Context, params *GetAllMonstersMonstersGetParams, reqEditors ...RequestEditorFn) (*GetAllMonstersMonstersGetResponse, error) {
	rsp, err := c.GetAllMonstersMonstersGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllMonstersMonstersGetResponse(rsp)
}

// GetMonsterMonstersCodeGetWithResponse request returning *GetMonsterMonstersCodeGetResponse
func (c *ClientWithResponses) GetMonsterMonstersCodeGetWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetMonsterMonstersCodeGetResponse, error) {
	rsp, err := c.GetMonsterMonstersCodeGet(ctx, code, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMonsterMonstersCodeGetResponse(rsp)
}

// GetBankGoldsMyBankGoldGetWithResponse request returning *GetBankGoldsMyBankGoldGetResponse
func (c *ClientWithResponses) GetBankGoldsMyBankGoldGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBankGoldsMyBankGoldGetResponse, error) {
	rsp, err := c.GetBankGoldsMyBankGoldGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBankGoldsMyBankGoldGetResponse(rsp)
}

// GetBankItemsMyBankItemsGetWithResponse request returning *GetBankItemsMyBankItemsGetResponse
func (c *ClientWithResponses) GetBankItemsMyBankItemsGetWithResponse(ctx context.Context, params *GetBankItemsMyBankItemsGetParams, reqEditors ...RequestEditorFn) (*GetBankItemsMyBankItemsGetResponse, error) {
	rsp, err := c.GetBankItemsMyBankItemsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBankItemsMyBankItemsGetResponse(rsp)
}

// ChangePasswordMyChangePasswordPostWithBodyWithResponse request with arbitrary body returning *ChangePasswordMyChangePasswordPostResponse
func (c *ClientWithResponses) ChangePasswordMyChangePasswordPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangePasswordMyChangePasswordPostResponse, error) {
	rsp, err := c.ChangePasswordMyChangePasswordPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangePasswordMyChangePasswordPostResponse(rsp)
}

func (c *ClientWithResponses) ChangePasswordMyChangePasswordPostWithResponse(ctx context.Context, body ChangePasswordMyChangePasswordPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangePasswordMyChangePasswordPostResponse, error) {
	rsp, err := c.ChangePasswordMyChangePasswordPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangePasswordMyChangePasswordPostResponse(rsp)
}

// GetMyCharactersMyCharactersGetWithResponse request returning *GetMyCharactersMyCharactersGetResponse
func (c *ClientWithResponses) GetMyCharactersMyCharactersGetWithResponse(ctx context.Context, params *GetMyCharactersMyCharactersGetParams, reqEditors ...RequestEditorFn) (*GetMyCharactersMyCharactersGetResponse, error) {
	rsp, err := c.GetMyCharactersMyCharactersGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMyCharactersMyCharactersGetResponse(rsp)
}

// GetAllCharactersLogsMyLogsGetWithResponse request returning *GetAllCharactersLogsMyLogsGetResponse
func (c *ClientWithResponses) GetAllCharactersLogsMyLogsGetWithResponse(ctx context.Context, params *GetAllCharactersLogsMyLogsGetParams, reqEditors ...RequestEditorFn) (*GetAllCharactersLogsMyLogsGetResponse, error) {
	rsp, err := c.GetAllCharactersLogsMyLogsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllCharactersLogsMyLogsGetResponse(rsp)
}

// ActionDepositBankMyNameActionBankDepositPostWithBodyWithResponse request with arbitrary body returning *ActionDepositBankMyNameActionBankDepositPostResponse
func (c *ClientWithResponses) ActionDepositBankMyNameActionBankDepositPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionDepositBankMyNameActionBankDepositPostResponse, error) {
	rsp, err := c.ActionDepositBankMyNameActionBankDepositPostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionDepositBankMyNameActionBankDepositPostResponse(rsp)
}

func (c *ClientWithResponses) ActionDepositBankMyNameActionBankDepositPostWithResponse(ctx context.Context, name string, body ActionDepositBankMyNameActionBankDepositPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionDepositBankMyNameActionBankDepositPostResponse, error) {
	rsp, err := c.ActionDepositBankMyNameActionBankDepositPost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionDepositBankMyNameActionBankDepositPostResponse(rsp)
}

// ActionDepositBankGoldMyNameActionBankDepositGoldPostWithBodyWithResponse request with arbitrary body returning *ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse
func (c *ClientWithResponses) ActionDepositBankGoldMyNameActionBankDepositGoldPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse, error) {
	rsp, err := c.ActionDepositBankGoldMyNameActionBankDepositGoldPostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionDepositBankGoldMyNameActionBankDepositGoldPostResponse(rsp)
}

func (c *ClientWithResponses) ActionDepositBankGoldMyNameActionBankDepositGoldPostWithResponse(ctx context.Context, name string, body ActionDepositBankGoldMyNameActionBankDepositGoldPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse, error) {
	rsp, err := c.ActionDepositBankGoldMyNameActionBankDepositGoldPost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionDepositBankGoldMyNameActionBankDepositGoldPostResponse(rsp)
}

// ActionWithdrawBankMyNameActionBankWithdrawPostWithBodyWithResponse request with arbitrary body returning *ActionWithdrawBankMyNameActionBankWithdrawPostResponse
func (c *ClientWithResponses) ActionWithdrawBankMyNameActionBankWithdrawPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionWithdrawBankMyNameActionBankWithdrawPostResponse, error) {
	rsp, err := c.ActionWithdrawBankMyNameActionBankWithdrawPostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionWithdrawBankMyNameActionBankWithdrawPostResponse(rsp)
}

func (c *ClientWithResponses) ActionWithdrawBankMyNameActionBankWithdrawPostWithResponse(ctx context.Context, name string, body ActionWithdrawBankMyNameActionBankWithdrawPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionWithdrawBankMyNameActionBankWithdrawPostResponse, error) {
	rsp, err := c.ActionWithdrawBankMyNameActionBankWithdrawPost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionWithdrawBankMyNameActionBankWithdrawPostResponse(rsp)
}

// ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostWithBodyWithResponse request with arbitrary body returning *ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse
func (c *ClientWithResponses) ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse, error) {
	rsp, err := c.ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse(rsp)
}

func (c *ClientWithResponses) ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostWithResponse(ctx context.Context, name string, body ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse, error) {
	rsp, err := c.ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse(rsp)
}

// ActionCraftingMyNameActionCraftingPostWithBodyWithResponse request with arbitrary body returning *ActionCraftingMyNameActionCraftingPostResponse
func (c *ClientWithResponses) ActionCraftingMyNameActionCraftingPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionCraftingMyNameActionCraftingPostResponse, error) {
	rsp, err := c.ActionCraftingMyNameActionCraftingPostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionCraftingMyNameActionCraftingPostResponse(rsp)
}

func (c *ClientWithResponses) ActionCraftingMyNameActionCraftingPostWithResponse(ctx context.Context, name string, body ActionCraftingMyNameActionCraftingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionCraftingMyNameActionCraftingPostResponse, error) {
	rsp, err := c.ActionCraftingMyNameActionCraftingPost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionCraftingMyNameActionCraftingPostResponse(rsp)
}

// ActionDeleteItemMyNameActionDeletePostWithBodyWithResponse request with arbitrary body returning *ActionDeleteItemMyNameActionDeletePostResponse
func (c *ClientWithResponses) ActionDeleteItemMyNameActionDeletePostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionDeleteItemMyNameActionDeletePostResponse, error) {
	rsp, err := c.ActionDeleteItemMyNameActionDeletePostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionDeleteItemMyNameActionDeletePostResponse(rsp)
}

func (c *ClientWithResponses) ActionDeleteItemMyNameActionDeletePostWithResponse(ctx context.Context, name string, body ActionDeleteItemMyNameActionDeletePostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionDeleteItemMyNameActionDeletePostResponse, error) {
	rsp, err := c.ActionDeleteItemMyNameActionDeletePost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionDeleteItemMyNameActionDeletePostResponse(rsp)
}

// ActionEquipItemMyNameActionEquipPostWithBodyWithResponse request with arbitrary body returning *ActionEquipItemMyNameActionEquipPostResponse
func (c *ClientWithResponses) ActionEquipItemMyNameActionEquipPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionEquipItemMyNameActionEquipPostResponse, error) {
	rsp, err := c.ActionEquipItemMyNameActionEquipPostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionEquipItemMyNameActionEquipPostResponse(rsp)
}

func (c *ClientWithResponses) ActionEquipItemMyNameActionEquipPostWithResponse(ctx context.Context, name string, body ActionEquipItemMyNameActionEquipPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionEquipItemMyNameActionEquipPostResponse, error) {
	rsp, err := c.ActionEquipItemMyNameActionEquipPost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionEquipItemMyNameActionEquipPostResponse(rsp)
}

// ActionFightMyNameActionFightPostWithResponse request returning *ActionFightMyNameActionFightPostResponse
func (c *ClientWithResponses) ActionFightMyNameActionFightPostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionFightMyNameActionFightPostResponse, error) {
	rsp, err := c.ActionFightMyNameActionFightPost(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionFightMyNameActionFightPostResponse(rsp)
}

// ActionGatheringMyNameActionGatheringPostWithResponse request returning *ActionGatheringMyNameActionGatheringPostResponse
func (c *ClientWithResponses) ActionGatheringMyNameActionGatheringPostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionGatheringMyNameActionGatheringPostResponse, error) {
	rsp, err := c.ActionGatheringMyNameActionGatheringPost(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionGatheringMyNameActionGatheringPostResponse(rsp)
}

// ActionGeBuyItemMyNameActionGeBuyPostWithBodyWithResponse request with arbitrary body returning *ActionGeBuyItemMyNameActionGeBuyPostResponse
func (c *ClientWithResponses) ActionGeBuyItemMyNameActionGeBuyPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionGeBuyItemMyNameActionGeBuyPostResponse, error) {
	rsp, err := c.ActionGeBuyItemMyNameActionGeBuyPostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionGeBuyItemMyNameActionGeBuyPostResponse(rsp)
}

func (c *ClientWithResponses) ActionGeBuyItemMyNameActionGeBuyPostWithResponse(ctx context.Context, name string, body ActionGeBuyItemMyNameActionGeBuyPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionGeBuyItemMyNameActionGeBuyPostResponse, error) {
	rsp, err := c.ActionGeBuyItemMyNameActionGeBuyPost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionGeBuyItemMyNameActionGeBuyPostResponse(rsp)
}

// ActionGeSellItemMyNameActionGeSellPostWithBodyWithResponse request with arbitrary body returning *ActionGeSellItemMyNameActionGeSellPostResponse
func (c *ClientWithResponses) ActionGeSellItemMyNameActionGeSellPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionGeSellItemMyNameActionGeSellPostResponse, error) {
	rsp, err := c.ActionGeSellItemMyNameActionGeSellPostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionGeSellItemMyNameActionGeSellPostResponse(rsp)
}

func (c *ClientWithResponses) ActionGeSellItemMyNameActionGeSellPostWithResponse(ctx context.Context, name string, body ActionGeSellItemMyNameActionGeSellPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionGeSellItemMyNameActionGeSellPostResponse, error) {
	rsp, err := c.ActionGeSellItemMyNameActionGeSellPost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionGeSellItemMyNameActionGeSellPostResponse(rsp)
}

// ActionMoveMyNameActionMovePostWithBodyWithResponse request with arbitrary body returning *ActionMoveMyNameActionMovePostResponse
func (c *ClientWithResponses) ActionMoveMyNameActionMovePostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionMoveMyNameActionMovePostResponse, error) {
	rsp, err := c.ActionMoveMyNameActionMovePostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionMoveMyNameActionMovePostResponse(rsp)
}

func (c *ClientWithResponses) ActionMoveMyNameActionMovePostWithResponse(ctx context.Context, name string, body ActionMoveMyNameActionMovePostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionMoveMyNameActionMovePostResponse, error) {
	rsp, err := c.ActionMoveMyNameActionMovePost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionMoveMyNameActionMovePostResponse(rsp)
}

// ActionRecyclingMyNameActionRecyclingPostWithBodyWithResponse request with arbitrary body returning *ActionRecyclingMyNameActionRecyclingPostResponse
func (c *ClientWithResponses) ActionRecyclingMyNameActionRecyclingPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionRecyclingMyNameActionRecyclingPostResponse, error) {
	rsp, err := c.ActionRecyclingMyNameActionRecyclingPostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionRecyclingMyNameActionRecyclingPostResponse(rsp)
}

func (c *ClientWithResponses) ActionRecyclingMyNameActionRecyclingPostWithResponse(ctx context.Context, name string, body ActionRecyclingMyNameActionRecyclingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionRecyclingMyNameActionRecyclingPostResponse, error) {
	rsp, err := c.ActionRecyclingMyNameActionRecyclingPost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionRecyclingMyNameActionRecyclingPostResponse(rsp)
}

// ActionCompleteTaskMyNameActionTaskCompletePostWithResponse request returning *ActionCompleteTaskMyNameActionTaskCompletePostResponse
func (c *ClientWithResponses) ActionCompleteTaskMyNameActionTaskCompletePostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionCompleteTaskMyNameActionTaskCompletePostResponse, error) {
	rsp, err := c.ActionCompleteTaskMyNameActionTaskCompletePost(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionCompleteTaskMyNameActionTaskCompletePostResponse(rsp)
}

// ActionTaskExchangeMyNameActionTaskExchangePostWithResponse request returning *ActionTaskExchangeMyNameActionTaskExchangePostResponse
func (c *ClientWithResponses) ActionTaskExchangeMyNameActionTaskExchangePostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionTaskExchangeMyNameActionTaskExchangePostResponse, error) {
	rsp, err := c.ActionTaskExchangeMyNameActionTaskExchangePost(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionTaskExchangeMyNameActionTaskExchangePostResponse(rsp)
}

// ActionAcceptNewTaskMyNameActionTaskNewPostWithResponse request returning *ActionAcceptNewTaskMyNameActionTaskNewPostResponse
func (c *ClientWithResponses) ActionAcceptNewTaskMyNameActionTaskNewPostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionAcceptNewTaskMyNameActionTaskNewPostResponse, error) {
	rsp, err := c.ActionAcceptNewTaskMyNameActionTaskNewPost(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionAcceptNewTaskMyNameActionTaskNewPostResponse(rsp)
}

// ActionUnequipItemMyNameActionUnequipPostWithBodyWithResponse request with arbitrary body returning *ActionUnequipItemMyNameActionUnequipPostResponse
func (c *ClientWithResponses) ActionUnequipItemMyNameActionUnequipPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionUnequipItemMyNameActionUnequipPostResponse, error) {
	rsp, err := c.ActionUnequipItemMyNameActionUnequipPostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionUnequipItemMyNameActionUnequipPostResponse(rsp)
}

func (c *ClientWithResponses) ActionUnequipItemMyNameActionUnequipPostWithResponse(ctx context.Context, name string, body ActionUnequipItemMyNameActionUnequipPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionUnequipItemMyNameActionUnequipPostResponse, error) {
	rsp, err := c.ActionUnequipItemMyNameActionUnequipPost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionUnequipItemMyNameActionUnequipPostResponse(rsp)
}

// GetCharacterLogsMyNameLogsGetWithResponse request returning *GetCharacterLogsMyNameLogsGetResponse
func (c *ClientWithResponses) GetCharacterLogsMyNameLogsGetWithResponse(ctx context.Context, name string, params *GetCharacterLogsMyNameLogsGetParams, reqEditors ...RequestEditorFn) (*GetCharacterLogsMyNameLogsGetResponse, error) {
	rsp, err := c.GetCharacterLogsMyNameLogsGet(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharacterLogsMyNameLogsGetResponse(rsp)
}

// GetAllResourcesResourcesGetWithResponse request returning *GetAllResourcesResourcesGetResponse
func (c *ClientWithResponses) GetAllResourcesResourcesGetWithResponse(ctx context.Context, params *GetAllResourcesResourcesGetParams, reqEditors ...RequestEditorFn) (*GetAllResourcesResourcesGetResponse, error) {
	rsp, err := c.GetAllResourcesResourcesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllResourcesResourcesGetResponse(rsp)
}

// GetResourcesResourcesCodeGetWithResponse request returning *GetResourcesResourcesCodeGetResponse
func (c *ClientWithResponses) GetResourcesResourcesCodeGetWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetResourcesResourcesCodeGetResponse, error) {
	rsp, err := c.GetResourcesResourcesCodeGet(ctx, code, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResourcesResourcesCodeGetResponse(rsp)
}

// GenerateTokenTokenPostWithResponse request returning *GenerateTokenTokenPostResponse
func (c *ClientWithResponses) GenerateTokenTokenPostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GenerateTokenTokenPostResponse, error) {
	rsp, err := c.GenerateTokenTokenPost(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateTokenTokenPostResponse(rsp)
}

// ParseGetStatusGetResponse parses an HTTP response from a GetStatusGetWithResponse call
func ParseGetStatusGetResponse(rsp *http.Response) (*GetStatusGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAccountAccountsCreatePostResponse parses an HTTP response from a CreateAccountAccountsCreatePostWithResponse call
func ParseCreateAccountAccountsCreatePostResponse(rsp *http.Response) (*CreateAccountAccountsCreatePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAccountAccountsCreatePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllCharactersCharactersGetResponse parses an HTTP response from a GetAllCharactersCharactersGetWithResponse call
func ParseGetAllCharactersCharactersGetResponse(rsp *http.Response) (*GetAllCharactersCharactersGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllCharactersCharactersGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageCharacterSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateCharacterCharactersCreatePostResponse parses an HTTP response from a CreateCharacterCharactersCreatePostWithResponse call
func ParseCreateCharacterCharactersCreatePostResponse(rsp *http.Response) (*CreateCharacterCharactersCreatePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCharacterCharactersCreatePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharacterResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCharacterCharactersNameGetResponse parses an HTTP response from a GetCharacterCharactersNameGetWithResponse call
func ParseGetCharacterCharactersNameGetResponse(rsp *http.Response) (*GetCharacterCharactersNameGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharacterCharactersNameGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharacterResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllEventsEventsGetResponse parses an HTTP response from a GetAllEventsEventsGetWithResponse call
func ParseGetAllEventsEventsGetResponse(rsp *http.Response) (*GetAllEventsEventsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllEventsEventsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageEventSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllGeItemsGeGetResponse parses an HTTP response from a GetAllGeItemsGeGetWithResponse call
func ParseGetAllGeItemsGeGetResponse(rsp *http.Response) (*GetAllGeItemsGeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllGeItemsGeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageGEItemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGeItemGeCodeGetResponse parses an HTTP response from a GetGeItemGeCodeGetWithResponse call
func ParseGetGeItemGeCodeGetResponse(rsp *http.Response) (*GetGeItemGeCodeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGeItemGeCodeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GEItemResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllItemsItemsGetResponse parses an HTTP response from a GetAllItemsItemsGetWithResponse call
func ParseGetAllItemsItemsGetResponse(rsp *http.Response) (*GetAllItemsItemsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllItemsItemsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageItemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetItemItemsCodeGetResponse parses an HTTP response from a GetItemItemsCodeGetWithResponse call
func ParseGetItemItemsCodeGetResponse(rsp *http.Response) (*GetItemItemsCodeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetItemItemsCodeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ItemResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllMapsMapsGetResponse parses an HTTP response from a GetAllMapsMapsGetWithResponse call
func ParseGetAllMapsMapsGetResponse(rsp *http.Response) (*GetAllMapsMapsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllMapsMapsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageMapSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMapMapsXYGetResponse parses an HTTP response from a GetMapMapsXYGetWithResponse call
func ParseGetMapMapsXYGetResponse(rsp *http.Response) (*GetMapMapsXYGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMapMapsXYGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MapResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllMonstersMonstersGetResponse parses an HTTP response from a GetAllMonstersMonstersGetWithResponse call
func ParseGetAllMonstersMonstersGetResponse(rsp *http.Response) (*GetAllMonstersMonstersGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllMonstersMonstersGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageMonsterSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMonsterMonstersCodeGetResponse parses an HTTP response from a GetMonsterMonstersCodeGetWithResponse call
func ParseGetMonsterMonstersCodeGetResponse(rsp *http.Response) (*GetMonsterMonstersCodeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMonsterMonstersCodeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MonsterResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetBankGoldsMyBankGoldGetResponse parses an HTTP response from a GetBankGoldsMyBankGoldGetWithResponse call
func ParseGetBankGoldsMyBankGoldGetResponse(rsp *http.Response) (*GetBankGoldsMyBankGoldGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBankGoldsMyBankGoldGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GoldBankResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetBankItemsMyBankItemsGetResponse parses an HTTP response from a GetBankItemsMyBankItemsGetWithResponse call
func ParseGetBankItemsMyBankItemsGetResponse(rsp *http.Response) (*GetBankItemsMyBankItemsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBankItemsMyBankItemsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageSimpleItemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangePasswordMyChangePasswordPostResponse parses an HTTP response from a ChangePasswordMyChangePasswordPostWithResponse call
func ParseChangePasswordMyChangePasswordPostResponse(rsp *http.Response) (*ChangePasswordMyChangePasswordPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChangePasswordMyChangePasswordPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMyCharactersMyCharactersGetResponse parses an HTTP response from a GetMyCharactersMyCharactersGetWithResponse call
func ParseGetMyCharactersMyCharactersGetResponse(rsp *http.Response) (*GetMyCharactersMyCharactersGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMyCharactersMyCharactersGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageMyCharacterSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllCharactersLogsMyLogsGetResponse parses an HTTP response from a GetAllCharactersLogsMyLogsGetWithResponse call
func ParseGetAllCharactersLogsMyLogsGetResponse(rsp *http.Response) (*GetAllCharactersLogsMyLogsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllCharactersLogsMyLogsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageActionSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionDepositBankMyNameActionBankDepositPostResponse parses an HTTP response from a ActionDepositBankMyNameActionBankDepositPostWithResponse call
func ParseActionDepositBankMyNameActionBankDepositPostResponse(rsp *http.Response) (*ActionDepositBankMyNameActionBankDepositPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionDepositBankMyNameActionBankDepositPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActionItemBankReponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionDepositBankGoldMyNameActionBankDepositGoldPostResponse parses an HTTP response from a ActionDepositBankGoldMyNameActionBankDepositGoldPostWithResponse call
func ParseActionDepositBankGoldMyNameActionBankDepositGoldPostResponse(rsp *http.Response) (*ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GoldResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionWithdrawBankMyNameActionBankWithdrawPostResponse parses an HTTP response from a ActionWithdrawBankMyNameActionBankWithdrawPostWithResponse call
func ParseActionWithdrawBankMyNameActionBankWithdrawPostResponse(rsp *http.Response) (*ActionWithdrawBankMyNameActionBankWithdrawPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionWithdrawBankMyNameActionBankWithdrawPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActionItemBankReponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse parses an HTTP response from a ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostWithResponse call
func ParseActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse(rsp *http.Response) (*ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GoldResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionCraftingMyNameActionCraftingPostResponse parses an HTTP response from a ActionCraftingMyNameActionCraftingPostWithResponse call
func ParseActionCraftingMyNameActionCraftingPostResponse(rsp *http.Response) (*ActionCraftingMyNameActionCraftingPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionCraftingMyNameActionCraftingPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SkillResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionDeleteItemMyNameActionDeletePostResponse parses an HTTP response from a ActionDeleteItemMyNameActionDeletePostWithResponse call
func ParseActionDeleteItemMyNameActionDeletePostResponse(rsp *http.Response) (*ActionDeleteItemMyNameActionDeletePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionDeleteItemMyNameActionDeletePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteItemResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionEquipItemMyNameActionEquipPostResponse parses an HTTP response from a ActionEquipItemMyNameActionEquipPostWithResponse call
func ParseActionEquipItemMyNameActionEquipPostResponse(rsp *http.Response) (*ActionEquipItemMyNameActionEquipPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionEquipItemMyNameActionEquipPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EquipmentResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionFightMyNameActionFightPostResponse parses an HTTP response from a ActionFightMyNameActionFightPostWithResponse call
func ParseActionFightMyNameActionFightPostResponse(rsp *http.Response) (*ActionFightMyNameActionFightPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionFightMyNameActionFightPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharacterFightResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionGatheringMyNameActionGatheringPostResponse parses an HTTP response from a ActionGatheringMyNameActionGatheringPostWithResponse call
func ParseActionGatheringMyNameActionGatheringPostResponse(rsp *http.Response) (*ActionGatheringMyNameActionGatheringPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionGatheringMyNameActionGatheringPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SkillResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionGeBuyItemMyNameActionGeBuyPostResponse parses an HTTP response from a ActionGeBuyItemMyNameActionGeBuyPostWithResponse call
func ParseActionGeBuyItemMyNameActionGeBuyPostResponse(rsp *http.Response) (*ActionGeBuyItemMyNameActionGeBuyPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionGeBuyItemMyNameActionGeBuyPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GETransactionResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionGeSellItemMyNameActionGeSellPostResponse parses an HTTP response from a ActionGeSellItemMyNameActionGeSellPostWithResponse call
func ParseActionGeSellItemMyNameActionGeSellPostResponse(rsp *http.Response) (*ActionGeSellItemMyNameActionGeSellPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionGeSellItemMyNameActionGeSellPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GETransactionResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionMoveMyNameActionMovePostResponse parses an HTTP response from a ActionMoveMyNameActionMovePostWithResponse call
func ParseActionMoveMyNameActionMovePostResponse(rsp *http.Response) (*ActionMoveMyNameActionMovePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionMoveMyNameActionMovePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharacterMovementResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionRecyclingMyNameActionRecyclingPostResponse parses an HTTP response from a ActionRecyclingMyNameActionRecyclingPostWithResponse call
func ParseActionRecyclingMyNameActionRecyclingPostResponse(rsp *http.Response) (*ActionRecyclingMyNameActionRecyclingPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionRecyclingMyNameActionRecyclingPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RecylingResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionCompleteTaskMyNameActionTaskCompletePostResponse parses an HTTP response from a ActionCompleteTaskMyNameActionTaskCompletePostWithResponse call
func ParseActionCompleteTaskMyNameActionTaskCompletePostResponse(rsp *http.Response) (*ActionCompleteTaskMyNameActionTaskCompletePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionCompleteTaskMyNameActionTaskCompletePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskRewardResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionTaskExchangeMyNameActionTaskExchangePostResponse parses an HTTP response from a ActionTaskExchangeMyNameActionTaskExchangePostWithResponse call
func ParseActionTaskExchangeMyNameActionTaskExchangePostResponse(rsp *http.Response) (*ActionTaskExchangeMyNameActionTaskExchangePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionTaskExchangeMyNameActionTaskExchangePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskRewardResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionAcceptNewTaskMyNameActionTaskNewPostResponse parses an HTTP response from a ActionAcceptNewTaskMyNameActionTaskNewPostWithResponse call
func ParseActionAcceptNewTaskMyNameActionTaskNewPostResponse(rsp *http.Response) (*ActionAcceptNewTaskMyNameActionTaskNewPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionAcceptNewTaskMyNameActionTaskNewPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionUnequipItemMyNameActionUnequipPostResponse parses an HTTP response from a ActionUnequipItemMyNameActionUnequipPostWithResponse call
func ParseActionUnequipItemMyNameActionUnequipPostResponse(rsp *http.Response) (*ActionUnequipItemMyNameActionUnequipPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionUnequipItemMyNameActionUnequipPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EquipmentResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCharacterLogsMyNameLogsGetResponse parses an HTTP response from a GetCharacterLogsMyNameLogsGetWithResponse call
func ParseGetCharacterLogsMyNameLogsGetResponse(rsp *http.Response) (*GetCharacterLogsMyNameLogsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharacterLogsMyNameLogsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageActionSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllResourcesResourcesGetResponse parses an HTTP response from a GetAllResourcesResourcesGetWithResponse call
func ParseGetAllResourcesResourcesGetResponse(rsp *http.Response) (*GetAllResourcesResourcesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllResourcesResourcesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageResourceSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetResourcesResourcesCodeGetResponse parses an HTTP response from a GetResourcesResourcesCodeGetWithResponse call
func ParseGetResourcesResourcesCodeGetResponse(rsp *http.Response) (*GetResourcesResourcesCodeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResourcesResourcesCodeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGenerateTokenTokenPostResponse parses an HTTP response from a GenerateTokenTokenPostWithResponse call
func ParseGenerateTokenTokenPostResponse(rsp *http.Response) (*GenerateTokenTokenPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenerateTokenTokenPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
